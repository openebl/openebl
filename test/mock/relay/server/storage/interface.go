// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/relay/server/storage/interface.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/openebl/openebl/pkg/relay/server/storage"
)

// MockRelayServerDataStore is a mock of RelayServerDataStore interface.
type MockRelayServerDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockRelayServerDataStoreMockRecorder
}

// MockRelayServerDataStoreMockRecorder is the mock recorder for MockRelayServerDataStore.
type MockRelayServerDataStoreMockRecorder struct {
	mock *MockRelayServerDataStore
}

// NewMockRelayServerDataStore creates a new mock instance.
func NewMockRelayServerDataStore(ctrl *gomock.Controller) *MockRelayServerDataStore {
	mock := &MockRelayServerDataStore{ctrl: ctrl}
	mock.recorder = &MockRelayServerDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayServerDataStore) EXPECT() *MockRelayServerDataStoreMockRecorder {
	return m.recorder
}

// GetIdentity mocks base method.
func (m *MockRelayServerDataStore) GetIdentity(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentity", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentity indicates an expected call of GetIdentity.
func (mr *MockRelayServerDataStoreMockRecorder) GetIdentity(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentity", reflect.TypeOf((*MockRelayServerDataStore)(nil).GetIdentity), ctx)
}

// GetOffset mocks base method.
func (m *MockRelayServerDataStore) GetOffset(ctx context.Context, peerId string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffset", ctx, peerId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffset indicates an expected call of GetOffset.
func (mr *MockRelayServerDataStoreMockRecorder) GetOffset(ctx, peerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffset", reflect.TypeOf((*MockRelayServerDataStore)(nil).GetOffset), ctx, peerId)
}

// ListEvents mocks base method.
func (m *MockRelayServerDataStore) ListEvents(ctx context.Context, request storage.ListEventRequest) (storage.ListEventResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", ctx, request)
	ret0, _ := ret[0].(storage.ListEventResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockRelayServerDataStoreMockRecorder) ListEvents(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockRelayServerDataStore)(nil).ListEvents), ctx, request)
}

// StoreEventWithOffsetInfo mocks base method.
func (m *MockRelayServerDataStore) StoreEventWithOffsetInfo(ctx context.Context, ts int64, eventID string, eventType int, event []byte, offset int64, peerId string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreEventWithOffsetInfo", ctx, ts, eventID, eventType, event, offset, peerId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreEventWithOffsetInfo indicates an expected call of StoreEventWithOffsetInfo.
func (mr *MockRelayServerDataStoreMockRecorder) StoreEventWithOffsetInfo(ctx, ts, eventID, eventType, event, offset, peerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEventWithOffsetInfo", reflect.TypeOf((*MockRelayServerDataStore)(nil).StoreEventWithOffsetInfo), ctx, ts, eventID, eventType, event, offset, peerId)
}

// StoreOffset mocks base method.
func (m *MockRelayServerDataStore) StoreOffset(ctx context.Context, ts int64, peerId string, offset int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOffset", ctx, ts, peerId, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreOffset indicates an expected call of StoreOffset.
func (mr *MockRelayServerDataStoreMockRecorder) StoreOffset(ctx, ts, peerId, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOffset", reflect.TypeOf((*MockRelayServerDataStore)(nil).StoreOffset), ctx, ts, peerId, offset)
}

// MockCertDataStore is a mock of CertDataStore interface.
type MockCertDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockCertDataStoreMockRecorder
}

// MockCertDataStoreMockRecorder is the mock recorder for MockCertDataStore.
type MockCertDataStoreMockRecorder struct {
	mock *MockCertDataStore
}

// NewMockCertDataStore creates a new mock instance.
func NewMockCertDataStore(ctrl *gomock.Controller) *MockCertDataStore {
	mock := &MockCertDataStore{ctrl: ctrl}
	mock.recorder = &MockCertDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertDataStore) EXPECT() *MockCertDataStoreMockRecorder {
	return m.recorder
}

// AddCRL mocks base method.
func (m *MockCertDataStore) AddCRL(ctx context.Context, ts int64, issuerKeyID, certSerialNumber string, revokedAt int64, crl []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCRL", ctx, ts, issuerKeyID, certSerialNumber, revokedAt, crl)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCRL indicates an expected call of AddCRL.
func (mr *MockCertDataStoreMockRecorder) AddCRL(ctx, ts, issuerKeyID, certSerialNumber, revokedAt, crl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCRL", reflect.TypeOf((*MockCertDataStore)(nil).AddCRL), ctx, ts, issuerKeyID, certSerialNumber, revokedAt, crl)
}

// AddRootCert mocks base method.
func (m *MockCertDataStore) AddRootCert(ctx context.Context, ts int64, fingerPrint string, cert []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRootCert", ctx, ts, fingerPrint, cert)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRootCert indicates an expected call of AddRootCert.
func (mr *MockCertDataStoreMockRecorder) AddRootCert(ctx, ts, fingerPrint, cert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRootCert", reflect.TypeOf((*MockCertDataStore)(nil).AddRootCert), ctx, ts, fingerPrint, cert)
}

// GetActiveRootCert mocks base method.
func (m *MockCertDataStore) GetActiveRootCert(ctx context.Context) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveRootCert", ctx)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveRootCert indicates an expected call of GetActiveRootCert.
func (mr *MockCertDataStoreMockRecorder) GetActiveRootCert(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveRootCert", reflect.TypeOf((*MockCertDataStore)(nil).GetActiveRootCert), ctx)
}

// GetCRL mocks base method.
func (m *MockCertDataStore) GetCRL(ctx context.Context, req storage.GetCRLRequest) (storage.GetCRLResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCRL", ctx, req)
	ret0, _ := ret[0].(storage.GetCRLResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCRL indicates an expected call of GetCRL.
func (mr *MockCertDataStoreMockRecorder) GetCRL(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCRL", reflect.TypeOf((*MockCertDataStore)(nil).GetCRL), ctx, req)
}

// RevokeRootCert mocks base method.
func (m *MockCertDataStore) RevokeRootCert(ctx context.Context, ts int64, fingerPrinter string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeRootCert", ctx, ts, fingerPrinter)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeRootCert indicates an expected call of RevokeRootCert.
func (mr *MockCertDataStoreMockRecorder) RevokeRootCert(ctx, ts, fingerPrinter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRootCert", reflect.TypeOf((*MockCertDataStore)(nil).RevokeRootCert), ctx, ts, fingerPrinter)
}
