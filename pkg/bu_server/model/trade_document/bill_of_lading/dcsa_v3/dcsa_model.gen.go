// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package dcsa_v3

import (
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ActiveReeferSettingsAirExchangeUnit.
const (
	FQH ActiveReeferSettingsAirExchangeUnit = "FQH"
	MQH ActiveReeferSettingsAirExchangeUnit = "MQH"
)

// Defines values for ActiveReeferSettingsTemperatureUnit.
const (
	ActiveReeferSettingsTemperatureUnitCEL ActiveReeferSettingsTemperatureUnit = "CEL"
	ActiveReeferSettingsTemperatureUnitFAH ActiveReeferSettingsTemperatureUnit = "FAH"
)

// Defines values for AdvanceManifestFilingAdvanceManifestFilingsHouseBLPerformedBy.
const (
	CARRIER AdvanceManifestFilingAdvanceManifestFilingsHouseBLPerformedBy = "CARRIER"
	SELF    AdvanceManifestFilingAdvanceManifestFilingsHouseBLPerformedBy = "SELF"
)

// Defines values for CargoGrossVolumeUnit.
const (
	CargoGrossVolumeUnitFTQ CargoGrossVolumeUnit = "FTQ"
	CargoGrossVolumeUnitMTQ CargoGrossVolumeUnit = "MTQ"
)

// Defines values for CargoGrossWeightUnit.
const (
	CargoGrossWeightUnitKGM CargoGrossWeightUnit = "KGM"
	CargoGrossWeightUnitLBR CargoGrossWeightUnit = "LBR"
)

// Defines values for CargoNetVolumeUnit.
const (
	CargoNetVolumeUnitFTQ CargoNetVolumeUnit = "FTQ"
	CargoNetVolumeUnitMTQ CargoNetVolumeUnit = "MTQ"
)

// Defines values for CargoNetWeightUnit.
const (
	CargoNetWeightUnitKGM CargoNetWeightUnit = "KGM"
	CargoNetWeightUnitLBR CargoNetWeightUnit = "LBR"
)

// Defines values for ChargePaymentTermCode.
const (
	ChargePaymentTermCodeCOL ChargePaymentTermCode = "COL"
	ChargePaymentTermCodePRE ChargePaymentTermCode = "PRE"
)

// Defines values for CreateShippingInstructionsFreightPaymentTermCode.
const (
	CreateShippingInstructionsFreightPaymentTermCodeCOL CreateShippingInstructionsFreightPaymentTermCode = "COL"
	CreateShippingInstructionsFreightPaymentTermCodePRE CreateShippingInstructionsFreightPaymentTermCode = "PRE"
)

// Defines values for CreateShippingInstructionsTransportDocumentTypeCode.
const (
	CreateShippingInstructionsTransportDocumentTypeCodeBOL CreateShippingInstructionsTransportDocumentTypeCode = "BOL"
	CreateShippingInstructionsTransportDocumentTypeCodeSWB CreateShippingInstructionsTransportDocumentTypeCode = "SWB"
)

// Defines values for DestinationChargesPaymentTermHaulageChargesPaymentTermCode.
const (
	DestinationChargesPaymentTermHaulageChargesPaymentTermCodeCOL DestinationChargesPaymentTermHaulageChargesPaymentTermCode = "COL"
	DestinationChargesPaymentTermHaulageChargesPaymentTermCodePRE DestinationChargesPaymentTermHaulageChargesPaymentTermCode = "PRE"
)

// Defines values for DestinationChargesPaymentTermOtherChargesPaymentTermCode.
const (
	DestinationChargesPaymentTermOtherChargesPaymentTermCodeCOL DestinationChargesPaymentTermOtherChargesPaymentTermCode = "COL"
	DestinationChargesPaymentTermOtherChargesPaymentTermCodePRE DestinationChargesPaymentTermOtherChargesPaymentTermCode = "PRE"
)

// Defines values for DestinationChargesPaymentTermPortChargesPaymentTermCode.
const (
	DestinationChargesPaymentTermPortChargesPaymentTermCodeCOL DestinationChargesPaymentTermPortChargesPaymentTermCode = "COL"
	DestinationChargesPaymentTermPortChargesPaymentTermCodePRE DestinationChargesPaymentTermPortChargesPaymentTermCode = "PRE"
)

// Defines values for ErrorResponseHttpMethod.
const (
	DELETE ErrorResponseHttpMethod = "DELETE"
	GET    ErrorResponseHttpMethod = "GET"
	HEAD   ErrorResponseHttpMethod = "HEAD"
	OPTION ErrorResponseHttpMethod = "OPTION"
	PATCH  ErrorResponseHttpMethod = "PATCH"
	POST   ErrorResponseHttpMethod = "POST"
	PUT    ErrorResponseHttpMethod = "PUT"
)

// Defines values for FacilityFacilityCodeListProvider.
const (
	FacilityFacilityCodeListProviderBIC  FacilityFacilityCodeListProvider = "BIC"
	FacilityFacilityCodeListProviderSMDG FacilityFacilityCodeListProvider = "SMDG"
)

// Defines values for GrossWeightUnit.
const (
	GrossWeightUnitKGM GrossWeightUnit = "KGM"
	GrossWeightUnitLBR GrossWeightUnit = "LBR"
)

// Defines values for LimitsTemperatureUnit.
const (
	LimitsTemperatureUnitCEL LimitsTemperatureUnit = "CEL"
	LimitsTemperatureUnitFAH LimitsTemperatureUnit = "FAH"
)

// Defines values for NetExplosiveContentUnit.
const (
	NetExplosiveContentUnitGRM NetExplosiveContentUnit = "GRM"
	NetExplosiveContentUnitKGM NetExplosiveContentUnit = "KGM"
	NetExplosiveContentUnitLBR NetExplosiveContentUnit = "LBR"
	NetExplosiveContentUnitONZ NetExplosiveContentUnit = "ONZ"
)

// Defines values for NetVolumeUnit.
const (
	FTQ NetVolumeUnit = "FTQ"
	LTR NetVolumeUnit = "LTR"
	MTQ NetVolumeUnit = "MTQ"
)

// Defines values for NetWeightUnit.
const (
	NetWeightUnitKGM NetWeightUnit = "KGM"
	NetWeightUnitLBR NetWeightUnit = "LBR"
)

// Defines values for OriginChargesPaymentTermHaulageChargesPaymentTermCode.
const (
	OriginChargesPaymentTermHaulageChargesPaymentTermCodeCOL OriginChargesPaymentTermHaulageChargesPaymentTermCode = "COL"
	OriginChargesPaymentTermHaulageChargesPaymentTermCodePRE OriginChargesPaymentTermHaulageChargesPaymentTermCode = "PRE"
)

// Defines values for OriginChargesPaymentTermOtherChargesPaymentTermCode.
const (
	OriginChargesPaymentTermOtherChargesPaymentTermCodeCOL OriginChargesPaymentTermOtherChargesPaymentTermCode = "COL"
	OriginChargesPaymentTermOtherChargesPaymentTermCodePRE OriginChargesPaymentTermOtherChargesPaymentTermCode = "PRE"
)

// Defines values for OriginChargesPaymentTermPortChargesPaymentTermCode.
const (
	OriginChargesPaymentTermPortChargesPaymentTermCodeCOL OriginChargesPaymentTermPortChargesPaymentTermCode = "COL"
	OriginChargesPaymentTermPortChargesPaymentTermCodePRE OriginChargesPaymentTermPortChargesPaymentTermCode = "PRE"
)

// Defines values for SealSource.
const (
	CAR SealSource = "CAR"
	CUS SealSource = "CUS"
	SHI SealSource = "SHI"
	VET SealSource = "VET"
)

// Defines values for ShippingInstructionsFreightPaymentTermCode.
const (
	ShippingInstructionsFreightPaymentTermCodeCOL ShippingInstructionsFreightPaymentTermCode = "COL"
	ShippingInstructionsFreightPaymentTermCodePRE ShippingInstructionsFreightPaymentTermCode = "PRE"
)

// Defines values for ShippingInstructionsTransportDocumentTypeCode.
const (
	ShippingInstructionsTransportDocumentTypeCodeBOL ShippingInstructionsTransportDocumentTypeCode = "BOL"
	ShippingInstructionsTransportDocumentTypeCodeSWB ShippingInstructionsTransportDocumentTypeCode = "SWB"
)

// Defines values for ShippingInstructionsNotificationDatacontenttype.
const (
	ShippingInstructionsNotificationDatacontenttypeApplicationjson ShippingInstructionsNotificationDatacontenttype = "application/json"
)

// Defines values for ShippingInstructionsNotificationSpecversion.
const (
	ShippingInstructionsNotificationSpecversionN10 ShippingInstructionsNotificationSpecversion = "1.0"
)

// Defines values for ShippingInstructionsNotificationType.
const (
	OrgDcsaShippingInstructionsV3 ShippingInstructionsNotificationType = "org.dcsa.shipping-instructions.v3"
)

// Defines values for TareWeightUnit.
const (
	TareWeightUnitKGM TareWeightUnit = "KGM"
	TareWeightUnitLBR TareWeightUnit = "LBR"
)

// Defines values for TransportDocumentCarrierCodeListProvider.
const (
	TransportDocumentCarrierCodeListProviderNMFTA TransportDocumentCarrierCodeListProvider = "NMFTA"
	TransportDocumentCarrierCodeListProviderSMDG  TransportDocumentCarrierCodeListProvider = "SMDG"
)

// Defines values for TransportDocumentDeliveryTypeAtDestination.
const (
	TransportDocumentDeliveryTypeAtDestinationCFS TransportDocumentDeliveryTypeAtDestination = "CFS"
	TransportDocumentDeliveryTypeAtDestinationCY  TransportDocumentDeliveryTypeAtDestination = "CY"
	TransportDocumentDeliveryTypeAtDestinationSD  TransportDocumentDeliveryTypeAtDestination = "SD"
)

// Defines values for TransportDocumentFreightPaymentTermCode.
const (
	TransportDocumentFreightPaymentTermCodeCOL TransportDocumentFreightPaymentTermCode = "COL"
	TransportDocumentFreightPaymentTermCodePRE TransportDocumentFreightPaymentTermCode = "PRE"
)

// Defines values for TransportDocumentReceiptTypeAtOrigin.
const (
	TransportDocumentReceiptTypeAtOriginCFS TransportDocumentReceiptTypeAtOrigin = "CFS"
	TransportDocumentReceiptTypeAtOriginCY  TransportDocumentReceiptTypeAtOrigin = "CY"
	TransportDocumentReceiptTypeAtOriginSD  TransportDocumentReceiptTypeAtOrigin = "SD"
)

// Defines values for TransportDocumentTransportDocumentTypeCode.
const (
	TransportDocumentTransportDocumentTypeCodeBOL TransportDocumentTransportDocumentTypeCode = "BOL"
	TransportDocumentTransportDocumentTypeCodeSWB TransportDocumentTransportDocumentTypeCode = "SWB"
)

// Defines values for TransportDocumentNotificationDatacontenttype.
const (
	TransportDocumentNotificationDatacontenttypeApplicationjson TransportDocumentNotificationDatacontenttype = "application/json"
)

// Defines values for TransportDocumentNotificationSpecversion.
const (
	TransportDocumentNotificationSpecversionN10 TransportDocumentNotificationSpecversion = "1.0"
)

// Defines values for TransportDocumentNotificationType.
const (
	OrgDcsaTransportDocumentV3 TransportDocumentNotificationType = "org.dcsa.transport-document.v3"
)

// Defines values for UpdateShippingInstructionsFreightPaymentTermCode.
const (
	COL UpdateShippingInstructionsFreightPaymentTermCode = "COL"
	PRE UpdateShippingInstructionsFreightPaymentTermCode = "PRE"
)

// Defines values for UpdateShippingInstructionsTransportDocumentTypeCode.
const (
	UpdateShippingInstructionsTransportDocumentTypeCodeBOL UpdateShippingInstructionsTransportDocumentTypeCode = "BOL"
	UpdateShippingInstructionsTransportDocumentTypeCodeSWB UpdateShippingInstructionsTransportDocumentTypeCode = "SWB"
)

// Defines values for UtilizedTransportEquipmentHBLEmptyIndicatorCode.
const (
	UtilizedTransportEquipmentHBLEmptyIndicatorCodeEMPTY UtilizedTransportEquipmentHBLEmptyIndicatorCode = "EMPTY"
	UtilizedTransportEquipmentHBLEmptyIndicatorCodeLADEN UtilizedTransportEquipmentHBLEmptyIndicatorCode = "LADEN"
)

// Defines values for UtilizedTransportEquipmentShipperEmptyIndicatorCode.
const (
	UtilizedTransportEquipmentShipperEmptyIndicatorCodeEMPTY UtilizedTransportEquipmentShipperEmptyIndicatorCode = "EMPTY"
	UtilizedTransportEquipmentShipperEmptyIndicatorCodeLADEN UtilizedTransportEquipmentShipperEmptyIndicatorCode = "LADEN"
)

// ActiveReeferSettings The specifications for a Reefer equipment.
//
// **Condition:** Only applicable when `isNonOperatingReefer` is set to `false`
type ActiveReeferSettings struct {
	// AirExchangeSetpoint Target value for the air exchange rate which is the rate at which outdoor air replaces indoor air within a Reefer container
	AirExchangeSetpoint *float32 `json:"airExchangeSetpoint,omitempty"`

	// AirExchangeUnit The unit for `airExchange` in metrics- or imperial- units per hour
	// - `MQH` (Cubic metre per hour)
	// - `FQH` (Cubic foot per hour)
	//
	// **Condition:** Mandatory if `airExchange` is provided. If `airExchange` is not provided, this field must be empty.
	AirExchangeUnit *ActiveReeferSettingsAirExchangeUnit `json:"airExchangeUnit,omitempty"`

	// Co2Setpoint The percentage of the controlled atmosphere CO<sub>2</sub> target value
	Co2Setpoint *float32 `json:"co2Setpoint,omitempty"`

	// HumiditySetpoint The percentage of the controlled atmosphere humidity target value
	HumiditySetpoint *float32 `json:"humiditySetpoint,omitempty"`

	// IsBulbMode Is special container setting for handling flower bulbs active
	IsBulbMode *bool `json:"isBulbMode,omitempty"`

	// IsColdTreatmentRequired Indicator whether cargo requires cold treatment prior to loading at origin or during transit, but prior arrival at POD
	IsColdTreatmentRequired *bool `json:"isColdTreatmentRequired,omitempty"`

	// IsControlledAtmosphereRequired Indicator of whether cargo requires Controlled Atmosphere.
	IsControlledAtmosphereRequired *bool `json:"isControlledAtmosphereRequired,omitempty"`

	// IsDrainholesOpen Is drain holes open on the container
	IsDrainholesOpen *bool `json:"isDrainholesOpen,omitempty"`

	// IsVentilationOpen If `true` the ventilation orifice is `Open` - if `false` the ventilation orifice is `closed`
	IsVentilationOpen *bool `json:"isVentilationOpen,omitempty"`

	// O2Setpoint The percentage of the controlled atmosphere O<sub>2</sub> target value
	O2Setpoint *float32 `json:"o2Setpoint,omitempty"`

	// TemperatureSetpoint Target value of the temperature for the Reefer based on the cargo requirement.
	TemperatureSetpoint *float32 `json:"temperatureSetpoint,omitempty"`

	// TemperatureUnit The unit for temperature in Celsius or Fahrenheit
	//
	// - `CEL` (Celsius)
	// - `FAH` (Fahrenheit)
	//
	// **Condition:** Mandatory if `temperatureSetpoint` is provided. If `temperatureSetpoint` is not provided, this field must be empty.
	TemperatureUnit *ActiveReeferSettingsTemperatureUnit `json:"temperatureUnit,omitempty"`
}

// ActiveReeferSettingsAirExchangeUnit The unit for `airExchange` in metrics- or imperial- units per hour
// - `MQH` (Cubic metre per hour)
// - `FQH` (Cubic foot per hour)
//
// **Condition:** Mandatory if `airExchange` is provided. If `airExchange` is not provided, this field must be empty.
type ActiveReeferSettingsAirExchangeUnit string

// ActiveReeferSettingsTemperatureUnit The unit for temperature in Celsius or Fahrenheit
//
// - `CEL` (Celsius)
// - `FAH` (Fahrenheit)
//
// **Condition:** Mandatory if `temperatureSetpoint` is provided. If `temperatureSetpoint` is not provided, this field must be empty.
type ActiveReeferSettingsTemperatureUnit string

// Address An object for storing address related information
type Address struct {
	// POBox A numbered box at a post office where a person or business can have mail or parcels delivered.
	POBox *string `json:"POBox,omitempty"`

	// City The name of the city.
	City string `json:"city"`

	// CountryCode The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	CountryCode string `json:"countryCode"`

	// Floor The floor of the street number.
	Floor *string `json:"floor,omitempty"`

	// PostCode The post code of the address.
	PostCode *string `json:"postCode,omitempty"`

	// StateRegion The name of the state/region.
	StateRegion *string `json:"stateRegion,omitempty"`

	// Street The name of the street.
	Street string `json:"street"`

	// StreetNumber The number of the street.
	StreetNumber *string `json:"streetNumber,omitempty"`
}

// AdvanceManifestFiling An Advance Manifest Filing defined by a Manifest type code in combination with a country code.
//
// A small list of **potential** examples:
//
// | manifestTypeCode | countryCode | Description |
// |-----------------------|:-------------:|-------------|
// |ACI|EG|Advance Cargo Information in Egypt|
// |ACE|US|Automated Commercial Environment in the United States|
// |AFR|JP|Cargo Summary Notification (CSN)|
// |ENS|NL|Entry Summary Declaration|
type AdvanceManifestFiling struct {
	// AdvanceManifestFilingsHouseBLPerformedBy Indicates whether the shipper (`SELF`) will perform the advance manifest filing(s) for the House BL directly or if the carrier (`CARRIER`) should file them on their behalf. Allowed values are:
	//
	// - `SELF` (filing done by the House filer)
	// - `CARRIER` (the carrier does the filing)
	//
	// In case of self-filing (`SELF`), the shipper can provide their `selfFilerCode` for each manifest.
	//
	// **Condition:** The `selfFilerCode` must be provided when `manifestTypeCode` is one of `ACE` (US) or `ACI` (CA) and the `advanceManifestFilingsHouseBLPerformedBy` is set to `SELF`.
	AdvanceManifestFilingsHouseBLPerformedBy AdvanceManifestFilingAdvanceManifestFilingsHouseBLPerformedBy `json:"advanceManifestFilingsHouseBLPerformedBy"`

	// CountryCode The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	CountryCode *string `json:"countryCode,omitempty"`

	// IdentificationNumber An identification number of the house filer responsible for submitting the `Advance Manifest Filing`.
	//
	// **Condition:** Mandatory if `manifestTypeCode` is `ENS` and `advanceManifestFilingsHouseBLPerformedBy` is `SELF`.
	IdentificationNumber *string `json:"identificationNumber,omitempty"`

	// ManifestTypeCode The Manifest type code as defined by the provider.
	ManifestTypeCode string `json:"manifestTypeCode"`

	// SelfFilerCode Code identifying the party who will submit the advance manifest filing(s) for the House BL.
	//
	// **Mandatory** if `manifestTypeCode` is one of `ACE` (US) or `ACI` (CA) and `advanceManifestFilingsHouseBLPerformedBy` is set to `SELF`.
	SelfFilerCode *string `json:"selfFilerCode,omitempty"`
}

// AdvanceManifestFilingAdvanceManifestFilingsHouseBLPerformedBy Indicates whether the shipper (`SELF`) will perform the advance manifest filing(s) for the House BL directly or if the carrier (`CARRIER`) should file them on their behalf. Allowed values are:
//
// - `SELF` (filing done by the House filer)
// - `CARRIER` (the carrier does the filing)
//
// In case of self-filing (`SELF`), the shipper can provide their `selfFilerCode` for each manifest.
//
// **Condition:** The `selfFilerCode` must be provided when `manifestTypeCode` is one of `ACE` (US) or `ACI` (CA) and the `advanceManifestFilingsHouseBLPerformedBy` is set to `SELF`.
type AdvanceManifestFilingAdvanceManifestFilingsHouseBLPerformedBy string

// ApproveTransportDocument defines model for ApproveTransportDocument.
type ApproveTransportDocument struct {
	// TransportDocumentStatus The status of the `Transport Document`. It can only be `APPROVED`
	TransportDocumentStatus string `json:"transportDocumentStatus"`
}

// Buyer The buyer is the last known entity to whom the goods are sold or agreed to be sold. If the goods are to be imported otherwise than in pursuance of a purchase, the details of the owner of the goods shall be provided.
//
// **Condition:** Buyer and Seller are mandatory if `isCargoDeliveredInICS2Zone=true` and `manifesttypecode='ENS'` and `advancedManifestFilingPerformedBy='CARRIER'` and `isHouseBillofLadingsIssued=false`.
type Buyer struct {
	// Address An object for storing address related information
	Address          *Address           `json:"address,omitempty"`
	IdentifyingCodes *[]IdentifyingCode `json:"identifyingCodes,omitempty"`

	// PartyContactDetails A list of contact details
	PartyContactDetails *[]PartyContactDetailWithPattern `json:"partyContactDetails,omitempty"`

	// PartyName Name of the party.
	PartyName string `json:"partyName"`

	// TaxLegalReferences A list of `Tax References` for a `Party`
	TaxLegalReferences *[]TaxLegalReference `json:"taxLegalReferences,omitempty"`

	// TypeOfPerson Can be one of the following values as per the Union Customs Code art. 5(4):
	// - `NATURAL_PERSON` (A person that is an individual living human being)
	// - `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)
	// - `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)
	TypeOfPerson string `json:"typeOfPerson"`
}

// BuyerHBL The buyer is the last known entity to whom the goods are sold or agreed to be sold. If the goods are to be imported otherwise than in pursuance of a purchase, the details of the owner of the goods shall be provided.
//
// **Condition:** Buyer and Seller are mandatory if `isCargoDeliveredInICS2Zone=true` (on House B/L level) and `manifesttypecode='ENS'` and `advancedManifestFilingPerformedBy='CARRIER'`.
type BuyerHBL struct {
	// Address An object for storing address related information
	Address          *Address           `json:"address,omitempty"`
	IdentifyingCodes *[]IdentifyingCode `json:"identifyingCodes,omitempty"`

	// PartyContactDetails A list of contact details
	PartyContactDetails *[]PartyContactDetailHBL `json:"partyContactDetails,omitempty"`

	// PartyName Name of the party.
	PartyName string `json:"partyName"`

	// TaxLegalReferences A list of `Tax References` for a `Party`
	TaxLegalReferences *[]TaxLegalReference `json:"taxLegalReferences,omitempty"`

	// TypeOfPerson Can be one of the following values as per the Union Customs Code art. 5(4):
	// - `NATURAL_PERSON` (A person that is an individual living human being)
	// - `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)
	// - `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)
	TypeOfPerson string `json:"typeOfPerson"`
}

// CancelShippingInstructionsUpdate defines model for CancelShippingInstructionsUpdate.
type CancelShippingInstructionsUpdate struct {
	// UpdatedShippingInstructionsStatus The status of the `Updated Shipping Instructions`. It can only be `UPDATE_CANCELLED`
	UpdatedShippingInstructionsStatus string `json:"updatedShippingInstructionsStatus"`
}

// CargoGrossVolume Calculated by multiplying the width, height, and length of the packed cargo.
type CargoGrossVolume struct {
	// Unit The unit of measure which can be expressed in imperial or metric terms:
	// - `FTQ` (Cubic foot)
	// - `MTQ` (Cubic meter)
	Unit CargoGrossVolumeUnit `json:"unit"`

	// Value Calculated by multiplying the width, height, and length of the packed cargo. A maximum of 4 decimals should be provided.
	Value float32 `json:"value"`
}

// CargoGrossVolumeUnit The unit of measure which can be expressed in imperial or metric terms:
// - `FTQ` (Cubic foot)
// - `MTQ` (Cubic meter)
type CargoGrossVolumeUnit string

// CargoGrossWeight The weight of the cargo item including packaging being carried in the container. Excludes the tare weight of the container.
type CargoGrossWeight struct {
	// Unit The unit of measure which can be expressed in imperial or metric terms:
	// - `KGM` (Kilograms)
	// - `LBR` (Pounds)
	Unit CargoGrossWeightUnit `json:"unit"`

	// Value The weight of the cargo item including packaging being carried in the container. Excludes the tare weight of the container. A maximum of 3 decimals should be provided.
	Value float32 `json:"value"`
}

// CargoGrossWeightUnit The unit of measure which can be expressed in imperial or metric terms:
// - `KGM` (Kilograms)
// - `LBR` (Pounds)
type CargoGrossWeightUnit string

// CargoItem A `cargoItem` is the smallest unit used by stuffing. A `cargoItem` cannot be split across containers.
type CargoItem struct {
	// CargoGrossVolume Calculated by multiplying the width, height, and length of the packed cargo.
	CargoGrossVolume *CargoGrossVolume `json:"cargoGrossVolume,omitempty"`

	// CargoGrossWeight The weight of the cargo item including packaging being carried in the container. Excludes the tare weight of the container.
	CargoGrossWeight CargoGrossWeight `json:"cargoGrossWeight"`

	// CargoNetVolume Calculated by multiplying the width, height, and length of the cargo, excluding packaging.
	CargoNetVolume *CargoNetVolume `json:"cargoNetVolume,omitempty"`

	// CargoNetWeight The weight of the cargo item excluding packaging being carried in the container. Excludes the tare weight of the container.
	CargoNetWeight *CargoNetWeight `json:"cargoNetWeight,omitempty"`

	// CustomsReferences A list of `Customs references`
	CustomsReferences *[]CustomsReference `json:"customsReferences,omitempty"`

	// EquipmentReference The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
	// According to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).
	//
	// If a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.
	EquipmentReference string `json:"equipmentReference"`

	// ExportLicense `Export License` requirements
	//
	// **Condition:** Included if the property is provided in the `Shipping Instructions.`
	ExportLicense *ExportLicense `json:"exportLicense,omitempty"`

	// ImportLicense `Import License` requirements
	//
	// **Condition:** Included if the property is provided in the `Shipping Instructions.`
	ImportLicense *ImportLicense `json:"importLicense,omitempty"`

	// NationalCommodityCodes A list of `National Commodity Codes` that apply to this `cargoItem`
	NationalCommodityCodes *[]NationalCommodityCode `json:"nationalCommodityCodes,omitempty"`

	// OuterPackaging Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport.
	OuterPackaging OuterPackaging `json:"outerPackaging"`
}

// CargoItemHBL A `cargoItem` is the smallest unit used by stuffing. A `cargoItem` cannot be split across containers.
type CargoItemHBL struct {
	// CargoGrossWeight The weight of the cargo item including packaging being carried in the container. Excludes the tare weight of the container.
	CargoGrossWeight CargoGrossWeight `json:"cargoGrossWeight"`

	// EquipmentReference The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
	// According to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).
	//
	// If a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.
	EquipmentReference string `json:"equipmentReference"`

	// OuterPackaging Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport.
	OuterPackaging OuterPackagingHBL `json:"outerPackaging"`
}

// CargoItemShipper A `cargoItem` is the smallest unit used by stuffing. A `cargoItem` cannot be split across containers.
type CargoItemShipper struct {
	// CargoGrossVolume Calculated by multiplying the width, height, and length of the packed cargo.
	CargoGrossVolume *CargoGrossVolume `json:"cargoGrossVolume,omitempty"`

	// CargoGrossWeight The weight of the cargo item including packaging being carried in the container. Excludes the tare weight of the container.
	CargoGrossWeight CargoGrossWeight `json:"cargoGrossWeight"`

	// CargoNetVolume Calculated by multiplying the width, height, and length of the cargo, excluding packaging.
	CargoNetVolume *CargoNetVolume `json:"cargoNetVolume,omitempty"`

	// CargoNetWeight The weight of the cargo item excluding packaging being carried in the container. Excludes the tare weight of the container.
	CargoNetWeight *CargoNetWeight `json:"cargoNetWeight,omitempty"`

	// CustomsReferences A list of `Customs references`
	CustomsReferences *[]CustomsReference `json:"customsReferences,omitempty"`

	// EquipmentReference The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
	// According to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).
	//
	// If a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.
	EquipmentReference string `json:"equipmentReference"`

	// ExportLicense `Export License` requirements
	//
	// **Condition:** Subject to local customs requirements and commodity.
	ExportLicense *ExportLicenseShipper `json:"exportLicense,omitempty"`

	// HouseBillOfLadingReference Link to the House Bill of Lading this cargoItem is connected to.
	HouseBillOfLadingReference *string `json:"houseBillOfLadingReference,omitempty"`

	// ImportLicense `Import License` requirements
	//
	// **Condition:** Subject to local customs requirements and commodity.
	ImportLicense *ImportLicenseShipper `json:"importLicense,omitempty"`

	// NationalCommodityCodes A list of `National Commodity Codes` that apply to this `cargoItem`
	NationalCommodityCodes *[]NationalCommodityCode `json:"nationalCommodityCodes,omitempty"`

	// OuterPackaging Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport.
	//
	// **Condition:** Mandatory for non-dangerous goods cargo.
	OuterPackaging *OuterPackagingShipper `json:"outerPackaging,omitempty"`
}

// CargoNetVolume Calculated by multiplying the width, height, and length of the cargo, excluding packaging.
type CargoNetVolume struct {
	// Unit The unit of measure which can be expressed in imperial or metric terms:
	// - `FTQ` (Cubic foot)
	// - `MTQ` (Cubic meter)
	Unit CargoNetVolumeUnit `json:"unit"`

	// Value Calculated by multiplying the width, height, and length of the cargo, excluding packaging.
	Value float32 `json:"value"`
}

// CargoNetVolumeUnit The unit of measure which can be expressed in imperial or metric terms:
// - `FTQ` (Cubic foot)
// - `MTQ` (Cubic meter)
type CargoNetVolumeUnit string

// CargoNetWeight The weight of the cargo item excluding packaging being carried in the container. Excludes the tare weight of the container.
type CargoNetWeight struct {
	// Unit The unit of measure which can be expressed in imperial or metric terms:
	// - `KGM` (Kilograms)
	// - `LBR` (Pounds)
	Unit CargoNetWeightUnit `json:"unit"`

	// Value The weight of the cargo item excluding packaging being carried in the container. Excludes the tare weight of the container. A maximum of 3 decimals should be provided.
	Value float32 `json:"value"`
}

// CargoNetWeightUnit The unit of measure which can be expressed in imperial or metric terms:
// - `KGM` (Kilograms)
// - `LBR` (Pounds)
type CargoNetWeightUnit string

// CarriersAgentAtDestination The party on the import side assigned by the carrier to whom the customer need to reach out to for cargo release.
type CarriersAgentAtDestination struct {
	// Address An object for storing address related information
	Address Address `json:"address"`

	// PartyContactDetails A list of contact details
	PartyContactDetails []PartyContactDetail `json:"partyContactDetails"`

	// PartyName Name of the party.
	PartyName string `json:"partyName"`
}

// Charge Addresses the monetary value of freight and other service charges for a `Booking`.
type Charge struct {
	// CalculationBasis The code specifying the measure unit used for the corresponding unit price for this cost, such as per day, per ton, per square metre.
	CalculationBasis string `json:"calculationBasis"`

	// ChargeName Free text field describing the charge to apply
	ChargeName string `json:"chargeName"`

	// CurrencyAmount The monetary value of all freight and other service charges for a transport document, with a maximum of 2-digit decimals.
	CurrencyAmount float32 `json:"currencyAmount"`

	// CurrencyCode The currency for the charge, using a 3-character code ([ISO 4217](https://www.iso.org/iso-4217-currency-codes.html)).
	CurrencyCode string `json:"currencyCode"`

	// PaymentTermCode An indicator of whether a charge is prepaid (PRE) or collect (COL). When prepaid, the charge is the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charge is the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
	//
	// - `PRE` (Prepaid)
	// - `COL` (Collect)
	PaymentTermCode ChargePaymentTermCode `json:"paymentTermCode"`

	// Quantity The amount of unit for this charge item.
	Quantity float32 `json:"quantity"`

	// UnitPrice The unit price of this charge item in the currency of the charge.
	UnitPrice float32 `json:"unitPrice"`
}

// ChargePaymentTermCode An indicator of whether a charge is prepaid (PRE) or collect (COL). When prepaid, the charge is the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charge is the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
//
// - `PRE` (Prepaid)
// - `COL` (Collect)
type ChargePaymentTermCode string

// City An object for storing city, state/region and country related information
type City struct {
	// City The name of the city.
	City string `json:"city"`

	// CountryCode The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	CountryCode string `json:"countryCode"`

	// StateRegion The name of the state/region.
	StateRegion *string `json:"stateRegion,omitempty"`
}

// Consignee The party to which goods are consigned in the `Master Bill of Lading`.
//
// **Condition:** Mandatory for non-negotiable BL (`isToOrder=false`)
//
// **Condition:** If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
type Consignee struct {
	// Address Address where the party is located. It is an object of the attributes below.
	Address *PartyAddress `json:"address,omitempty"`

	// DisplayedAddress The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.
	//
	// **Conditions:** If provided:
	//   - the displayed address must be included in the `Transport Document`.
	//   - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters
	//   - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters
	//   - the order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedAddress *[]string         `json:"displayedAddress,omitempty"`
	IdentifyingCodes []IdentifyingCode `json:"identifyingCodes"`

	// PartyContactDetails A list of contact details
	PartyContactDetails *[]PartyContactDetail `json:"partyContactDetails,omitempty"`

	// PartyName Name of the party.
	PartyName string `json:"partyName"`

	// PurchaseOrderReferences A list of `Purchase Order Reference`s linked to the `Consignee`.
	PurchaseOrderReferences *[]string `json:"purchaseOrderReferences,omitempty"`

	// Reference A reference linked to the `Consignee`.
	Reference *string `json:"reference,omitempty"`

	// TaxLegalReferences A list of `Tax References` for a `Party`
	TaxLegalReferences *[]TaxLegalReference `json:"taxLegalReferences,omitempty"`

	// TypeOfPerson Can be one of the following values as per the Union Customs Code art. 5(4):
	// - `NATURAL_PERSON` (A person that is an individual living human being)
	// - `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)
	// - `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)
	TypeOfPerson *string `json:"typeOfPerson,omitempty"`
}

// ConsigneeHBL The ultimate recipient of the cargo. It must be different from the freight forwarder, (de)consolidator, postal operator, or customs agent.
type ConsigneeHBL struct {
	// Address An object for storing address related information
	Address          *Address           `json:"address,omitempty"`
	IdentifyingCodes *[]IdentifyingCode `json:"identifyingCodes,omitempty"`

	// PartyContactDetails A list of contact details
	PartyContactDetails *[]PartyContactDetailHBL `json:"partyContactDetails,omitempty"`

	// PartyName Name of the party.
	PartyName string `json:"partyName"`

	// TaxLegalReferences A list of `Tax References` for a `Party`
	TaxLegalReferences *[]TaxLegalReference `json:"taxLegalReferences,omitempty"`

	// TypeOfPerson Can be one of the following values as per the Union Customs Code art. 5(4):
	// - `NATURAL_PERSON` (A person that is an individual living human being)
	// - `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)
	// - `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)
	TypeOfPerson string `json:"typeOfPerson"`
}

// ConsigneeShipper The party to which goods are consigned in the `Master Bill of Lading`.
//
// **Condition:** Mandatory for non-negotiable BL (`isToOrder=false`)
//
// **Condition:** Either the `address` or a party `identifyingCode` must be provided in the `Shipping Instructions`. If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
type ConsigneeShipper struct {
	// Address Address where the party is located. It is an object of the attributes below.
	Address *PartyAddress `json:"address,omitempty"`

	// DisplayedAddress The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.
	//
	// **Conditions:** If provided:
	//   - the displayed address must be included in the `Transport Document`.
	//   - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters
	//   - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters
	//   - the order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedAddress *[]string `json:"displayedAddress,omitempty"`

	// IdentifyingCodes **Condition:** Either the `address` or a party `identifyingCode` must be provided.
	IdentifyingCodes *[]IdentifyingCode `json:"identifyingCodes,omitempty"`

	// PartyContactDetails A list of contact details
	PartyContactDetails *[]PartyContactDetail `json:"partyContactDetails,omitempty"`

	// PartyName Name of the party.
	PartyName string `json:"partyName"`

	// PurchaseOrderReferences A list of `Purchase Order Reference`s linked to the `Consignee`.
	PurchaseOrderReferences *[]string `json:"purchaseOrderReferences,omitempty"`

	// Reference A reference linked to the `Consignee`.
	Reference *string `json:"reference,omitempty"`

	// TaxLegalReferences A list of `Tax References` for a `Party`
	TaxLegalReferences *[]TaxLegalReference `json:"taxLegalReferences,omitempty"`

	// TypeOfPerson Can be one of the following values as per the Union Customs Code art. 5(4):
	// - `NATURAL_PERSON` (A person that is an individual living human being)
	// - `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)
	// - `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)
	TypeOfPerson *string `json:"typeOfPerson,omitempty"`
}

// ConsignmentItem Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`
type ConsignmentItem struct {
	// HSCodes A list of `HS Codes` that apply to this `consignmentItem`
	HSCodes []string `json:"HSCodes"`

	// CargoItems A list of all `cargoItems`
	CargoItems []CargoItem `json:"cargoItems"`

	// CarrierBookingReference The associated booking number provided by the carrier for this `Consignment Item`.
	CarrierBookingReference string `json:"carrierBookingReference"`

	// CustomsReferences A list of `Customs references`
	CustomsReferences *[]CustomsReference `json:"customsReferences,omitempty"`

	// DescriptionOfGoods A plain language description that is precise enough for Customs services to be able to identify the goods. General terms (i.e. 'consolidated', 'general cargo' 'parts' or 'freight of all kinds') or not sufficiently precise description cannot be accepted.
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	DescriptionOfGoods []string `json:"descriptionOfGoods"`

	// ExportLicense `Export License` requirements
	//
	// **Condition:** Included if the property is provided in the `Shipping Instructions.`
	ExportLicense *ExportLicense `json:"exportLicense,omitempty"`

	// ImportLicense `Import License` requirements
	//
	// **Condition:** Included if the property is provided in the `Shipping Instructions.`
	ImportLicense *ImportLicense `json:"importLicense,omitempty"`

	// NationalCommodityCodes A list of `National Commodity Codes` that apply to this `commodity`
	NationalCommodityCodes *[]NationalCommodityCode `json:"nationalCommodityCodes,omitempty"`

	// References A list of `References`
	References *[]ReferenceConsignmentItem `json:"references,omitempty"`

	// ShippingMarks A list of the `ShippingMarks` applicable to this `consignmentItem`
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	ShippingMarks *[]string `json:"shippingMarks,omitempty"`
}

// ConsignmentItemHBL Defines a list of `CargoItems` belonging together in the same consignment. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`
type ConsignmentItemHBL struct {
	// CargoItems A list of all `cargoItems`
	CargoItems []CargoItemHBL `json:"cargoItems"`

	// CustomsReferences A list of `Customs references`
	CustomsReferences *[]CustomsReference `json:"customsReferences,omitempty"`

	// DescriptionOfGoods A plain language description that is precise enough for Customs services to be able to identify the goods. General terms (i.e. 'consolidated', 'general cargo' 'parts' or 'freight of all kinds') or not sufficiently precise description cannot be accepted. Where the declarant provides the CUS code for chemical substances and preparations, Member States may waive the requirement of providing a precise description of the goods.
	DescriptionOfGoods string `json:"descriptionOfGoods"`

	// NationalCommodityCode The national commodity classification code linked to a country with a value.
	//
	// An example could look like this:
	//
	// | Type  | Country | Value |
	// |-------|:-------:|-------------|
	// |NCM|BR|['1515', '2106', '2507', '2512']|
	NationalCommodityCode NationalCommodityCode `json:"nationalCommodityCode"`
}

// ConsignmentItemShipper Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`
type ConsignmentItemShipper struct {
	// HSCodes A list of `HS Codes` that apply to this `consignmentItem`
	HSCodes []string `json:"HSCodes"`

	// CargoItems A list of all `cargoItems`
	CargoItems []CargoItemShipper `json:"cargoItems"`

	// CarrierBookingReference The associated booking number provided by the carrier for this `Consignment Item`.
	CarrierBookingReference string `json:"carrierBookingReference"`

	// CommoditySubReference A unique reference to the commodity object assigned by the carrier in the booking confirmation. The reference must be provided by the shipper as part of the `Shipping Instructions` for the carrier to link this consignment item to the commodity. A commodity reference is only unique in the context of a booking.
	CommoditySubReference *string `json:"commoditySubReference,omitempty"`

	// CustomsReferences A list of `Customs references`
	CustomsReferences *[]CustomsReference `json:"customsReferences,omitempty"`

	// DescriptionOfGoods A plain language description that is precise enough for Customs services to be able to identify the goods. General terms (i.e. 'consolidated', 'general cargo' 'parts' or 'freight of all kinds') or not sufficiently precise description cannot be accepted.
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	DescriptionOfGoods []string `json:"descriptionOfGoods"`

	// ExportLicense `Export License` requirements
	//
	// **Condition:** Subject to local customs requirements and commodity.
	ExportLicense *ExportLicenseShipper `json:"exportLicense,omitempty"`

	// ImportLicense `Import License` requirements
	//
	// **Condition:** Subject to local customs requirements and commodity.
	ImportLicense *ImportLicenseShipper `json:"importLicense,omitempty"`

	// NationalCommodityCodes A list of `National Commodity Codes` that apply to this `commodity`
	NationalCommodityCodes *[]NationalCommodityCode `json:"nationalCommodityCodes,omitempty"`

	// References A list of `References`
	References *[]ReferenceConsignmentItem `json:"references,omitempty"`

	// ShippingMarks A list of the `ShippingMarks` applicable to this `consignmentItem`
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	ShippingMarks *[]string `json:"shippingMarks,omitempty"`
}

// CreateShippingInstructions The `Shipping Instructions` is an enrichment to the original booking shared by the Shipper to the Carrier. The information given by the Shipper through the `Shipping Instructions` is the information required to create a `Draft Transport Document`.
type CreateShippingInstructions struct {
	// AdvanceManifestFilings A list of `Advance Manifest Filings` specified by the Shipper to indicate whom is to do the Filing
	AdvanceManifestFilings *[]AdvanceManifestFiling `json:"advanceManifestFilings,omitempty"`

	// ConsignmentItems A list of `ConsignmentItems`
	ConsignmentItems []ConsignmentItemShipper `json:"consignmentItems"`

	// CustomsReferences A list of `Customs references`
	CustomsReferences *[]CustomsReference `json:"customsReferences,omitempty"`

	// DestinationChargesPaymentTerm An indicator of whether destination charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
	DestinationChargesPaymentTerm *DestinationChargesPaymentTerm `json:"destinationChargesPaymentTerm,omitempty"`

	// DisplayedNameForPlaceOfDelivery The name to be used in order to specify how the `Place of Delivery` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedNameForPlaceOfDelivery *[]string `json:"displayedNameForPlaceOfDelivery,omitempty"`

	// DisplayedNameForPlaceOfReceipt The name to be used in order to specify how the `Place of Receipt` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedNameForPlaceOfReceipt *[]string `json:"displayedNameForPlaceOfReceipt,omitempty"`

	// DisplayedNameForPortOfDischarge The name to be used in order to specify how the `Port of Discharge` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedNameForPortOfDischarge *[]string `json:"displayedNameForPortOfDischarge,omitempty"`

	// DisplayedNameForPortOfLoad The name to be used in order to specify how the `Port of Load` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedNameForPortOfLoad *[]string `json:"displayedNameForPortOfLoad,omitempty"`

	// DocumentParties All `Parties` with associated roles.
	//
	// **Condition:** `Buyer` and `Seller` are mandatory if `isCargoDeliveredInICS2Zone=true` **and** `advancedManifestFilingPerformedBy=CARRIER` and `isHouseBillOfLadingsIssued=false`
	DocumentParties DocumentPartiesShippingInstructions `json:"documentParties"`

	// ExportLicense `Export License` requirements
	//
	// **Condition:** Subject to local customs requirements and commodity.
	ExportLicense *ExportLicenseShipper `json:"exportLicense,omitempty"`

	// FreightPaymentTermCode An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
	//
	// - `PRE` (Prepaid)
	// - `COL` (Collect)
	FreightPaymentTermCode CreateShippingInstructionsFreightPaymentTermCode `json:"freightPaymentTermCode"`

	// HouseBillOfLadings A list of `House Bill of Ladings` specified by the Shipper.
	HouseBillOfLadings *[]HouseBillOfLading `json:"houseBillOfLadings,omitempty"`

	// ImportLicense `Import License` requirements
	//
	// **Condition:** Subject to local customs requirements and commodity.
	ImportLicense *ImportLicenseShipper `json:"importLicense,omitempty"`

	// InvoicePayableAt Location where payment of ocean freight and charges for the main transport will take place by the customer.
	//
	// The location must be provided as a `UN Location Code`
	InvoicePayableAt *InvoicePayableAtShippingInstructions `json:"invoicePayableAt,omitempty"`

	// IsCargoDeliveredInICS2Zone Indicates whether cargo is delivered to EU, Norway, Switzerland or Northern Ireland.
	IsCargoDeliveredInICS2Zone bool `json:"isCargoDeliveredInICS2Zone"`

	// IsCarriersAgentAtDestinationRequired Indicates whether the Carrier's agent at destination name, address and contact details should be included in the `Transport Document`.
	IsCarriersAgentAtDestinationRequired *bool `json:"isCarriersAgentAtDestinationRequired,omitempty"`

	// IsElectronic An indicator whether the transport document is electronically transferred.
	IsElectronic bool `json:"isElectronic"`

	// IsHouseBillOfLadingsIssued Indicates whether one or more `House Bill of Lading(s)` have been issued.
	//
	// **Condition:** Mandatory if `manifestTypeCode` is `ENS`
	IsHouseBillOfLadingsIssued *bool `json:"isHouseBillOfLadingsIssued,omitempty"`

	// IsShippedOnBoardType Specifies whether the Transport Document is a received for shipment, or shipped on board.
	IsShippedOnBoardType bool `json:"isShippedOnBoardType"`

	// IsToOrder Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).
	//
	// `isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).
	IsToOrder bool `json:"isToOrder"`

	// NumberOfCopiesWithCharges The requested number of copies of the `Transport Document` to be issued by the carrier including charges.
	//
	// **Conditions:** The following table defines the conditions for the `numberOfCopiesWithCharges` property:
	// | Transport Document Type Code | Is Electronic | Meaning |
	// |-------|:-------:|-------|
	// |`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier with charges|
	// |`BOL`|`true`|Not applicable, there are no copies|
	// |`SWB`|`false`|Indicates that charges should be included in the `SWB` (pdf or other formats)|
	// |`SWB`|`true`|Indicates that charges should be included in the electronic `SWB`|
	NumberOfCopiesWithCharges *int32 `json:"numberOfCopiesWithCharges,omitempty"`

	// NumberOfCopiesWithoutCharges The requested number of copies of the `Transport Document` to be issued by the carrier **NOT** including charges.
	//
	// **Conditions:** The following table defines the conditions for the `numberOfCopiesWithoutCharges` property:
	// | Transport Document Type Code | Is Electronic | Meaning |
	// |-------|:-------:|-------|
	// |`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier without charges|
	// |`BOL`|`true`|Not applicable, there are no copies|
	// |`SWB`|`false`|Indicates that charges should NOT be included in the `SWB` (pdf or other formats)|
	// |`SWB`|`true`|Indicates that charges NOT should be included in the electronic `SWB`|
	NumberOfCopiesWithoutCharges *int32 `json:"numberOfCopiesWithoutCharges,omitempty"`

	// NumberOfOriginalsWithCharges Number of originals of the Bill of Lading that has been requested by the customer with charges.
	//
	// **Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)
	NumberOfOriginalsWithCharges *int32 `json:"numberOfOriginalsWithCharges,omitempty"`

	// NumberOfOriginalsWithoutCharges Number of originals of the Bill of Lading that has been requested by the customer without charges.
	//
	// **Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)
	NumberOfOriginalsWithoutCharges *int32 `json:"numberOfOriginalsWithoutCharges,omitempty"`

	// OriginChargesPaymentTerm An indicator of whether origin charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
	OriginChargesPaymentTerm *OriginChargesPaymentTerm `json:"originChargesPaymentTerm,omitempty"`

	// PartyContactDetails The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.)
	PartyContactDetails []PartyContactDetail `json:"partyContactDetails"`

	// PlaceOfIssue An object to capture where the original Transport Document (`Bill of Lading`) will be issued.
	//
	// **Condition:** The location can be specified as one of `UN Location Code` or `CountryCode`, but not both.
	PlaceOfIssue *PlaceOfIssue `json:"placeOfIssue,omitempty"`

	// References A list of `References`
	References *[]Reference `json:"references,omitempty"`

	// RequestedCarrierCertificates Certificate(s) requested by the Shipper for the Carrier to include as part of the shipment documentation pack
	RequestedCarrierCertificates *[]string `json:"requestedCarrierCertificates,omitempty"`

	// RequestedCarrierClauses Clauses requested by the Shipper for the Carrier to include in the `Transport Document` `Carrier clauses`
	RequestedCarrierClauses *[]string `json:"requestedCarrierClauses,omitempty"`

	// TransportDocumentTypeCode Specifies the type of the transport document
	// - `BOL` (Bill of Lading)
	// - `SWB` (Sea Waybill)
	TransportDocumentTypeCode CreateShippingInstructionsTransportDocumentTypeCode `json:"transportDocumentTypeCode"`

	// UtilizedTransportEquipments A list of `Utilized Transport Equipments` describing the equipment being used.
	UtilizedTransportEquipments []UtilizedTransportEquipmentShipper `json:"utilizedTransportEquipments"`
}

// CreateShippingInstructionsFreightPaymentTermCode An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
//
// - `PRE` (Prepaid)
// - `COL` (Collect)
type CreateShippingInstructionsFreightPaymentTermCode string

// CreateShippingInstructionsTransportDocumentTypeCode Specifies the type of the transport document
// - `BOL` (Bill of Lading)
// - `SWB` (Sea Waybill)
type CreateShippingInstructionsTransportDocumentTypeCode string

// CreateShippingInstructionsResponse **Only** the `shippingInstructionsReference` is returned.
type CreateShippingInstructionsResponse struct {
	// ShippingInstructionsReference The identifier for a `Shipping Instructions` provided by the carrier for system purposes.
	ShippingInstructionsReference string `json:"shippingInstructionsReference"`
}

// CustomsReference Reference associated with customs and/or excise purposes required by the relevant authorities for the import, export, or transit of the goods.
//
// A small list of **potential** examples:
//
// | Type  | Country | Description |
// |-------|:-------:|-------------|
// |UCR|NL|Unique Consignment Reference|
// |CUS|NL|Customs Union and Statistics|
// |ACID|EG|Advance Cargo Information Declaration in Egypt|
// |CERS|CA|Canadian Export Reporting System|
// |ITN|US|Internal Transaction Number in US|
// |PEB|ID|PEB reference number|
// |CSN|IN|Cargo Summary Notification (CSN)|
type CustomsReference struct {
	// CountryCode The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	CountryCode string `json:"countryCode"`

	// Type The reference type code as defined in the relevant customs jurisdiction.
	Type   string   `json:"type"`
	Values []string `json:"values"`
}

// DangerousGoods Specification for `Dangerous Goods`. It is mandatory to provide one of `UNNumber` or `NANumber`. Dangerous Goods is based on **IMDG Amendment Version 41-22**.
type DangerousGoods struct {
	// EMSNumber The emergency schedule identified in the IMO EmS Guide – Emergency Response Procedures for Ships Carrying Dangerous Goods. Comprises 2 values; 1 for spillage and 1 for fire. Possible values spillage: S-A to S-Z. Possible values fire: F-A to F-Z.
	EMSNumber *string `json:"EMSNumber,omitempty"`

	// CodedVariantList Four-character code supplied by Exis Technologies that assists to remove ambiguities when identifying a variant within a single UN number or NA number that may occur when two companies exchange DG information.
	//
	// Character | Valid Characters | Description
	// :--------:|------------------|------------
	// 1| 0, 1, 2, 3|The packing group. Code 0 indicates there is no packing group
	// 2|0 to 9 and A to Z|A sequence letter for the PSN, or 0 if there were no alternative PSNs
	// 3 and 4|0 to 9 and A to Z|Two sequence letters for other information, for the cases where the variant is required because of different in subrisks, packing instruction etc.
	CodedVariantList *string `json:"codedVariantList,omitempty"`

	// CompetentAuthorityApproval Name and reference number of the competent authority providing the approval.
	CompetentAuthorityApproval *string `json:"competentAuthorityApproval,omitempty"`

	// EmergencyContactDetails 24 hr emergency contact details
	EmergencyContactDetails *EmergencyContactDetails `json:"emergencyContactDetails,omitempty"`

	// EndOfHoldingTime Date by when the refrigerated liquid needs to be delivered.
	EndOfHoldingTime *openapi_types.Date `json:"endOfHoldingTime,omitempty"`

	// FumigationDateTime Date & time when the container was fumigated
	FumigationDateTime *time.Time `json:"fumigationDateTime,omitempty"`

	// GrossWeight Total weight of the goods carried, including packaging.
	GrossWeight *GrossWeight `json:"grossWeight,omitempty"`

	// ImoClass The hazard class code of the referenced dangerous goods according to the specified regulation. Examples of possible values are:
	//
	// - `1.1A` (Substances and articles which have a mass explosion hazard)
	// - `1.6N` (Extremely insensitive articles which do not have a mass explosion hazard)
	// - `2.1` (Flammable gases)
	// - `8` (Corrosive substances)
	ImoClass string `json:"imoClass"`

	// InhalationZone The zone classification of the toxicity of the inhalant. Possible values are:
	//
	// - `A` (Hazard Zone A) can be assigned to specific gases and liquids
	// - `B` (Hazard Zone B) can be assigned to specific gases and liquids
	// - `C` (Hazard Zone C) can **only** be assigned to specific gases
	// - `D` (Hazard Zone D) can **only** be assigned to specific gases
	InhalationZone *string `json:"inhalationZone,omitempty"`

	// InnerPackagings A list of `Inner Packings` contained inside this `outer packaging/overpack`.
	InnerPackagings *[]InnerPackaging `json:"innerPackagings,omitempty"`

	// IsCompetentAuthorityApprovalRequired Indicates if the cargo require approval from authorities
	IsCompetentAuthorityApprovalRequired *bool `json:"isCompetentAuthorityApprovalRequired,omitempty"`

	// IsEmptyUncleanedResidue Indicates if the cargo is residue.
	IsEmptyUncleanedResidue *bool `json:"isEmptyUncleanedResidue,omitempty"`

	// IsExceptedQuantity Indicates if the dangerous goods can be transported as excepted quantity in accordance with Chapter 3.5 of the IMO IMDG Code.
	IsExceptedQuantity *bool `json:"isExceptedQuantity,omitempty"`

	// IsHot Indicates if high temperature cargo is shipped.
	IsHot *bool `json:"isHot,omitempty"`

	// IsLimitedQuantity Indicates if the dangerous goods can be transported as limited quantity in accordance with Chapter 3.4 of the IMO IMDG Code.
	IsLimitedQuantity *bool `json:"isLimitedQuantity,omitempty"`

	// IsMarinePollutant Indicates if the goods belong to the classification of Marine Pollutant.
	IsMarinePollutant *bool `json:"isMarinePollutant,omitempty"`

	// IsReportableQuantity Indicates if a container of hazardous material is at the reportable quantity level. If `true`, a report to the relevant authority must be made in case of spill.
	IsReportableQuantity *bool `json:"isReportableQuantity,omitempty"`

	// IsSalvagePackings Indicates if the cargo has special packaging for the transport, recovery or disposal of damaged, defective, leaking or nonconforming hazardous materials packages, or hazardous materials that have spilled or leaked.
	IsSalvagePackings *bool `json:"isSalvagePackings,omitempty"`

	// IsWaste Indicates if waste is being shipped
	IsWaste *bool `json:"isWaste,omitempty"`

	// Limits Limits for the `Dangerous Goods`. The same `Temperature Unit` needs to apply to all attributes in this structure.
	Limits *Limits `json:"limits,omitempty"`

	// NetExplosiveContent The total weight of the explosive substances, without the packaging’s, casings, etc.
	NetExplosiveContent *NetExplosiveContent `json:"netExplosiveContent,omitempty"`

	// NetVolume The volume of the referenced dangerous goods.
	//
	// **Condition:** only applicable to liquids and gas.
	NetVolume *NetVolume `json:"netVolume,omitempty"`

	// NetWeight Total weight of the goods carried, excluding packaging.
	NetWeight *NetWeight `json:"netWeight,omitempty"`

	// PackingGroup The packing group according to the UN Recommendations on the Transport of Dangerous Goods and IMO IMDG Code.
	PackingGroup *int32 `json:"packingGroup,omitempty"`

	// ProperShippingName The proper shipping name for goods under IMDG Code, or the product name for goods under IBC Code and IGC Code, or the bulk cargo shipping name for goods under IMSBC Code, or the name of oil for goods under Annex I to the MARPOL Convention.
	ProperShippingName string `json:"properShippingName"`

	// SegregationGroups List of the segregation groups applicable to specific hazardous goods according to the IMO IMDG Code.
	//
	// **Condition:** only applicable to specific hazardous goods.
	SegregationGroups *[]string `json:"segregationGroups,omitempty"`

	// SubsidiaryRisk1 Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.
	SubsidiaryRisk1 *string `json:"subsidiaryRisk1,omitempty"`

	// SubsidiaryRisk2 Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.
	SubsidiaryRisk2 *string `json:"subsidiaryRisk2,omitempty"`

	// TechnicalName The recognized chemical or biological name or other name currently used for the referenced dangerous goods as described in chapter 3.1.2.8 of the IMDG Code.
	TechnicalName *string `json:"technicalName,omitempty"`
	union         json.RawMessage
}

// DangerousGoods0 defines model for .
type DangerousGoods0 struct {
	// UNNumber United Nations Dangerous Goods Identifier (UNDG) assigned by the UN Sub-Committee of Experts on the Transport of Dangerous Goods and shown in the IMO IMDG.
	UNNumber string `json:"UNNumber"`
}

// DangerousGoods1 defines model for .
type DangerousGoods1 struct {
	// NANumber Four-digit number that is assigned to dangerous, hazardous, and harmful substances by the United States Department of Transportation.
	NANumber string `json:"NANumber"`
}

// DestinationChargesPaymentTerm An indicator of whether destination charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
type DestinationChargesPaymentTerm struct {
	// HaulageChargesPaymentTermCode An indicator of whether the costs for inland transportation to the port, when applicable, are prepaid (`PRE`) or collect (`COL`).
	//
	// - `PRE` (Prepaid)
	// - `COL` (Collect)
	HaulageChargesPaymentTermCode *DestinationChargesPaymentTermHaulageChargesPaymentTermCode `json:"haulageChargesPaymentTermCode,omitempty"`

	// OtherChargesPaymentTermCode An indicator of whether destination charges (excluding port and haulage) are prepaid (`PRE`) or collect (`COL`).
	//
	// - `PRE` (Prepaid)
	// - `COL` (Collect)
	OtherChargesPaymentTermCode *DestinationChargesPaymentTermOtherChargesPaymentTermCode `json:"otherChargesPaymentTermCode,omitempty"`

	// PortChargesPaymentTermCode An indicator of whether the destination port charges are prepaid (`PRE`) or collect (`COL`).
	//
	// - `PRE` (Prepaid)
	// - `COL` (Collect)
	PortChargesPaymentTermCode *DestinationChargesPaymentTermPortChargesPaymentTermCode `json:"portChargesPaymentTermCode,omitempty"`
}

// DestinationChargesPaymentTermHaulageChargesPaymentTermCode An indicator of whether the costs for inland transportation to the port, when applicable, are prepaid (`PRE`) or collect (`COL`).
//
// - `PRE` (Prepaid)
// - `COL` (Collect)
type DestinationChargesPaymentTermHaulageChargesPaymentTermCode string

// DestinationChargesPaymentTermOtherChargesPaymentTermCode An indicator of whether destination charges (excluding port and haulage) are prepaid (`PRE`) or collect (`COL`).
//
// - `PRE` (Prepaid)
// - `COL` (Collect)
type DestinationChargesPaymentTermOtherChargesPaymentTermCode string

// DestinationChargesPaymentTermPortChargesPaymentTermCode An indicator of whether the destination port charges are prepaid (`PRE`) or collect (`COL`).
//
// - `PRE` (Prepaid)
// - `COL` (Collect)
type DestinationChargesPaymentTermPortChargesPaymentTermCode string

// DetailedError A detailed description of what has caused the error.
type DetailedError struct {
	// ErrorCode The detailed error code returned.
	//
	//   - `7000-7999` Technical error codes
	//   - `8000-8999` Functional error codes
	//   - `9000-9999` API provider-specific error codes
	//
	// [Error codes as specified by DCSA](https://developer.dcsa.org/standard-error-codes).
	ErrorCode *int32 `json:"errorCode,omitempty"`

	// ErrorCodeMessage A long description corresponding to the `errorCode` with additional information.
	ErrorCodeMessage string `json:"errorCodeMessage"`

	// ErrorCodeText A standard short description corresponding to the `errorCode`.
	ErrorCodeText string `json:"errorCodeText"`

	// JsonPath A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).
	JsonPath *string `json:"jsonPath,omitempty"`

	// Property The name of the property causing the error.
	Property *string `json:"property,omitempty"`

	// Value The value of the property causing the error serialised as a string exactly as in the original request.
	Value *string `json:"value,omitempty"`
}

// DocumentParties All `Parties` with associated roles.
type DocumentParties struct {
	// CarriersAgentAtDestination The party on the import side assigned by the carrier to whom the customer need to reach out to for cargo release.
	CarriersAgentAtDestination *CarriersAgentAtDestination `json:"carriersAgentAtDestination,omitempty"`

	// Consignee The party to which goods are consigned in the `Master Bill of Lading`.
	//
	// **Condition:** Mandatory for non-negotiable BL (`isToOrder=false`)
	//
	// **Condition:** If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
	Consignee *Consignee `json:"consignee,omitempty"`

	// Endorsee The party to whom the title to the goods is transferred by means of endorsement.
	//
	// **Condition:** Can only be provided for negotiable BLs (`isToOrder=true`). If a negotiable BL does not have an `Endorsee`, the BL is said to be "blank endorsed". Note `Consignee` and `Endorsee` are mutually exclusive.
	//
	// **Condition:** If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
	Endorsee *Endorsee `json:"endorsee,omitempty"`

	// IssuingParty The company or a legal entity issuing the `Transport Document`.
	IssuingParty IssuingParty `json:"issuingParty"`

	// NotifyParties List of up to 3 `Notify Parties`. The first item in the list is the **First Notify Party** (`N1`), the second item is the **Second Notify Party** (`N2`) and the last item is the **Other Notify Party** (`NI`).
	//
	// **Condition:** If provided:
	//   - Mandatory for To Order BLs, `isToOrder=true`
	//   - The order of the items in this array **MUST** be preserved as by the provider of the API.
	NotifyParties *[]NotifyParty `json:"notifyParties,omitempty"`

	// Other A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.
	Other *[]OtherDocumentParty `json:"other,omitempty"`

	// Shipper The party by whom or in whose name or on whose behalf a contract of carriage of goods by sea has been concluded with a carrier, or the party by whom or in whose name, or on whose behalf, the goods are actually delivered to the carrier in relation to the contract of carriage by sea.
	//
	// **Condition:** Either the `address` or a party `identifyingCode` must be provided in the `Shipping Instructions`. If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
	Shipper Shipper `json:"shipper"`
}

// DocumentPartiesHouseBL All `Parties` with associated roles for this `House Bill of Lading`.
//
// **Condition:** `Buyer` and `Seller` are mandatory if `isCargoDeliveredInICS2Zone=true` (on House B/L level) **and** `advancedManifestFilingPerformedBy=CARRIER`
type DocumentPartiesHouseBL struct {
	// Buyer The buyer is the last known entity to whom the goods are sold or agreed to be sold. If the goods are to be imported otherwise than in pursuance of a purchase, the details of the owner of the goods shall be provided.
	//
	// **Condition:** Buyer and Seller are mandatory if `isCargoDeliveredInICS2Zone=true` (on House B/L level) and `manifesttypecode='ENS'` and `advancedManifestFilingPerformedBy='CARRIER'`.
	Buyer *BuyerHBL `json:"buyer,omitempty"`

	// Consignee The ultimate recipient of the cargo. It must be different from the freight forwarder, (de)consolidator, postal operator, or customs agent.
	Consignee *ConsigneeHBL `json:"consignee,omitempty"`

	// NotifyParty The person to be notified when a shipment arrives at its destination.
	//
	// **Condition:** Mandatory for To Order HBLs (HouseBL `isToOrder=true`)
	NotifyParty *NotifyPartyHBL `json:"notifyParty,omitempty"`

	// Other A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.
	Other *[]OtherDocumentPartyHBL `json:"other,omitempty"`

	// Seller The seller is the last known entity by whom the goods are sold or agreed to be sold to the buyer. If the goods are to be imported otherwise than in pursuance of a purchase, the details of the owner of the goods shall be provided.
	//
	// **Condition:** Buyer and Seller are mandatory if `isCargoDeliveredInICS2Zone=true` (on House B/L level) and `manifesttypecode='ENS'` and `advancedManifestFilingPerformedBy='CARRIER'`.
	Seller *SellerHBL `json:"seller,omitempty"`

	// Shipper The `Shipper` on the `House Bill of Lading`.
	Shipper ShipperHBL `json:"shipper"`
}

// DocumentPartiesShippingInstructions All `Parties` with associated roles.
//
// **Condition:** `Buyer` and `Seller` are mandatory if `isCargoDeliveredInICS2Zone=true` **and** `advancedManifestFilingPerformedBy=CARRIER` and `isHouseBillOfLadingsIssued=false`
type DocumentPartiesShippingInstructions struct {
	// Buyer The buyer is the last known entity to whom the goods are sold or agreed to be sold. If the goods are to be imported otherwise than in pursuance of a purchase, the details of the owner of the goods shall be provided.
	//
	// **Condition:** Buyer and Seller are mandatory if `isCargoDeliveredInICS2Zone=true` and `manifesttypecode='ENS'` and `advancedManifestFilingPerformedBy='CARRIER'` and `isHouseBillofLadingsIssued=false`.
	Buyer *Buyer `json:"buyer,omitempty"`

	// Consignee The party to which goods are consigned in the `Master Bill of Lading`.
	//
	// **Condition:** Mandatory for non-negotiable BL (`isToOrder=false`)
	//
	// **Condition:** Either the `address` or a party `identifyingCode` must be provided in the `Shipping Instructions`. If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
	Consignee *ConsigneeShipper `json:"consignee,omitempty"`

	// Endorsee The party to whom the title to the goods is transferred by means of endorsement.
	//
	// **Condition:** Can only be provided for negotiable BLs (`isToOrder=true`). If a negotiable BL does not have an `Endorsee`, the BL is said to be "blank endorsed". Note `Consignee` and `Endorsee` are mutually exclusive.
	//
	// **Condition:** Either the `address` or a party `identifyingCode` must be provided in the `Shipping Instructions`. If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
	Endorsee *EndorseeShipper `json:"endorsee,omitempty"`

	// IssueTo The party to whom the `Bill of Lading` must be issued.
	IssueTo *IssueToParty `json:"issueTo,omitempty"`

	// NotifyParties List of up to 3 `Notify Parties`. The first item in the list is the **First Notify Party** (`N1`), the second item is the **Second Notify Party** (`N2`) and the last item is the **Other Notify Party** (`NI`).
	//
	// **Condition:** If provided:
	//   - Mandatory for To Order BLs, `isToOrder=true`
	//   - The order of the items in this array **MUST** be preserved as by the provider of the API.
	NotifyParties *[]NotifyParty `json:"notifyParties,omitempty"`

	// Other A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.
	Other *[]OtherDocumentParty `json:"other,omitempty"`

	// Seller The seller is the last known entity by whom the goods are sold or agreed to be sold to the buyer. If the goods are to be imported otherwise than in pursuance of a purchase, the details of the owner of the goods shall be provided.
	//
	// **Condition:** Buyer and Seller are mandatory if `isCargoDeliveredInICS2Zone=true` and `manifesttypecode='ENS'` and `advancedManifestFilingPerformedBy='CARRIER'` and `isHouseBillofLadingsIssued=false`.
	Seller *Seller `json:"seller,omitempty"`

	// Shipper The party by whom or in whose name or on whose behalf a contract of carriage of goods by sea has been concluded with a carrier, or the party by whom or in whose name, or on whose behalf, the goods are actually delivered to the carrier in relation to the contract of carriage by sea.
	//
	// **Condition:** Either the `address` or a party `identifyingCode` must be provided in the `Shipping Instructions`. If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
	Shipper Shipper `json:"shipper"`
}

// EmergencyContactDetails 24 hr emergency contact details
type EmergencyContactDetails struct {
	// Contact Name of the Contact person during an emergency.
	Contact string `json:"contact"`

	// Phone Phone number for the contact. Phone **MUST** include an international phone number format as defined in the [ITU-T recommendation E.123](https://www.itu.int/rec/T-REC-E.123/en).
	Phone string `json:"phone"`

	// Provider Name of the third party vendor providing emergency support
	Provider *string `json:"provider,omitempty"`

	// ReferenceNumber Contract reference for the emergency support provided by an external third party vendor.
	ReferenceNumber *string `json:"referenceNumber,omitempty"`
}

// Endorsee The party to whom the title to the goods is transferred by means of endorsement.
//
// **Condition:** Can only be provided for negotiable BLs (`isToOrder=true`). If a negotiable BL does not have an `Endorsee`, the BL is said to be "blank endorsed". Note `Consignee` and `Endorsee` are mutually exclusive.
//
// **Condition:** If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
type Endorsee struct {
	// Address Address where the party is located. It is an object of the attributes below.
	Address *PartyAddress `json:"address,omitempty"`

	// DisplayedAddress The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.
	//
	// **Conditions:** If provided:
	//   - the displayed address must be included in the `Transport Document`.
	//   - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters
	//   - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters
	//   - the order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedAddress *[]string         `json:"displayedAddress,omitempty"`
	IdentifyingCodes []IdentifyingCode `json:"identifyingCodes"`

	// PartyContactDetails A list of contact details
	PartyContactDetails *[]PartyContactDetail `json:"partyContactDetails,omitempty"`

	// PartyName Name of the party.
	PartyName string `json:"partyName"`

	// TaxLegalReferences A list of `Tax References` for a `Party`
	TaxLegalReferences *[]TaxLegalReference `json:"taxLegalReferences,omitempty"`
}

// EndorseeShipper The party to whom the title to the goods is transferred by means of endorsement.
//
// **Condition:** Can only be provided for negotiable BLs (`isToOrder=true`). If a negotiable BL does not have an `Endorsee`, the BL is said to be "blank endorsed". Note `Consignee` and `Endorsee` are mutually exclusive.
//
// **Condition:** Either the `address` or a party `identifyingCode` must be provided in the `Shipping Instructions`. If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
type EndorseeShipper struct {
	// Address Address where the party is located. It is an object of the attributes below.
	Address *PartyAddress `json:"address,omitempty"`

	// DisplayedAddress The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.
	//
	// **Conditions:** If provided:
	//   - the displayed address must be included in the `Transport Document`.
	//   - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters
	//   - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters
	//   - the order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedAddress *[]string `json:"displayedAddress,omitempty"`

	// IdentifyingCodes **Condition:** Either the `address` or a party `identifyingCode` must be provided.
	IdentifyingCodes *[]IdentifyingCode `json:"identifyingCodes,omitempty"`

	// PartyContactDetails A list of contact details
	PartyContactDetails *[]PartyContactDetail `json:"partyContactDetails,omitempty"`

	// PartyName Name of the party.
	PartyName string `json:"partyName"`

	// TaxLegalReferences A list of `Tax References` for a `Party`
	TaxLegalReferences *[]TaxLegalReference `json:"taxLegalReferences,omitempty"`
}

// Equipment Used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' DRY Freight Container, but several different versions exist.
type Equipment struct {
	// ISOEquipmentCode Unique code for the different equipment size and type used to transport commodities. The code can refer to one of ISO size type (e.g. 22G1) or ISO type group (e.g. 22GP) following the [ISO 6346](https://www.iso.org/standard/83558.html) standard.
	ISOEquipmentCode *string `json:"ISOEquipmentCode,omitempty"`

	// EquipmentReference The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
	// According to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).
	//
	// If a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.
	EquipmentReference string `json:"equipmentReference"`

	// TareWeight The weight of an empty container (gross container weight).
	TareWeight *TareWeight `json:"tareWeight,omitempty"`
}

// ErrorResponse Unexpected error
type ErrorResponse struct {
	// ErrorDateTime The DateTime corresponding to the error occurring. Must be formatted using [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.
	ErrorDateTime time.Time `json:"errorDateTime"`

	// Errors An array of errors providing more detail about the root cause.
	Errors []DetailedError `json:"errors"`

	// HttpMethod The HTTP method used to make the request e.g. `GET`, `POST`, etc
	HttpMethod ErrorResponseHttpMethod `json:"httpMethod"`

	// ProviderCorrelationReference A unique identifier to the HTTP request within the scope of the API provider.
	ProviderCorrelationReference *string `json:"providerCorrelationReference,omitempty"`

	// RequestUri The URI that was requested.
	RequestUri string `json:"requestUri"`

	// StatusCode The HTTP status code returned.
	StatusCode int32 `json:"statusCode"`

	// StatusCodeMessage A long description corresponding to the HTTP status code with additional information.
	StatusCodeMessage *string `json:"statusCodeMessage,omitempty"`

	// StatusCodeText A standard short description corresponding to the HTTP status code.
	StatusCodeText string `json:"statusCodeText"`
}

// ErrorResponseHttpMethod The HTTP method used to make the request e.g. `GET`, `POST`, etc
type ErrorResponseHttpMethod string

// ExportLicense `Export License` requirements
//
// **Condition:** Included if the property is provided in the `Shipping Instructions.`
type ExportLicense struct {
	// ExpiryDate Expiry date of the `Export License`.
	ExpiryDate *openapi_types.Date `json:"expiryDate,omitempty"`

	// IsRequired Information provided by the shipper to indicate whether an `Export License` or permit is required for this shipment/commodity/destination.
	//
	// **Note:** If this property is omitted, it may be interpreted differently by different API providers and by the same API provider in different contexts.
	IsRequired *bool `json:"isRequired,omitempty"`

	// IssueDate Issue date of the `Export License`.
	IssueDate *openapi_types.Date `json:"issueDate,omitempty"`

	// Reference Reference number assigned to an `Export License` or permit, which authorizes a business or individual to export specific goods to specific countries under defined conditions. It is a permit that is required when shipping certain restricted or controlled goods, such as military equipment, high-tech items, chemicals, or items subject to international regulations. The `Export License` must be valid at time of departure.
	Reference *string `json:"reference,omitempty"`
}

// ExportLicenseShipper `Export License` requirements
//
// **Condition:** Subject to local customs requirements and commodity.
type ExportLicenseShipper struct {
	// ExpiryDate Expiry date of the `Export License`.
	ExpiryDate *openapi_types.Date `json:"expiryDate,omitempty"`

	// IsRequired Information provided by the shipper to indicate whether an `Export License` or permit is required for this shipment/commodity/destination.
	//
	// **Note:** If this property is omitted, it may be interpreted differently by different API providers and by the same API provider in different contexts.
	IsRequired *bool `json:"isRequired,omitempty"`

	// IssueDate Issue date of the `Export License`.
	IssueDate *openapi_types.Date `json:"issueDate,omitempty"`

	// Reference Reference number assigned to an `Export License` or permit, which authorizes a business or individual to export specific goods to specific countries under defined conditions. It is a permit that is required when shipping certain restricted or controlled goods, such as military equipment, high-tech items, chemicals, or items subject to international regulations. The `Export License` must be valid at time of departure.
	Reference *string `json:"reference,omitempty"`
}

// Facility An object used to express a location using a `Facility`. The facility can be expressed using one of `BIC` code or `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.
type Facility struct {
	// FacilityCode The code used for identifying the specific facility. This code does not include the UN Location Code.
	// The definition of the code depends on the `facilityCodeListProvider`. As code list providers maintain multiple codeLists the following codeList is used:
	// - `SMDG` (the codeList used is the [SMDG Terminal Code List](https://smdg.org/documents/smdg-code-lists/))
	// - `BIC` (the codeList used is the [BIC Facility Codes](https://www.bic-code.org/facility-codes/))
	FacilityCode string `json:"facilityCode"`

	// FacilityCodeListProvider The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`
	// - `BIC` (Requires a UN Location Code)
	// - `SMDG` (Requires a UN Location Code)
	FacilityCodeListProvider FacilityFacilityCodeListProvider `json:"facilityCodeListProvider"`
}

// FacilityFacilityCodeListProvider The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`
// - `BIC` (Requires a UN Location Code)
// - `SMDG` (Requires a UN Location Code)
type FacilityFacilityCodeListProvider string

// Feedback Feedback that can be provided includes, but is not limited to:
// - unsupported properties
// - changed values
// - removed properties
// - general information
type Feedback struct {
	// Code A code used to describe the feedback. Possible values are:
	// - `INFORMATIONAL_MESSAGE` (INFO - to be used when providing extra information)
	// - `PROPERTY_WILL_BE_IGNORED` (WARN - to be used for unsupported properties/values)
	// - `PROPERTY_VALUE_MUST_CHANGE` (ERROR - to be used when a wrong property/value is provided)
	// - `PROPERTY_VALUE_HAS_BEEN_CHANGED` (WARN - when something has been auto-updated without consumer intervention)
	// - `PROPERTY_VALUE_MAY_CHANGE` (WARN - when something is likely to change in the future)
	// - `PROPERTY_HAS_BEEN_DELETED` (WARN - when something has been auto-deleted without consumer intervention)
	Code string `json:"code"`

	// JsonPath A path to the property, formatted according to [JSONpath](https://github.com/json-path/JsonPath).
	JsonPath *string `json:"jsonPath,omitempty"`

	// Message A description with additional information.
	Message string `json:"message"`

	// Property The name of the property causing the error/warning.
	Property *string `json:"property,omitempty"`

	// Severity The severity of the feedback. Possible values are:
	// - `INFO` (Information - "Your reefer container will use renewable energy", "This earlier / premium service is available")
	// - `WARN` (Warning - "I'm going to replace" / "Ignore this value" / "Use another value instead")
	// - `ERROR` (Error - "This must be changed!")
	Severity string `json:"severity"`
}

// GeoCoordinate An object used to express a location using `latitude` and `longitude`.
type GeoCoordinate struct {
	// Latitude Geographic coordinate that specifies the north–south position of a point on the Earth's surface.
	Latitude string `json:"latitude"`

	// Longitude Geographic coordinate that specifies the east–west position of a point on the Earth's surface.
	Longitude string `json:"longitude"`
}

// GrossWeight Total weight of the goods carried, including packaging.
type GrossWeight struct {
	// Unit The unit of measure which can be expressed in imperial or metric terms:
	// - `KGM` (Kilograms)
	// - `LBR` (Pounds)
	Unit GrossWeightUnit `json:"unit"`

	// Value The grand total weight of the DG cargo and weight per `UNNumber`/`NANumber` including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.
	Value float32 `json:"value"`
}

// GrossWeightUnit The unit of measure which can be expressed in imperial or metric terms:
// - `KGM` (Kilograms)
// - `LBR` (Pounds)
type GrossWeightUnit string

// HouseBillOfLading A legal contract between the Ocean Transport Intermediary (OTI), such as a Non-Vessel Operating Common Carrier (NVOCC) or a freight forwarder, and the shipper that acknowledges the receipt of goods and outlines the terms of shipment.
type HouseBillOfLading struct {
	// ConsignmentItems A list of `ConsignmentItems` for this `House Bill of Lading`
	ConsignmentItems []ConsignmentItemHBL `json:"consignmentItems"`

	// DocumentParties All `Parties` with associated roles for this `House Bill of Lading`.
	//
	// **Condition:** `Buyer` and `Seller` are mandatory if `isCargoDeliveredInICS2Zone=true` (on House B/L level) **and** `advancedManifestFilingPerformedBy=CARRIER`
	DocumentParties DocumentPartiesHouseBL `json:"documentParties"`

	// HouseBillOfLadingReference A unique number allocated by the Ocean Transport Intermediary (OTI) to the `House Bill of Lading`.
	HouseBillOfLadingReference string `json:"houseBillOfLadingReference"`

	// IsCargoDeliveredInICS2Zone Indicates whether cargo is delivered to EU, Norway, Switzerland or Northern Ireland.
	IsCargoDeliveredInICS2Zone bool `json:"isCargoDeliveredInICS2Zone"`

	// IsToOrder Indicates whether the `House Bill of Lading` (HBL) is issued `to order` or not. If `true`, `Notify party` at `HBL` level is mandatory
	IsToOrder bool `json:"isToOrder"`

	// MethodOfPayment Method used for the payment of freight charges. It can be one of the following values:
	// - `A` (Payment in cash)
	// - `B` (Payment by credit card)
	// - `C` (Payment by cheque)
	// - `D` (Other (e.g. direct debit to cash account))
	// - `H` (Electronic funds transfer)
	// - `Y` (Account holder with carrier)
	// - `Z` (Not pre-paid)
	MethodOfPayment string `json:"methodOfPayment"`

	// PlaceOfAcceptance An object to capture `Place of Acceptance` location specified as: identification of the seaport, freight terminal or other place at which the goods are taken over from the shipper by the Ocean Transport Intermediary (OTI) issuing the `House Bill of Lading`.
	//
	// **Condition:** Mandatory if different from `Place of Receipt` or `Port of Loading` at the `Master Transport Document` level.
	//
	// **Condition:** The location can be specified either using `UN Location Code` and/or (`Location Name` together with `Country Code`), all three properties can be specified.
	PlaceOfAcceptance *PlaceOfAcceptance `json:"placeOfAcceptance,omitempty"`

	// PlaceOfFinalDelivery An object to capture `Place of Final Delivery` location specified as: Identification of the seaport, freight terminal or other place at which the goods are handed over from the `Ocean Transport Intermediary` (OTI) issuing the `House Bill of Lading` to the `Consignee`.
	//
	// **Condition:** Mandatory if different from `Place of Delivery` at the `Master Transport Document` level.
	//
	// **Condition:** The location can be specified either using `UN Location Code` and/or (`Location Name` together with `Country Code`), all three properties can be specified.
	PlaceOfFinalDelivery *PlaceOfFinalDelivery `json:"placeOfFinalDelivery,omitempty"`

	// RoutingOfConsignmentCountries Identification in a chronological order of the countries through which the goods are routed between the country of original departure and final destination as stipulated in the lowest House Bill of Lading.
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	//
	// **Condition:** If provided - the first country in the list must be the country of `Place of Acceptance`; the last country in the list must be the country of `Place of Final Delivery`.
	RoutingOfConsignmentCountries []string `json:"routingOfConsignmentCountries"`

	// UtilizedTransportEquipments A list of `Utilized Transport Equipment` for this `House Bill of Lading`
	UtilizedTransportEquipments []UtilizedTransportEquipmentHBL `json:"utilizedTransportEquipments"`
}

// IdentifyingCode defines model for IdentifyingCode.
type IdentifyingCode struct {
	// CodeListName The name of the code list, code generation mechanism or code authority for the `partyCode`. Example values could be:
	// - `DID` (Decentralized Identifier) for `codeListProvider` `W3C`
	// - `LEI` (Legal Entity Identifier) for `codeListProvider` `GLEIF`
	// - `DUNS` (Data Universal Numbering System) for `codeListProvider` `DNB`
	CodeListName *string `json:"codeListName,omitempty"`

	// CodeListProvider A list of codes identifying a party. Possible values are:
	// - `WAVE` (Wave)
	// - `CARX` (CargoX)
	// - `ESSD` (EssDOCS)
	// - `IDT` (ICE Digital Trade)
	// - `BOLE` (Bolero)
	// - `EDOX` (EdoxOnline)
	// - `IQAX` (IQAX)
	// - `SECR` (Secro)
	// - `TRGO` (TradeGO)
	// - `ETEU` (eTEU)
	// - `TRAC` (Enigio trace:original)
	// - `BRIT` (BRITC eBL)
	// - `GSBN` (Global Shipping Business Network)
	// - `WISE` (WiseTech)
	// - `GLEIF` (Global Legal Entity Identifier Foundation)
	// - `W3C` (World Wide Web Consortium)
	// - `DNB` (Dun and Bradstreet)
	// - `FMC` (Federal Maritime Commission)
	// - `DCSA` (Digital Container Shipping Association)
	// - `ZZZ` (Mutually defined)
	CodeListProvider string `json:"codeListProvider"`

	// PartyCode Code to identify the party as provided by the code list provider
	PartyCode string `json:"partyCode"`
}

// ImportLicense `Import License` requirements
//
// **Condition:** Included if the property is provided in the `Shipping Instructions.`
type ImportLicense struct {
	// ExpiryDate Expiry date of the `Import License`.
	ExpiryDate *openapi_types.Date `json:"expiryDate,omitempty"`

	// IsRequired Information provided by the shipper to indicate whether an `Import License` or permit is required for this shipment/commodity/destination.
	//
	// **Note:** If this property is omitted, it may be interpreted differently by different API providers and by the same API provider in different contexts.
	IsRequired *bool `json:"isRequired,omitempty"`

	// IssueDate Issue date of the `Import License`.
	IssueDate *openapi_types.Date `json:"issueDate,omitempty"`

	// Reference Reference number assigned to an `Import License` or permit, issued by countries exercising import controls that authorizes the importation of the articles stated in the license. The `Import License` must be valid at time of arrival.
	Reference *string `json:"reference,omitempty"`
}

// ImportLicenseShipper `Import License` requirements
//
// **Condition:** Subject to local customs requirements and commodity.
type ImportLicenseShipper struct {
	// ExpiryDate Expiry date of the `Import License`.
	ExpiryDate *openapi_types.Date `json:"expiryDate,omitempty"`

	// IsRequired Information provided by the shipper to indicate whether an `Import License` or permit is required for this shipment/commodity/destination.
	//
	// **Note:** If this property is omitted, it may be interpreted differently by different API providers and by the same API provider in different contexts.
	IsRequired *bool `json:"isRequired,omitempty"`

	// IssueDate Issue date of the `Import License`.
	IssueDate *openapi_types.Date `json:"issueDate,omitempty"`

	// Reference Reference number assigned to an `Import License` or permit, issued by countries exercising import controls that authorizes the importation of the articles stated in the license. The `Import License` must be valid at time of arrival.
	Reference *string `json:"reference,omitempty"`
}

// InnerPackaging Object for inner packaging specification
type InnerPackaging struct {
	// Description Description of the packaging.
	Description string `json:"description"`

	// Material The `material` used for the `Inner Packaging` of the referenced `Dangerous Goods`.
	Material string `json:"material"`

	// Quantity Count of `Inner Packagings` of the referenced `Dangerous Goods`.
	Quantity int32 `json:"quantity"`
}

// InvoicePayableAt Location where payment of ocean freight and charges for the main transport will take place by the customer.
//
// The location can be provided as a `UN Location Code` or as a fallback - a `freeText` field
type InvoicePayableAt struct {
	union json.RawMessage
}

// InvoicePayableAt0 defines model for .
type InvoicePayableAt0 struct {
	// UNLocationCode The UN Location code specifying where the place is located. The pattern used must be
	//
	// - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	// - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
	//
	// More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
	UNLocationCode string `json:"UNLocationCode"`
}

// InvoicePayableAt1 defines model for .
type InvoicePayableAt1 struct {
	// FreeText The name of the location where payment will be rendered by the customer.
	FreeText string `json:"freeText"`
}

// InvoicePayableAtShippingInstructions Location where payment of ocean freight and charges for the main transport will take place by the customer.
//
// The location must be provided as a `UN Location Code`
type InvoicePayableAtShippingInstructions struct {
	// UNLocationCode The UN Location code specifying where the place is located. The pattern used must be
	//
	// - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	// - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
	//
	// More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
	UNLocationCode string `json:"UNLocationCode"`
}

// IssueToParty The party to whom the `Bill of Lading` must be issued.
type IssueToParty struct {
	IdentifyingCodes []IdentifyingCode `json:"identifyingCodes"`

	// PartyName Name of the party.
	PartyName string `json:"partyName"`

	// SendToPlatform The eBL platform of the transaction party.
	// The value **MUST** be one of:
	// - `WAVE` (Wave)
	// - `CARX` (CargoX)
	// - `ESSD` (EssDOCS)
	// - `IDT` (ICE Digital Trade)
	// - `BOLE` (Bolero)
	// - `EDOX` (EdoxOnline)
	// - `IQAX` (IQAX)
	// - `SECR` (Secro)
	// - `TRGO` (TradeGO)
	// - `ETEU` (eTEU)
	// - `TRAC` (Enigio trace:original)
	// - `BRIT` (BRITC eBL)
	//
	// **Condition:** Only applicable when `isElectronic=true` and `transportDocumentTypeCode=BOL`. The property **MUST** be absent for paper B/Ls (`isElectronic=false`)
	SendToPlatform *string `json:"sendToPlatform,omitempty"`

	// TaxLegalReferences A list of `Tax References` for a `Party`
	TaxLegalReferences *[]TaxLegalReference `json:"taxLegalReferences,omitempty"`
}

// IssuingParty The company or a legal entity issuing the `Transport Document`.
type IssuingParty struct {
	// Address Address where the party is located. It is an object of the attributes below.
	Address          PartyAddress       `json:"address"`
	IdentifyingCodes *[]IdentifyingCode `json:"identifyingCodes,omitempty"`

	// PartyContactDetails A list of contact details
	PartyContactDetails *[]PartyContactDetail `json:"partyContactDetails,omitempty"`

	// PartyName Name of the party.
	PartyName string `json:"partyName"`

	// TaxLegalReferences A list of `Tax References` for a `Party`
	TaxLegalReferences *[]TaxLegalReference `json:"taxLegalReferences,omitempty"`
}

// Limits Limits for the `Dangerous Goods`. The same `Temperature Unit` needs to apply to all attributes in this structure.
type Limits struct {
	// SADT Lowest temperature in which self-accelerating decomposition may occur in a substance
	SADT *float32 `json:"SADT,omitempty"`

	// SAPT Lowest temperature in which self-accelerating polymerization may occur in a substance
	SAPT *float32 `json:"SAPT,omitempty"`

	// FlashPoint Lowest temperature at which a chemical can vaporize to form an ignitable mixture in air.
	//
	// **Condition:** only applicable to specific hazardous goods according to the IMO IMDG Code.
	FlashPoint *float32 `json:"flashPoint,omitempty"`

	// TemperatureUnit The unit for **all attributes in the limits structure** in Celsius or Fahrenheit
	//
	// - `CEL` (Celsius)
	// - `FAH` (Fahrenheit)
	TemperatureUnit LimitsTemperatureUnit `json:"temperatureUnit"`

	// TransportControlTemperature Maximum temperature at which certain substance (such as organic peroxides and self-reactive and related substances) can be safely transported for a prolonged period.
	TransportControlTemperature *float32 `json:"transportControlTemperature,omitempty"`

	// TransportEmergencyTemperature Temperature at which emergency procedures shall be implemented
	TransportEmergencyTemperature *float32 `json:"transportEmergencyTemperature,omitempty"`
}

// LimitsTemperatureUnit The unit for **all attributes in the limits structure** in Celsius or Fahrenheit
//
// - `CEL` (Celsius)
// - `FAH` (Fahrenheit)
type LimitsTemperatureUnit string

// NationalCommodityCode The national commodity classification code linked to a country with a value.
//
// An example could look like this:
//
// | Type  | Country | Value |
// |-------|:-------:|-------------|
// |NCM|BR|['1515', '2106', '2507', '2512']|
type NationalCommodityCode struct {
	// CountryCode The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	CountryCode *string `json:"countryCode,omitempty"`

	// Type The national commodity classification code, which can be one of the following values defined by DCSA:
	// - `NCM` (Nomenclatura Comum do Mercosul)
	// - `HTS` (Harmonized Tariff Schedule)
	// - `SCHEDULE_B` ( Schedule B)
	// - `TARIC` (Integrated Tariff of the European Communities)
	// - `CN` (Combined Nomenclature)
	// - `CUS` (Customs Union and Statistics)
	Type string `json:"type"`

	// Values A list of `national commodity codes` values.
	Values []string `json:"values"`
}

// NetExplosiveContent The total weight of the explosive substances, without the packaging’s, casings, etc.
type NetExplosiveContent struct {
	// Unit The unit of measure which can be expressed in imperial or metric terms:
	// - `KGM` (Kilograms)
	// - `LBR` (Pounds)
	// - `GRM` (Grams)
	// - `ONZ` (Ounce)
	Unit NetExplosiveContentUnit `json:"unit"`

	// Value The total weight of the explosive substances, without the packaging’s, casings, etc.
	Value float32 `json:"value"`
}

// NetExplosiveContentUnit The unit of measure which can be expressed in imperial or metric terms:
// - `KGM` (Kilograms)
// - `LBR` (Pounds)
// - `GRM` (Grams)
// - `ONZ` (Ounce)
type NetExplosiveContentUnit string

// NetVolume The volume of the referenced dangerous goods.
//
// **Condition:** only applicable to liquids and gas.
type NetVolume struct {
	// Unit The unit of measure which can be expressed in imperial or metric terms:
	// - `FTQ` (Cubic foot)
	// - `MTQ` (Cubic meter)
	// - `LTR` (Litre)
	Unit NetVolumeUnit `json:"unit"`

	// Value The volume of the referenced dangerous goods.
	Value float32 `json:"value"`
}

// NetVolumeUnit The unit of measure which can be expressed in imperial or metric terms:
// - `FTQ` (Cubic foot)
// - `MTQ` (Cubic meter)
// - `LTR` (Litre)
type NetVolumeUnit string

// NetWeight Total weight of the goods carried, excluding packaging.
type NetWeight struct {
	// Unit The unit of measure which can be expressed in imperial or metric terms:
	// - `KGM` (Kilograms)
	// - `LBR` (Pounds)
	Unit NetWeightUnit `json:"unit"`

	// Value Total weight of the goods carried, excluding packaging.
	Value float32 `json:"value"`
}

// NetWeightUnit The unit of measure which can be expressed in imperial or metric terms:
// - `KGM` (Kilograms)
// - `LBR` (Pounds)
type NetWeightUnit string

// NotifyParty The person to be notified when a shipment arrives at its destination.
//
// **Condition:** Either the `address` or a party `identifyingCode` must be provided in the `Shipping Instructions`. If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
type NotifyParty struct {
	// Address Address where the party is located. It is an object of the attributes below.
	Address *PartyAddress `json:"address,omitempty"`

	// DisplayedAddress The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.
	//
	// **Conditions:** If provided:
	//   - the displayed address must be included in the `Transport Document`.
	//   - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters
	//   - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters
	//   - the order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedAddress *[]string `json:"displayedAddress,omitempty"`

	// IdentifyingCodes **Condition:** Either the `address` or a party `identifyingCode` must be provided.
	IdentifyingCodes *[]IdentifyingCode `json:"identifyingCodes,omitempty"`

	// PartyContactDetails A list of contact details
	PartyContactDetails *[]PartyContactDetail `json:"partyContactDetails,omitempty"`

	// PartyName Name of the party.
	PartyName string `json:"partyName"`

	// Reference A reference linked to the `NotifyParty`.
	Reference *string `json:"reference,omitempty"`

	// TaxLegalReferences A list of `Tax References` for a `Party`
	TaxLegalReferences *[]TaxLegalReference `json:"taxLegalReferences,omitempty"`

	// TypeOfPerson Can be one of the following values as per the Union Customs Code art. 5(4):
	// - `NATURAL_PERSON` (A person that is an individual living human being)
	// - `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)
	// - `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)
	TypeOfPerson *string `json:"typeOfPerson,omitempty"`
}

// NotifyPartyHBL The person to be notified when a shipment arrives at its destination.
//
// **Condition:** Mandatory for To Order HBLs (HouseBL `isToOrder=true`)
type NotifyPartyHBL struct {
	// Address An object for storing address related information
	Address          *Address           `json:"address,omitempty"`
	IdentifyingCodes *[]IdentifyingCode `json:"identifyingCodes,omitempty"`

	// PartyContactDetails A list of contact details
	PartyContactDetails []PartyContactDetailHBL `json:"partyContactDetails"`

	// PartyName Name of the party.
	PartyName string `json:"partyName"`

	// TaxLegalReferences A list of `Tax References` for a `Party`
	TaxLegalReferences *[]TaxLegalReference `json:"taxLegalReferences,omitempty"`

	// TypeOfPerson Can be one of the following values as per the Union Customs Code art. 5(4):
	// - `NATURAL_PERSON` (A person that is an individual living human being)
	// - `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)
	// - `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)
	TypeOfPerson string `json:"typeOfPerson"`
}

// OnwardInlandRouting An object to capture `Onward Inland Routing` location specified as the end location of the inland movement that takes place after the container(s) being delivered to the port of discharge/place of delivery for account and risk of merchant (merchant haulage).
//
// The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` or an `Address`.
//
// **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.
type OnwardInlandRouting struct {
	// UNLocationCode The UN Location code specifying where the place is located. The pattern used must be
	//
	// - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	// - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
	//
	// More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
	UNLocationCode *string `json:"UNLocationCode,omitempty"`

	// Address An object for storing address related information
	Address *Address `json:"address,omitempty"`

	// Facility An object used to express a location using a `Facility`. The facility can be expressed using one of `BIC` code or `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.
	Facility *Facility `json:"facility,omitempty"`

	// LocationName The name of the location.
	LocationName *string `json:"locationName,omitempty"`
}

// OriginChargesPaymentTerm An indicator of whether origin charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
type OriginChargesPaymentTerm struct {
	// HaulageChargesPaymentTermCode An indicator of whether the costs for inland transportation to the port, when applicable, are prepaid (`PRE`) or collect (`COL`).
	//
	// - `PRE` (Prepaid)
	// - `COL` (Collect)
	HaulageChargesPaymentTermCode *OriginChargesPaymentTermHaulageChargesPaymentTermCode `json:"haulageChargesPaymentTermCode,omitempty"`

	// OtherChargesPaymentTermCode An indicator of whether origin charges (excluding port and haulage) are prepaid (`PRE`) or collect (`COL`).
	//
	// - `PRE` (Prepaid)
	// - `COL` (Collect)
	OtherChargesPaymentTermCode *OriginChargesPaymentTermOtherChargesPaymentTermCode `json:"otherChargesPaymentTermCode,omitempty"`

	// PortChargesPaymentTermCode An indicator of whether the origin port charges are prepaid (`PRE`) or collect (`COL`).
	//
	// - `PRE` (Prepaid)
	// - `COL` (Collect)
	PortChargesPaymentTermCode *OriginChargesPaymentTermPortChargesPaymentTermCode `json:"portChargesPaymentTermCode,omitempty"`
}

// OriginChargesPaymentTermHaulageChargesPaymentTermCode An indicator of whether the costs for inland transportation to the port, when applicable, are prepaid (`PRE`) or collect (`COL`).
//
// - `PRE` (Prepaid)
// - `COL` (Collect)
type OriginChargesPaymentTermHaulageChargesPaymentTermCode string

// OriginChargesPaymentTermOtherChargesPaymentTermCode An indicator of whether origin charges (excluding port and haulage) are prepaid (`PRE`) or collect (`COL`).
//
// - `PRE` (Prepaid)
// - `COL` (Collect)
type OriginChargesPaymentTermOtherChargesPaymentTermCode string

// OriginChargesPaymentTermPortChargesPaymentTermCode An indicator of whether the origin port charges are prepaid (`PRE`) or collect (`COL`).
//
// - `PRE` (Prepaid)
// - `COL` (Collect)
type OriginChargesPaymentTermPortChargesPaymentTermCode string

// OtherDocumentParty A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.
type OtherDocumentParty struct {
	// Party Refers to a company or a legal entity.
	//
	// **Condition:** Either the `address` or a party `identifyingCode` must be provided in the `Shipping Instructions`.
	Party Party `json:"party"`

	// PartyFunction Specifies the role of the party in a given context. Possible values are:
	//
	// - `SCO` (Service Contract Owner)
	// - `DDR` (Consignor's freight forwarder)
	// - `DDS` (Consignee's freight forwarder)
	// - `COW` (Invoice payer on behalf of the consignor (shipper))
	// - `COX` (Invoice payer on behalf of the consignee)
	// - `CS` (Consolidator)
	// - `MF` (Manufacturer)
	// - `WH` (Warehouse Keeper)
	PartyFunction string `json:"partyFunction"`
}

// OtherDocumentPartyHBL A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.
type OtherDocumentPartyHBL struct {
	// Party Refers to a company or a legal entity.
	Party PartyHBL `json:"party"`

	// PartyFunction Specifies the role of the party in a given context. Possible values are:
	//
	// - `DDR` (Consignor's freight forwarder)
	// - `DDS` (Consignee's freight forwarder)
	// - `CS` (Consolidator)
	// - `MF` (Manufacturer)
	// - `WH` (Warehouse Keeper)
	PartyFunction string `json:"partyFunction"`
}

// OuterPackaging Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport.
type OuterPackaging struct {
	// DangerousGoods A list of `Dangerous Goods`
	DangerousGoods *[]DangerousGoods `json:"dangerousGoods,omitempty"`

	// Description Description of the outer packaging/overpack.
	Description string `json:"description"`

	// ImoPackagingCode The code of the packaging as per IMO.
	//
	// **Condition:** only applicable to dangerous goods if specified in the [IMO IMDG code](https://www.imo.org/en/publications/Pages/IMDG%20Code.aspx). If not available, the `packageCode` as per UN recommendation 21 should be used.
	ImoPackagingCode *string `json:"imoPackagingCode,omitempty"`

	// NumberOfPackages Specifies the number of outer packagings/overpacks associated with this `Cargo Item`.
	NumberOfPackages int32 `json:"numberOfPackages"`

	// PackageCode A code identifying the outer packaging/overpack. `PackageCode` must follow the codes specified in [Recommendation N°21](https://unece.org/trade/uncefact/cl-recommendations)
	//
	// **Condition:** only applicable to dangerous goods if the `IMO packaging code` is not available.
	PackageCode *string `json:"packageCode,omitempty"`

	// WoodDeclaration Property to clearly indicate if the products, packaging and any other items are made of wood. Possible values include:
	// - `NOT_APPLICABLE` (if no wood or any other wood product such as packaging and supports are being shipped)
	// - `NOT_TREATED_AND_NOT_CERTIFIED` (if the wood or wooden materials have not been treated nor fumigated and do not include a certificate)
	// - `PROCESSED` (if the wood or wooden materials are entirely made of processed wood, such as plywood, particle board, sliver plates of wood and wood laminate sheets produced using glue, heat, pressure or a combination of these)
	// - `TREATED_AND_CERTIFIED` (if the wood or wooden materials have been treated and/or fumigated and include a certificate)
	WoodDeclaration *string `json:"woodDeclaration,omitempty"`
}

// OuterPackagingHBL Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport.
type OuterPackagingHBL struct {
	// UNNumber United Nations Dangerous Goods Identifier (UNDG) assigned by the UN Sub-Committee of Experts on the Transport of Dangerous Goods and shown in the IMO IMDG.
	UNNumber *string `json:"UNNumber,omitempty"`

	// NumberOfPackages Specifies the number of outer packagings/overpacks associated with this `Cargo Item`.
	//
	// **Condition:** Mandatory if `packageCode` is **NOT** one of the following values:
	//
	// - `VY` (Bulk, solid, fine particles ("powders"))
	// - `VS` (Bulk, scrap metal)
	// - `VR` (Bulk, solid, granular particles ("grains"))
	// - `VQ` (Bulk, liquefied gas (at abnormal temperature/pressure))
	// - `VO` (Bulk, solid, large particles ("nodules"))
	// - `VL` (Bulk, liquid)
	// - `NG` (Unpacked or unpackaged, multiple units)
	// - `NF` (Unpacked or unpackaged, single unit)
	// - `NE` (Unpacked or unpackaged)
	// - `VG` (Bulk, gas (at 1031 mbar and 15°C))
	NumberOfPackages *int32 `json:"numberOfPackages,omitempty"`

	// PackageCode A code identifying the outer packaging/overpack. `PackageCode` must follow the codes specified in [Recommendation N°21](https://unece.org/trade/uncefact/cl-recommendations)
	PackageCode string `json:"packageCode"`

	// ShippingMarks The identifying details of a package or the actual markings that appear on the package(s). This information is provided by the customer.
	ShippingMarks *string `json:"shippingMarks,omitempty"`
}

// OuterPackagingShipper Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport.
//
// **Condition:** Mandatory for non-dangerous goods cargo.
type OuterPackagingShipper struct {
	// Description Description of the outer packaging/overpack.
	Description string `json:"description"`

	// NumberOfPackages Specifies the number of outer packagings/overpacks associated with this `Cargo Item`.
	NumberOfPackages int32 `json:"numberOfPackages"`

	// PackageCode A code identifying the outer packaging/overpack. `PackageCode` must follow the codes specified in [Recommendation N°21](https://unece.org/trade/uncefact/cl-recommendations)
	//
	// **Condition:** only applicable to dangerous goods if the `IMO packaging code` is not available.
	PackageCode *string `json:"packageCode,omitempty"`

	// WoodDeclaration Property to clearly indicate if the products, packaging and any other items are made of wood. Possible values include:
	// - `NOT_APPLICABLE` (if no wood or any other wood product such as packaging and supports are being shipped)
	// - `NOT_TREATED_AND_NOT_CERTIFIED` (if the wood or wooden materials have not been treated nor fumigated and do not include a certificate)
	// - `PROCESSED` (if the wood or wooden materials are entirely made of processed wood, such as plywood, particle board, sliver plates of wood and wood laminate sheets produced using glue, heat, pressure or a combination of these)
	// - `TREATED_AND_CERTIFIED` (if the wood or wooden materials have been treated and/or fumigated and include a certificate)
	WoodDeclaration *string `json:"woodDeclaration,omitempty"`
}

// Party Refers to a company or a legal entity.
//
// **Condition:** Either the `address` or a party `identifyingCode` must be provided in the `Shipping Instructions`.
type Party struct {
	// Address Address where the party is located. It is an object of the attributes below.
	Address *PartyAddress `json:"address,omitempty"`

	// IdentifyingCodes **Condition:** Either the `address` or a party `identifyingCode` must be provided.
	IdentifyingCodes *[]IdentifyingCode `json:"identifyingCodes,omitempty"`

	// PartyContactDetails A list of contact details
	PartyContactDetails *[]PartyContactDetail `json:"partyContactDetails,omitempty"`

	// PartyName Name of the party.
	PartyName string `json:"partyName"`

	// Reference A reference linked to the `Party`.
	Reference *string `json:"reference,omitempty"`

	// TaxLegalReferences A list of `Tax References` for a `Party`
	TaxLegalReferences *[]TaxLegalReference `json:"taxLegalReferences,omitempty"`
}

// PartyAddress Address where the party is located. It is an object of the attributes below.
type PartyAddress struct {
	// POBox A numbered box at a post office where a person or business can have mail or parcels delivered.
	POBox *string `json:"POBox,omitempty"`

	// UNLocationCode The UN Location code specifying where the carrier booking office is located. The pattern used must be
	// - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	// - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
	// More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
	UNLocationCode *string `json:"UNLocationCode,omitempty"`

	// City The city name of the party’s address.
	City string `json:"city"`

	// CountryCode The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	CountryCode string `json:"countryCode"`

	// Floor The floor of the party’s street number.
	Floor *string `json:"floor,omitempty"`

	// PostCode The post code of the party’s address.
	PostCode *string `json:"postCode,omitempty"`

	// StateRegion The state/region of the party’s address.
	StateRegion *string `json:"stateRegion,omitempty"`

	// Street The name of the street of the party’s address.
	Street string `json:"street"`

	// StreetNumber The number of the street of the party’s address.
	StreetNumber *string `json:"streetNumber,omitempty"`
}

// PartyContactDetail The contact details of the person to contact. It is mandatory to provide either `phone` and/or `email` along with the `name`, both can be provided.
type PartyContactDetail struct {
	// Name Name of the contact
	Name  string `json:"name"`
	union json.RawMessage
}

// PartyContactDetail0 `Phone` is mandatory to provide
type PartyContactDetail0 struct {
	// Phone Phone number for the contact. Phone **MUST** include an international phone number format as defined in the [ITU-T recommendation E.123](https://www.itu.int/rec/T-REC-E.123/en).
	Phone string `json:"phone"`
}

// PartyContactDetail1 `Email` is mandatory to provide
type PartyContactDetail1 struct {
	// Email `E-mail` address to be used
	Email string `json:"email"`
}

// PartyContactDetailHBL The contact details of the person to contact. It is mandatory to provide either `phone` and/or `email` along with the `name`, both can be provided.
type PartyContactDetailHBL struct {
	// Name Name of the contact
	Name  string `json:"name"`
	union json.RawMessage
}

// PartyContactDetailHBL0 `Phone` is mandatory to provide
type PartyContactDetailHBL0 struct {
	// Phone Phone number for the contact. Phone **MUST** include an international phone number format as defined in the [ITU-T recommendation E.123](https://www.itu.int/rec/T-REC-E.123/en).
	Phone string `json:"phone"`
}

// PartyContactDetailHBL1 `Email` is mandatory to provide
type PartyContactDetailHBL1 struct {
	// Email `E-mail` address to be used
	Email string `json:"email"`
}

// PartyContactDetailWithPattern The contact details of the person to contact. It is mandatory to provide either `phone` and/or `email` along with the `name`, both can be provided.
type PartyContactDetailWithPattern struct {
	// Name Name of the contact
	Name  string `json:"name"`
	union json.RawMessage
}

// PartyContactDetailWithPattern0 `Phone` is mandatory to provide
type PartyContactDetailWithPattern0 struct {
	// Phone Phone number for the contact. Phone **MUST** include an international phone number format as defined in the [ITU-T recommendation E.123](https://www.itu.int/rec/T-REC-E.123/en).
	Phone string `json:"phone"`
}

// PartyContactDetailWithPattern1 `Email` is mandatory to provide
type PartyContactDetailWithPattern1 struct {
	// Email `E-mail` address to be used
	Email string `json:"email"`
}

// PartyHBL Refers to a company or a legal entity.
type PartyHBL struct {
	// Address An object for storing address related information
	Address          *Address           `json:"address,omitempty"`
	IdentifyingCodes *[]IdentifyingCode `json:"identifyingCodes,omitempty"`

	// PartyContactDetails A list of contact details
	PartyContactDetails *[]PartyContactDetailHBL `json:"partyContactDetails,omitempty"`

	// PartyName Name of the party.
	PartyName string `json:"partyName"`

	// Reference A reference linked to the `Party`.
	Reference *string `json:"reference,omitempty"`

	// TaxLegalReferences A list of `Tax References` for a `Party`
	TaxLegalReferences *[]TaxLegalReference `json:"taxLegalReferences,omitempty"`
}

// PlaceOfAcceptance An object to capture `Place of Acceptance` location specified as: identification of the seaport, freight terminal or other place at which the goods are taken over from the shipper by the Ocean Transport Intermediary (OTI) issuing the `House Bill of Lading`.
//
// **Condition:** Mandatory if different from `Place of Receipt` or `Port of Loading` at the `Master Transport Document` level.
//
// **Condition:** The location can be specified either using `UN Location Code` and/or (`Location Name` together with `Country Code`), all three properties can be specified.
type PlaceOfAcceptance struct {
	// UNLocationCode The UN Location code specifying where the place is located. The pattern used must be
	//
	// - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	// - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
	//
	// More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
	UNLocationCode *string `json:"UNLocationCode,omitempty"`

	// CountryCode The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	//
	// **Condition:** Mandatory to provide in case `UN Location Code` is not provided
	CountryCode *string `json:"countryCode,omitempty"`

	// LocationName The name of the location.
	//
	// **Condition:** Mandatory to provide in case `UN Location Code` is not provided
	LocationName *string `json:"locationName,omitempty"`
}

// PlaceOfDelivery An object to capture `Place of Delivery` location specified as: the location where the cargo is handed over to the consignee, or his agent, by the shipping line and where responsibility of the shipping line ceases.
//
// **Condition:** Only when onward transport is done by the carrier
//
// The location can be specified in **any** of the following ways: `UN Location Code`, `Facility`, `Address` or a `Geo Coordinate`.
//
// **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.
type PlaceOfDelivery struct {
	// UNLocationCode The UN Location code specifying where the place is located. The pattern used must be
	//
	// - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	// - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
	//
	// More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
	UNLocationCode *string `json:"UNLocationCode,omitempty"`

	// Address An object for storing address related information
	Address *Address `json:"address,omitempty"`

	// Facility An object used to express a location using a `Facility`. The facility can be expressed using one of `BIC` code or `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.
	Facility *Facility `json:"facility,omitempty"`

	// GeoCoordinate An object used to express a location using `latitude` and `longitude`.
	GeoCoordinate *GeoCoordinate `json:"geoCoordinate,omitempty"`

	// LocationName The name of the location.
	LocationName *string `json:"locationName,omitempty"`
}

// PlaceOfFinalDelivery An object to capture `Place of Final Delivery` location specified as: Identification of the seaport, freight terminal or other place at which the goods are handed over from the `Ocean Transport Intermediary` (OTI) issuing the `House Bill of Lading` to the `Consignee`.
//
// **Condition:** Mandatory if different from `Place of Delivery` at the `Master Transport Document` level.
//
// **Condition:** The location can be specified either using `UN Location Code` and/or (`Location Name` together with `Country Code`), all three properties can be specified.
type PlaceOfFinalDelivery struct {
	// UNLocationCode The UN Location code specifying where the place is located. The pattern used must be
	//
	// - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	// - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
	//
	// More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
	UNLocationCode *string `json:"UNLocationCode,omitempty"`

	// CountryCode The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	//
	// **Condition:** Mandatory to provide in case `UN Location Code` is not provided
	CountryCode *string `json:"countryCode,omitempty"`

	// LocationName The name of the location.
	//
	// **Condition:** Mandatory to provide in case `UN Location Code` is not provided
	LocationName *string `json:"locationName,omitempty"`
}

// PlaceOfIssue An object to capture where the original Transport Document (`Bill of Lading`) will be issued.
//
// **Condition:** The location can be specified as one of `UN Location Code` or `CountryCode`, but not both.
type PlaceOfIssue struct {
	// LocationName The name of the location.
	LocationName *string `json:"locationName,omitempty"`
	union        json.RawMessage
}

// PlaceOfIssue0 defines model for .
type PlaceOfIssue0 struct {
	// UNLocationCode The UN Location code specifying where the place is located. The pattern used must be
	//
	// - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	// - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
	//
	// More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
	UNLocationCode string `json:"UNLocationCode"`
}

// PlaceOfIssue1 defines model for .
type PlaceOfIssue1 struct {
	// CountryCode The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	CountryCode string `json:"countryCode"`
}

// PlaceOfReceipt An object to capture `Place of Receipt` location specified as: the location where the cargo is handed over by the shipper, or his agent, to the shipping line. This indicates the point at which the shipping line takes on responsibility for carriage of the container.
//
// **Condition:** Only when pre-carriage is done by the carrier.
//
// The location can be specified in **any** of the following ways: `UN Location Code`, `Facility`, `Address` or a `Geo Coordinate`.
//
// **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.
type PlaceOfReceipt struct {
	// UNLocationCode The UN Location code specifying where the place is located. The pattern used must be
	//
	// - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	// - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
	//
	// More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
	UNLocationCode *string `json:"UNLocationCode,omitempty"`

	// Address An object for storing address related information
	Address *Address `json:"address,omitempty"`

	// Facility An object used to express a location using a `Facility`. The facility can be expressed using one of `BIC` code or `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.
	Facility *Facility `json:"facility,omitempty"`

	// GeoCoordinate An object used to express a location using `latitude` and `longitude`.
	GeoCoordinate *GeoCoordinate `json:"geoCoordinate,omitempty"`

	// LocationName The name of the location.
	LocationName *string `json:"locationName,omitempty"`
}

// PortOfDischarge An object to capture `Port of Discharge` location specified as: the location where the cargo is discharged from the last sea-going vessel.
//
// The location can be specified in **any** of the following ways: `UN Location Code` or `City and Country`.
//
// **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `UN Location Code` and as a `City and Country`) that both ways point to the same location.
type PortOfDischarge struct {
	// UNLocationCode The UN Location code specifying where the place is located. The pattern used must be
	//
	// - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	// - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
	//
	// More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
	UNLocationCode *string `json:"UNLocationCode,omitempty"`

	// City An object for storing city, state/region and country related information
	City *City `json:"city,omitempty"`

	// LocationName The name of the location.
	LocationName *string `json:"locationName,omitempty"`
}

// PortOfLoading An object to capture `Port of Loading` location specified as: the location where the cargo is loaded onto a first sea-going vessel for water transportation.
//
// The location can be specified in **any** of the following ways: `UN Location Code` or `City and Country`.
//
// **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `UN Location Code` and as a `City and Country`) that both ways point to the same location.
type PortOfLoading struct {
	// UNLocationCode The UN Location code specifying where the place is located. The pattern used must be
	//
	// - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	// - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
	//
	// More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
	UNLocationCode *string `json:"UNLocationCode,omitempty"`

	// City An object for storing city, state/region and country related information
	City *City `json:"city,omitempty"`

	// LocationName The name of the location.
	LocationName *string `json:"locationName,omitempty"`
}

// Reference References provided by the shipper or freight forwarder at the time of `Booking` or at the time of providing `Shipping Instructions`. Carriers share it back when providing `Track & Trace` event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.
type Reference struct {
	// Type The reference type codes defined by DCSA. Possible values are:
	// - `CR` (Customer’s Reference)
	// - `AKG` (Vehicle Identification Number)
	Type string `json:"type"`

	// Value The value of the reference.
	Value string `json:"value"`
}

// ReferenceConsignmentItem References provided by the shipper or freight forwarder at the time of `Booking` or at the time of providing `Shipping Instructions`. Carriers share it back when providing `Track & Trace` event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.
type ReferenceConsignmentItem struct {
	// Type The reference type codes defined by DCSA. Possible values are:
	// - `CR` (Customer’s Reference)
	// - `AKG` (Vehicle Identification Number)
	// - `SPO` (Shipper's Purchase Order)
	// - `CPO` (Consignee's Purchase Order)
	Type string `json:"type"`

	// Values List of `referenceValues` for a given `referenceType`.
	Values []string `json:"values"`
}

// RequiredEquipment Used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' DRY Freight Container, but several different versions exist.
type RequiredEquipment struct {
	// ISOEquipmentCode Unique code for the different equipment size and type used to transport commodities. The code can refer to one of ISO size type (e.g. 22G1) or ISO type group (e.g. 22GP) following the [ISO 6346](https://www.iso.org/standard/83558.html) standard.
	ISOEquipmentCode string `json:"ISOEquipmentCode"`

	// EquipmentReference The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
	// According to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).
	//
	// If a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.
	EquipmentReference string `json:"equipmentReference"`

	// TareWeight The weight of an empty container (gross container weight).
	TareWeight TareWeight `json:"tareWeight"`
}

// Seal Addresses the seal-related information associated with the shipment equipment. A seal is put on a shipment equipment once it is loaded. This `Seal` is meant to stay on until the shipment equipment reaches its final destination.
type Seal struct {
	// Number Identifies a seal affixed to the container.
	Number string `json:"number"`

	// Source The source of the seal, namely who has affixed the seal.
	// - `CAR` (Carrier)
	// - `SHI` (Shipper)
	// - `VET` (Veterinary)
	// - `CUS` (Customs)
	//
	// **Condition:** Seal source may be required depending on the type of commodity being shipped.
	Source *SealSource `json:"source,omitempty"`
}

// SealSource The source of the seal, namely who has affixed the seal.
// - `CAR` (Carrier)
// - `SHI` (Shipper)
// - `VET` (Veterinary)
// - `CUS` (Customs)
//
// **Condition:** Seal source may be required depending on the type of commodity being shipped.
type SealSource string

// Seller The seller is the last known entity by whom the goods are sold or agreed to be sold to the buyer. If the goods are to be imported otherwise than in pursuance of a purchase, the details of the owner of the goods shall be provided.
//
// **Condition:** Buyer and Seller are mandatory if `isCargoDeliveredInICS2Zone=true` and `manifesttypecode='ENS'` and `advancedManifestFilingPerformedBy='CARRIER'` and `isHouseBillofLadingsIssued=false`.
type Seller struct {
	// Address An object for storing address related information
	Address          *Address           `json:"address,omitempty"`
	IdentifyingCodes *[]IdentifyingCode `json:"identifyingCodes,omitempty"`

	// PartyContactDetails A list of contact details
	PartyContactDetails *[]PartyContactDetailWithPattern `json:"partyContactDetails,omitempty"`

	// PartyName Name of the party.
	PartyName string `json:"partyName"`

	// TaxLegalReferences A list of `Tax References` for a `Party`
	TaxLegalReferences *[]TaxLegalReference `json:"taxLegalReferences,omitempty"`

	// TypeOfPerson Can be one of the following values as per the Union Customs Code art. 5(4):
	// - `NATURAL_PERSON` (A person that is an individual living human being)
	// - `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)
	// - `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)
	TypeOfPerson string `json:"typeOfPerson"`
}

// SellerHBL The seller is the last known entity by whom the goods are sold or agreed to be sold to the buyer. If the goods are to be imported otherwise than in pursuance of a purchase, the details of the owner of the goods shall be provided.
//
// **Condition:** Buyer and Seller are mandatory if `isCargoDeliveredInICS2Zone=true` (on House B/L level) and `manifesttypecode='ENS'` and `advancedManifestFilingPerformedBy='CARRIER'`.
type SellerHBL struct {
	// Address An object for storing address related information
	Address          *Address           `json:"address,omitempty"`
	IdentifyingCodes *[]IdentifyingCode `json:"identifyingCodes,omitempty"`

	// PartyContactDetails A list of contact details
	PartyContactDetails *[]PartyContactDetailHBL `json:"partyContactDetails,omitempty"`

	// PartyName Name of the party.
	PartyName string `json:"partyName"`

	// TaxLegalReferences A list of `Tax References` for a `Party`
	TaxLegalReferences *[]TaxLegalReference `json:"taxLegalReferences,omitempty"`

	// TypeOfPerson Can be one of the following values as per the Union Customs Code art. 5(4):
	// - `NATURAL_PERSON` (A person that is an individual living human being)
	// - `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)
	// - `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)
	TypeOfPerson string `json:"typeOfPerson"`
}

// Shipper The party by whom or in whose name or on whose behalf a contract of carriage of goods by sea has been concluded with a carrier, or the party by whom or in whose name, or on whose behalf, the goods are actually delivered to the carrier in relation to the contract of carriage by sea.
//
// **Condition:** Either the `address` or a party `identifyingCode` must be provided in the `Shipping Instructions`. If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
type Shipper struct {
	// Address Address where the party is located. It is an object of the attributes below.
	Address *PartyAddress `json:"address,omitempty"`

	// DisplayedAddress The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.
	//
	// **Conditions:** If provided:
	//   - the displayed address must be included in the `Transport Document`.
	//   - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters
	//   - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters
	//   - the order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedAddress *[]string `json:"displayedAddress,omitempty"`

	// IdentifyingCodes **Condition:** Either the `address` or a party `identifyingCode` must be provided.
	IdentifyingCodes *[]IdentifyingCode `json:"identifyingCodes,omitempty"`

	// PartyContactDetails A list of contact details
	PartyContactDetails *[]PartyContactDetail `json:"partyContactDetails,omitempty"`

	// PartyName Name of the party.
	PartyName string `json:"partyName"`

	// PurchaseOrderReferences A list of `Purchase Order Reference`s linked to the `Shipper`.
	PurchaseOrderReferences *[]string `json:"purchaseOrderReferences,omitempty"`

	// Reference A reference linked to the `Shipper`.
	Reference *string `json:"reference,omitempty"`

	// TaxLegalReferences A list of `Tax References` for a `Party`
	TaxLegalReferences *[]TaxLegalReference `json:"taxLegalReferences,omitempty"`

	// TypeOfPerson Can be one of the following values as per the Union Customs Code art. 5(4):
	// - `NATURAL_PERSON` (A person that is an individual living human being)
	// - `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)
	// - `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)
	TypeOfPerson *string `json:"typeOfPerson,omitempty"`
}

// ShipperHBL The `Shipper` on the `House Bill of Lading`.
type ShipperHBL struct {
	// Address An object for storing address related information
	Address          *Address           `json:"address,omitempty"`
	IdentifyingCodes *[]IdentifyingCode `json:"identifyingCodes,omitempty"`

	// PartyContactDetails A list of contact details
	PartyContactDetails *[]PartyContactDetailHBL `json:"partyContactDetails,omitempty"`

	// PartyName Name of the party.
	PartyName string `json:"partyName"`

	// TaxLegalReferences A list of `Tax References` for a `Party`
	TaxLegalReferences *[]TaxLegalReference `json:"taxLegalReferences,omitempty"`

	// TypeOfPerson Can be one of the following values as per the Union Customs Code art. 5(4):
	// - `NATURAL_PERSON` (A person that is an individual living human being)
	// - `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)
	// - `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)
	TypeOfPerson string `json:"typeOfPerson"`
}

// ShippingInstructions The `Shipping Instructions` as provided by the Shipper.
type ShippingInstructions struct {
	// AdvanceManifestFilings A list of `Advance Manifest Filings` specified by the Shipper to indicate whom is to do the Filing
	AdvanceManifestFilings *[]AdvanceManifestFiling `json:"advanceManifestFilings,omitempty"`

	// ConsignmentItems A list of `ConsignmentItems`
	ConsignmentItems []ConsignmentItemShipper `json:"consignmentItems"`

	// CustomsReferences A list of `Customs references`
	CustomsReferences *[]CustomsReference `json:"customsReferences,omitempty"`

	// DestinationChargesPaymentTerm An indicator of whether destination charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
	DestinationChargesPaymentTerm *DestinationChargesPaymentTerm `json:"destinationChargesPaymentTerm,omitempty"`

	// DisplayedNameForPlaceOfDelivery The name to be used in order to specify how the `Place of Delivery` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedNameForPlaceOfDelivery *[]string `json:"displayedNameForPlaceOfDelivery,omitempty"`

	// DisplayedNameForPlaceOfReceipt The name to be used in order to specify how the `Place of Receipt` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedNameForPlaceOfReceipt *[]string `json:"displayedNameForPlaceOfReceipt,omitempty"`

	// DisplayedNameForPortOfDischarge The name to be used in order to specify how the `Port of Discharge` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedNameForPortOfDischarge *[]string `json:"displayedNameForPortOfDischarge,omitempty"`

	// DisplayedNameForPortOfLoad The name to be used in order to specify how the `Port of Load` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedNameForPortOfLoad *[]string `json:"displayedNameForPortOfLoad,omitempty"`

	// DocumentParties All `Parties` with associated roles.
	//
	// **Condition:** `Buyer` and `Seller` are mandatory if `isCargoDeliveredInICS2Zone=true` **and** `advancedManifestFilingPerformedBy=CARRIER` and `isHouseBillOfLadingsIssued=false`
	DocumentParties DocumentPartiesShippingInstructions `json:"documentParties"`

	// ExportLicense `Export License` requirements
	//
	// **Condition:** Subject to local customs requirements and commodity.
	ExportLicense *ExportLicenseShipper `json:"exportLicense,omitempty"`

	// Feedbacks Feedback that can be provided includes, but is not limited to:
	// - unsupported properties
	// - changed values
	// - removed properties
	// - general information
	Feedbacks *[]Feedback `json:"feedbacks,omitempty"`

	// FreightPaymentTermCode An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
	//
	// - `PRE` (Prepaid)
	// - `COL` (Collect)
	FreightPaymentTermCode ShippingInstructionsFreightPaymentTermCode `json:"freightPaymentTermCode"`

	// HouseBillOfLadings A list of `House Bill of Ladings` specified by the Shipper.
	HouseBillOfLadings *[]HouseBillOfLading `json:"houseBillOfLadings,omitempty"`

	// ImportLicense `Import License` requirements
	//
	// **Condition:** Subject to local customs requirements and commodity.
	ImportLicense *ImportLicenseShipper `json:"importLicense,omitempty"`

	// InvoicePayableAt Location where payment of ocean freight and charges for the main transport will take place by the customer.
	//
	// The location must be provided as a `UN Location Code`
	InvoicePayableAt *InvoicePayableAtShippingInstructions `json:"invoicePayableAt,omitempty"`

	// IsCargoDeliveredInICS2Zone Indicates whether cargo is delivered to EU, Norway, Switzerland or Northern Ireland.
	IsCargoDeliveredInICS2Zone bool `json:"isCargoDeliveredInICS2Zone"`

	// IsCarriersAgentAtDestinationRequired Indicates whether the Carrier's agent at destination name, address and contact details should be included in the `Transport Document`.
	IsCarriersAgentAtDestinationRequired *bool `json:"isCarriersAgentAtDestinationRequired,omitempty"`

	// IsElectronic An indicator whether the transport document is electronically transferred.
	IsElectronic bool `json:"isElectronic"`

	// IsHouseBillOfLadingsIssued Indicates whether one or more `House Bill of Lading(s)` have been issued.
	//
	// **Condition:** Mandatory if `manifestTypeCode` is `ENS`
	IsHouseBillOfLadingsIssued *bool `json:"isHouseBillOfLadingsIssued,omitempty"`

	// IsShippedOnBoardType Specifies whether the Transport Document is a received for shipment, or shipped on board.
	IsShippedOnBoardType bool `json:"isShippedOnBoardType"`

	// IsToOrder Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).
	//
	// `isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).
	IsToOrder bool `json:"isToOrder"`

	// NumberOfCopiesWithCharges The requested number of copies of the `Transport Document` to be issued by the carrier including charges.
	//
	// **Conditions:** The following table defines the conditions for the `numberOfCopiesWithCharges` property:
	// | Transport Document Type Code | Is Electronic | Meaning |
	// |-------|:-------:|-------|
	// |`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier with charges|
	// |`BOL`|`true`|Not applicable, there are no copies|
	// |`SWB`|`false`|Indicates that charges should be included in the `SWB` (pdf or other formats)|
	// |`SWB`|`true`|Indicates that charges should be included in the electronic `SWB`|
	NumberOfCopiesWithCharges *int32 `json:"numberOfCopiesWithCharges,omitempty"`

	// NumberOfCopiesWithoutCharges The requested number of copies of the `Transport Document` to be issued by the carrier **NOT** including charges.
	//
	// **Conditions:** The following table defines the conditions for the `numberOfCopiesWithoutCharges` property:
	// | Transport Document Type Code | Is Electronic | Meaning |
	// |-------|:-------:|-------|
	// |`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier without charges|
	// |`BOL`|`true`|Not applicable, there are no copies|
	// |`SWB`|`false`|Indicates that charges should NOT be included in the `SWB` (pdf or other formats)|
	// |`SWB`|`true`|Indicates that charges NOT should be included in the electronic `SWB`|
	NumberOfCopiesWithoutCharges *int32 `json:"numberOfCopiesWithoutCharges,omitempty"`

	// NumberOfOriginalsWithCharges Number of originals of the Bill of Lading that has been requested by the customer with charges.
	//
	// **Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)
	NumberOfOriginalsWithCharges *int32 `json:"numberOfOriginalsWithCharges,omitempty"`

	// NumberOfOriginalsWithoutCharges Number of originals of the Bill of Lading that has been requested by the customer without charges.
	//
	// **Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)
	NumberOfOriginalsWithoutCharges *int32 `json:"numberOfOriginalsWithoutCharges,omitempty"`

	// OriginChargesPaymentTerm An indicator of whether origin charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
	OriginChargesPaymentTerm *OriginChargesPaymentTerm `json:"originChargesPaymentTerm,omitempty"`

	// PartyContactDetails The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.)
	PartyContactDetails []PartyContactDetail `json:"partyContactDetails"`

	// PlaceOfIssue An object to capture where the original Transport Document (`Bill of Lading`) will be issued.
	//
	// **Condition:** The location can be specified as one of `UN Location Code` or `CountryCode`, but not both.
	PlaceOfIssue *PlaceOfIssue `json:"placeOfIssue,omitempty"`

	// References A list of `References`
	References *[]Reference `json:"references,omitempty"`

	// RequestedCarrierCertificates Certificate(s) requested by the Shipper for the Carrier to include as part of the shipment documentation pack
	RequestedCarrierCertificates *[]string `json:"requestedCarrierCertificates,omitempty"`

	// RequestedCarrierClauses Clauses requested by the Shipper for the Carrier to include in the `Transport Document` `Carrier clauses`
	RequestedCarrierClauses *[]string `json:"requestedCarrierClauses,omitempty"`

	// ShippingInstructionsReference The identifier for a `Shipping Instructions` provided by the carrier for system purposes.
	ShippingInstructionsReference *string `json:"shippingInstructionsReference,omitempty"`

	// ShippingInstructionsStatus The status of the `Shipping Instructions`. Possible values are:
	// - `RECEIVED` (Shipping Instructions has been received)
	// - `PENDING_UPDATE` (An update is required to the Shipping Instructions)
	// - `COMPLETED` (The Shipping Instructions can no longer be modified - the related Transport Document has been surrendered for delivery)
	ShippingInstructionsStatus string `json:"shippingInstructionsStatus"`

	// TransportDocumentReference A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.
	TransportDocumentReference *string `json:"transportDocumentReference,omitempty"`

	// TransportDocumentTypeCode Specifies the type of the transport document
	// - `BOL` (Bill of Lading)
	// - `SWB` (Sea Waybill)
	TransportDocumentTypeCode ShippingInstructionsTransportDocumentTypeCode `json:"transportDocumentTypeCode"`

	// UpdatedShippingInstructionsStatus The status of the latest update to the `Shipping Instructions`. If no update has been requested - then this field is empty. Possible values are:
	// - `UPDATE_RECEIVED` (An update to a Shipping Instructions is waiting to be processed)
	// - `UPDATE_CONFIRMED` (An update to a Shipping Instructions has been confirmed)
	// - `UPDATE_CANCELLED` (An update to a Shipping Instructions is discontinued by consumer)
	// - `UPDATE_DECLINED` (An update to a Shipping Instructions is discontinued by provider)
	UpdatedShippingInstructionsStatus *string `json:"updatedShippingInstructionsStatus,omitempty"`

	// UtilizedTransportEquipments A list of `Utilized Transport Equipments` describing the equipment being used.
	UtilizedTransportEquipments []UtilizedTransportEquipmentShipper `json:"utilizedTransportEquipments"`
}

// ShippingInstructionsFreightPaymentTermCode An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
//
// - `PRE` (Prepaid)
// - `COL` (Collect)
type ShippingInstructionsFreightPaymentTermCode string

// ShippingInstructionsTransportDocumentTypeCode Specifies the type of the transport document
// - `BOL` (Bill of Lading)
// - `SWB` (Sea Waybill)
type ShippingInstructionsTransportDocumentTypeCode string

// ShippingInstructionsData `Shipping Instructions` specific properties for the `Notification`
type ShippingInstructionsData struct {
	// Feedbacks Feedback that can be provided includes, but is not limited to:
	// - unsupported properties
	// - changed values
	// - removed properties
	// - general information
	Feedbacks *[]Feedback `json:"feedbacks,omitempty"`

	// ShippingInstructions This property contains the shippingInstructions in case the subscriber is subscribing to the `Full State Transfer` of the Shipping Instructions.
	//
	// In case the subscriber does not subscribe to the `Full State Transfer` of the Shipping Instructions then the content in this property can be ignored.
	ShippingInstructions *ShippingInstructionsFullNotification `json:"shippingInstructions,omitempty"`

	// ShippingInstructionsReference The identifier for a `Shipping Instructions` provided by the carrier for system purposes.
	//
	// **Condition:** `shippingInstructionsReference` and/or `transportDocumentReference` is required to provide
	ShippingInstructionsReference *string `json:"shippingInstructionsReference,omitempty"`

	// ShippingInstructionsStatus The status of the `Shipping Instructions`. Possible values are:
	//
	// - `RECEIVED` (Shipping Instructions has been received)
	// - `PENDING_UPDATE` (An update is required to the Shipping Instructions)
	// - `COMPLETED` (The Shipping Instructions can no longer be modified - the related Transport Document has been surrendered for delivery)
	ShippingInstructionsStatus string `json:"shippingInstructionsStatus"`

	// TransportDocumentReference A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.
	//
	// **Condition:** `shippingInstructionsReference` and/or `transportDocumentReference` is required to provide
	TransportDocumentReference *string `json:"transportDocumentReference,omitempty"`

	// UpdatedShippingInstructions This property contains the updated shipping instructions in case:
	//   - an update is currently active
	//   - the subscriber is subscribing to the `Full State Transfer` of the Shipping Instructions
	//
	// In case the subscriber does not subscribe to the `Full State Transfer` of the Shipping Instructions or no update is active - then the content in this property can be ignored.
	UpdatedShippingInstructions *UpdatedShippingInstructionsFullNotification `json:"updatedShippingInstructions,omitempty"`

	// UpdatedShippingInstructionsStatus The status of latest update to the `Shipping Instructions`. If no update has been requested - then this property is empty. Possible values are:
	//
	// - `UPDATE_RECEIVED` (An update to a Shipping Instructions has been received and is awaiting to be processed)
	// - `UPDATE_CONFIRMED` (Update is confirmed)
	// - `UPDATE_CANCELLED` (An update to a Shipping Instructions is discontinued by consumer)
	// - `UPDATE_DECLINED` (An update to a Shipping Instructions is discontinued by provider)
	UpdatedShippingInstructionsStatus *string `json:"updatedShippingInstructionsStatus,omitempty"`
}

// ShippingInstructionsFullNotification The `Shipping Instructions` as provided by the Shipper.
type ShippingInstructionsFullNotification = ShippingInstructions

// ShippingInstructionsNotification `CloudEvent` specific properties for the `Notification`.
type ShippingInstructionsNotification struct {
	// Data `Shipping Instructions` specific properties for the `Notification`
	Data ShippingInstructionsData `json:"data"`

	// Datacontenttype Content type of `data` value. This attribute enables `data` to carry any type of content, whereby format and encoding might differ from that of the chosen event format. For example, an event rendered using the [JSON envelope](formats/json-format.md#3-envelope) format might carry an XML payload in `data`, and the consumer is informed by this attribute being set to "application/xml". The rules for how `data` content is rendered for different `datacontenttype` values are defined in the event format specifications; for example, the JSON event format defines the relationship in [section 3.1](formats/json-format.md#31-handling-of-data).
	//
	// For some binary mode protocol bindings, this field is directly mapped to the respective protocol's content-type metadata property. Normative rules for the binary mode and the content-type metadata mapping can be found in the respective protocol.
	//
	// In some event formats the `datacontenttype` attribute MAY be omitted. For example, if a JSON format event has no `datacontenttype` attribute, then it is implied that the `data` is a JSON value conforming to the "application/json" media type. In other words: a JSON-format event with no `datacontenttype` is exactly equivalent to one with `datacontenttype="application/json"`.
	//
	// When translating an event message with no `datacontenttype` attribute to a different format or protocol binding, the target `datacontenttype` SHOULD be set explicitly to the implied `datacontenttype` of the source.
	Datacontenttype ShippingInstructionsNotificationDatacontenttype `json:"datacontenttype"`

	// Id Identifies the event. Producers MUST ensure that `source` + `id` is unique for each distinct event. If a duplicate event is re-sent (e.g. due to a network error) it MAY have the same `id`. Consumers MAY assume that Events with identical `source` and `id` are duplicates.
	Id string `json:"id"`

	// Source Identifies the context in which an event happened. Often this will include information such as the type of the event source, the organization publishing the event or the process that produced the event. The exact syntax and semantics behind the data encoded in the URI is defined by the event producer.
	//
	// Producers MUST ensure that `source` + `id` is unique for each distinct event.
	//
	// An application MAY assign a unique `source` to each distinct producer, which makes it easy to produce unique IDs since no other producer will have the same source. The application MAY use UUIDs, URNs, DNS authorities or an application-specific scheme to create unique `source` identifiers.
	//
	// A source MAY include more than one producer. In that case the producers MUST collaborate to ensure that `source` + `id` is unique for each distinct event.
	Source string `json:"source"`

	// Specversion The version of the CloudEvents specification which the event uses. This enables the interpretation of the context. Compliant event producers MUST use a value of `1.0` when referring to this version of the specification.
	//
	// Currently, this attribute will only have the 'major' and 'minor' version numbers included in it. This allows for 'patch' changes to the specification to be made without changing this property's value in the serialization. Note: for 'release candidate' releases a suffix might be used for testing purposes.
	Specversion ShippingInstructionsNotificationSpecversion `json:"specversion"`

	// SubscriptionReference The reference of the subscription that has triggered this event
	SubscriptionReference string `json:"subscriptionReference"`

	// Time Timestamp of when the occurrence happened. If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer, however all producers for the same `source` MUST be consistent in this respect. In other words, either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used.
	Time time.Time `json:"time"`

	// Type This attribute contains a value describing the type of event related to the originating occurrence. Often this attribute is used for routing, observability, policy enforcement, etc. The format of this is producer defined and might include information such as the version of the type - see [Versioning of CloudEvents in the Primer](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/primer.md#versioning-of-cloudevents) for more information.
	Type ShippingInstructionsNotificationType `json:"type"`
}

// ShippingInstructionsNotificationDatacontenttype Content type of `data` value. This attribute enables `data` to carry any type of content, whereby format and encoding might differ from that of the chosen event format. For example, an event rendered using the [JSON envelope](formats/json-format.md#3-envelope) format might carry an XML payload in `data`, and the consumer is informed by this attribute being set to "application/xml". The rules for how `data` content is rendered for different `datacontenttype` values are defined in the event format specifications; for example, the JSON event format defines the relationship in [section 3.1](formats/json-format.md#31-handling-of-data).
//
// For some binary mode protocol bindings, this field is directly mapped to the respective protocol's content-type metadata property. Normative rules for the binary mode and the content-type metadata mapping can be found in the respective protocol.
//
// In some event formats the `datacontenttype` attribute MAY be omitted. For example, if a JSON format event has no `datacontenttype` attribute, then it is implied that the `data` is a JSON value conforming to the "application/json" media type. In other words: a JSON-format event with no `datacontenttype` is exactly equivalent to one with `datacontenttype="application/json"`.
//
// When translating an event message with no `datacontenttype` attribute to a different format or protocol binding, the target `datacontenttype` SHOULD be set explicitly to the implied `datacontenttype` of the source.
type ShippingInstructionsNotificationDatacontenttype string

// ShippingInstructionsNotificationSpecversion The version of the CloudEvents specification which the event uses. This enables the interpretation of the context. Compliant event producers MUST use a value of `1.0` when referring to this version of the specification.
//
// Currently, this attribute will only have the 'major' and 'minor' version numbers included in it. This allows for 'patch' changes to the specification to be made without changing this property's value in the serialization. Note: for 'release candidate' releases a suffix might be used for testing purposes.
type ShippingInstructionsNotificationSpecversion string

// ShippingInstructionsNotificationType This attribute contains a value describing the type of event related to the originating occurrence. Often this attribute is used for routing, observability, policy enforcement, etc. The format of this is producer defined and might include information such as the version of the type - see [Versioning of CloudEvents in the Primer](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/primer.md#versioning-of-cloudevents) for more information.
type ShippingInstructionsNotificationType string

// TareWeight The weight of an empty container (gross container weight).
type TareWeight struct {
	// Unit The unit of measure which can be expressed in imperial or metric terms
	// - `KGM` (Kilograms)
	// - `LBR` (Pounds)
	Unit TareWeightUnit `json:"unit"`

	// Value The weight of an empty container (gross container weight).
	Value float32 `json:"value"`
}

// TareWeightUnit The unit of measure which can be expressed in imperial or metric terms
// - `KGM` (Kilograms)
// - `LBR` (Pounds)
type TareWeightUnit string

// TaxLegalReference Reference that uniquely identifies a party for tax and/or legal purposes in accordance with the relevant jurisdiction.
//
// A small list of **potential** examples:
//
// | Type  | Country | Description |
// |-------|:-------:|-------------|
// |EORI|NL|Economic Operators Registration and Identification|
// |PAN|IN|Goods and Services Tax Identification Number in India|
// |GSTIN|IN|Goods and Services Tax Identification Number in India|
// |IEC|IN|Importer-Exported Code in India|
// |RUC|EC|Registro Único del Contribuyente in Ecuador|
// |RUC|PE|Registro Único del Contribuyente in Peru|
// |NIF|MG|Numéro d'Identification Fiscal in Madagascar|
// |NIF|DZ|Numéro d'Identification Fiscal in Algeria|
type TaxLegalReference struct {
	// CountryCode The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
	CountryCode string `json:"countryCode"`

	// Type The reference type code as defined by the relevant tax and/or legal authority.
	Type string `json:"type"`

	// Value The value of the `taxLegalReference`
	Value string `json:"value"`
}

// TransportDocument The document that governs the terms of carriage between shipper and carrier for maritime transportation. Two distinct types of transport documents exist:
// - Bill of Lading
// - Sea Waybill.
type TransportDocument struct {
	// CargoMovementTypeAtDestination Refers to the shipment term at the **unloading** of the cargo out of the container. Possible values are:
	//
	// - `FCL` (Full Container Load)
	// - `LCL` (Less than Container Load)
	CargoMovementTypeAtDestination string `json:"cargoMovementTypeAtDestination"`

	// CargoMovementTypeAtOrigin Refers to the shipment term at the **loading** of the cargo into the container. Possible values are:
	//
	// - `FCL` (Full Container Load)
	// - `LCL` (Less than Container Load)
	CargoMovementTypeAtOrigin string `json:"cargoMovementTypeAtOrigin"`

	// CarrierClauses Additional clauses for a specific shipment added by the carrier to the Bill of Lading, subject to local rules / guidelines or certain mandatory information required to be shared with the customer.
	CarrierClauses *[]string `json:"carrierClauses,omitempty"`

	// CarrierCode The `SCAC` code (provided by [NMFTA](https://nmfta.org/scac/)) or `SMDG` code (provided by [SMDG](https://smdg.org/documents/smdg-code-lists/smdg-liner-code-list/)) of the issuing carrier of the `Transport Document`. `carrierCodeListProvider` defines which list the `carrierCode` is based upon.
	CarrierCode string `json:"carrierCode"`

	// CarrierCodeListProvider The code list provider for the `carrierCode`. Possible values are:
	// - `SMDG` (Ship Message Design Group)
	// - `NMFTA` (National Motor Freight Traffic Association)
	CarrierCodeListProvider TransportDocumentCarrierCodeListProvider `json:"carrierCodeListProvider"`

	// Charges A list of `Charges`
	Charges *[]Charge `json:"charges,omitempty"`

	// ConsignmentItems A list of `ConsignmentItems`
	ConsignmentItems []ConsignmentItem `json:"consignmentItems"`

	// ContractQuotationReference Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference.
	ContractQuotationReference *string `json:"contractQuotationReference,omitempty"`

	// CustomsReferences A list of `Customs references`
	CustomsReferences *[]CustomsReference `json:"customsReferences,omitempty"`

	// DeclaredValue The value of the cargo that the shipper declares in order to avoid the carrier's limitation of liability and "Ad Valorem" freight, i.e., freight which is calculated based on the value of the goods declared by the shipper.
	//
	// **Condition:** Included in the transport document upon customer request. If customers want the value to show, evidence is required, and customers need to approve additional insurance fee charge from the carrier (very exceptional).
	DeclaredValue *float32 `json:"declaredValue,omitempty"`

	// DeclaredValueCurrency The currency used for the declared value, using the 3-character code defined by [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html).
	//
	// **Condition:** Mandatory if `declaredValue` is provided. If `declaredValue` is not provided, this field must be empty.
	DeclaredValueCurrency *string `json:"declaredValueCurrency,omitempty"`

	// DeliveryTypeAtDestination Indicates the type of service offered at `Destination`. The options are:
	//
	// - `CY` (Container yard (incl. rail ramp))
	// - `SD` (Store Door)
	// - `CFS` (Container Freight Station)
	DeliveryTypeAtDestination TransportDocumentDeliveryTypeAtDestination `json:"deliveryTypeAtDestination"`

	// DisplayedNameForPlaceOfDelivery The name to be used in order to specify how the `Place of Delivery` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedNameForPlaceOfDelivery *[]string `json:"displayedNameForPlaceOfDelivery,omitempty"`

	// DisplayedNameForPlaceOfReceipt The name to be used in order to specify how the `Place of Receipt` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedNameForPlaceOfReceipt *[]string `json:"displayedNameForPlaceOfReceipt,omitempty"`

	// DisplayedNameForPortOfDischarge The name to be used in order to specify how the `Port of Discharge` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedNameForPortOfDischarge *[]string `json:"displayedNameForPortOfDischarge,omitempty"`

	// DisplayedNameForPortOfLoad The name to be used in order to specify how the `Port of Load` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedNameForPortOfLoad *[]string `json:"displayedNameForPortOfLoad,omitempty"`

	// DisplayedShippedOnBoardReceivedForShipment The text to be displayed on the `Transport Document` as evidence that the goods have been received for shipment or shipped on board.
	DisplayedShippedOnBoardReceivedForShipment *string `json:"displayedShippedOnBoardReceivedForShipment,omitempty"`

	// DocumentParties All `Parties` with associated roles.
	DocumentParties DocumentParties `json:"documentParties"`

	// ExportLicense `Export License` requirements
	//
	// **Condition:** Included if the property is provided in the `Shipping Instructions.`
	ExportLicense *ExportLicense `json:"exportLicense,omitempty"`

	// FreightPaymentTermCode An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
	//
	// - `PRE` (Prepaid)
	// - `COL` (Collect)
	FreightPaymentTermCode *TransportDocumentFreightPaymentTermCode `json:"freightPaymentTermCode,omitempty"`

	// ImportLicense `Import License` requirements
	//
	// **Condition:** Included if the property is provided in the `Shipping Instructions.`
	ImportLicense *ImportLicense `json:"importLicense,omitempty"`

	// InvoicePayableAt Location where payment of ocean freight and charges for the main transport will take place by the customer.
	//
	// The location can be provided as a `UN Location Code` or as a fallback - a `freeText` field
	InvoicePayableAt InvoicePayableAt `json:"invoicePayableAt"`

	// IsElectronic An indicator whether the transport document is electronically transferred.
	IsElectronic bool `json:"isElectronic"`

	// IsShippedOnBoardType Specifies whether the Transport Document is a received for shipment, or shipped on board.
	IsShippedOnBoardType bool `json:"isShippedOnBoardType"`

	// IsToOrder Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).
	//
	// `isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).
	IsToOrder bool `json:"isToOrder"`

	// IssueDate Local date when the transport document has been issued.
	//
	// Can be omitted on draft transport documents, but must be provided when the document has been issued.
	IssueDate *openapi_types.Date `json:"issueDate,omitempty"`

	// NumberOfCopiesWithCharges The requested number of copies of the `Transport Document` to be issued by the carrier including charges.
	//
	// **Conditions:** The following table defines the conditions for the `numberOfCopiesWithCharges` property:
	// | Transport Document Type Code | Is Electronic | Meaning |
	// |-------|:-------:|-------|
	// |`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier with charges|
	// |`BOL`|`true`|Not applicable, there are no copies|
	// |`SWB`|`false`|Indicates that charges should be included in the `SWB` (pdf or other formats)|
	// |`SWB`|`true`|Indicates that charges should be included in the electronic `SWB`|
	NumberOfCopiesWithCharges *int32 `json:"numberOfCopiesWithCharges,omitempty"`

	// NumberOfCopiesWithoutCharges The requested number of copies of the `Transport Document` to be issued by the carrier **NOT** including charges.
	//
	// **Conditions:** The following table defines the conditions for the `numberOfCopiesWithoutCharges` property:
	// | Transport Document Type Code | Is Electronic | Meaning |
	// |-------|:-------:|-------|
	// |`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier without charges|
	// |`BOL`|`true`|Not applicable, there are no copies|
	// |`SWB`|`false`|Indicates that charges should NOT be included in the `SWB` (pdf or other formats)|
	// |`SWB`|`true`|Indicates that charges NOT should be included in the electronic `SWB`|
	NumberOfCopiesWithoutCharges *int32 `json:"numberOfCopiesWithoutCharges,omitempty"`

	// NumberOfOriginalsWithCharges Number of originals of the Bill of Lading that has been requested by the customer with charges.
	//
	// **Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)
	NumberOfOriginalsWithCharges *int32 `json:"numberOfOriginalsWithCharges,omitempty"`

	// NumberOfOriginalsWithoutCharges Number of originals of the Bill of Lading that has been requested by the customer without charges.
	//
	// **Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)
	NumberOfOriginalsWithoutCharges *int32 `json:"numberOfOriginalsWithoutCharges,omitempty"`

	// NumberOfRiderPages The number of additional pages required to contain the goods description on a transport document. Only applicable for physical transport documents.
	NumberOfRiderPages *int32 `json:"numberOfRiderPages,omitempty"`

	// PartyContactDetails The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.)
	PartyContactDetails []PartyContactDetail `json:"partyContactDetails"`

	// PlaceOfIssue An object to capture where the original Transport Document (`Bill of Lading`) will be issued.
	//
	// **Condition:** The location can be specified as one of `UN Location Code` or `CountryCode`, but not both.
	PlaceOfIssue *PlaceOfIssue `json:"placeOfIssue,omitempty"`

	// ReceiptTypeAtOrigin Indicates the type of service offered at `Origin`. The options are:
	// - `CY` (Container yard (incl. rail ramp))
	// - `SD` (Store Door)
	// - `CFS` (Container Freight Station)
	ReceiptTypeAtOrigin TransportDocumentReceiptTypeAtOrigin `json:"receiptTypeAtOrigin"`

	// ReceivedForShipmentDate Date when the last container linked to the transport document is physically in the terminal (customers cleared against the intended vessel).
	//
	// When provided on a transport document, the transportDocument is a `Received For Shipment` B/L.
	//
	// Exactly one of `shippedOnBoard` and `receiveForShipmentDate` must be provided on an issued B/L.
	ReceivedForShipmentDate *openapi_types.Date `json:"receivedForShipmentDate,omitempty"`

	// References A list of `References`
	References *[]Reference `json:"references,omitempty"`

	// ServiceContractReference Reference number for agreement between shipper and carrier, which optionally includes a certain minimum quantity commitment (usually referred as “MQC”) of cargo that the shipper commits to over a fixed period, and the carrier commits to a certain rate or rate schedule.
	ServiceContractReference *string `json:"serviceContractReference,omitempty"`

	// ShippedOnBoardDate Date when the last container that is linked to the transport document is physically loaded onboard the vessel indicated on the transport document.
	//
	// When provided on a transport document, the transportDocument is a `Shipped On Board` B/L.
	//
	// Exactly one of `shippedOnBoard` and `receiveForShipmentDate` must be provided on an issued B/L.
	ShippedOnBoardDate *openapi_types.Date `json:"shippedOnBoardDate,omitempty"`

	// ShippingInstructionsReference The identifier for a `Shipping Instructions` provided by the carrier for system purposes.
	ShippingInstructionsReference *string `json:"shippingInstructionsReference,omitempty"`

	// TermsAndConditions Carrier terms and conditions of transport.
	TermsAndConditions string `json:"termsAndConditions"`

	// TransportDocumentReference A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.
	TransportDocumentReference string `json:"transportDocumentReference"`

	// TransportDocumentStatus The status of the `Transport Document`. Possible values are:
	// - DRAFT
	// - APPROVED
	// - ISSUED
	// - PENDING_SURRENDER_FOR_AMENDMENT
	// - SURRENDERED_FOR_AMENDMENT
	// - PENDING_SURRENDER_FOR_DELIVERY
	// - SURRENDERED_FOR_DELIVERY
	// - VOIDED
	TransportDocumentStatus string `json:"transportDocumentStatus"`

	// TransportDocumentSubReference Additional reference that can be optionally used alongside the `transportDocumentReference` in order to distinguish between versions of the same `Transport Document`.
	TransportDocumentSubReference *string `json:"transportDocumentSubReference,omitempty"`

	// TransportDocumentTypeCode Specifies the type of the transport document
	// - `BOL` (Bill of Lading)
	// - `SWB` (Sea Waybill)
	TransportDocumentTypeCode TransportDocumentTransportDocumentTypeCode `json:"transportDocumentTypeCode"`
	Transports                Transports                                 `json:"transports"`

	// UtilizedTransportEquipments A list of `Utilized Transport Equipments` describing the equipment being used.
	UtilizedTransportEquipments []UtilizedTransportEquipment `json:"utilizedTransportEquipments"`
}

// TransportDocumentCarrierCodeListProvider The code list provider for the `carrierCode`. Possible values are:
// - `SMDG` (Ship Message Design Group)
// - `NMFTA` (National Motor Freight Traffic Association)
type TransportDocumentCarrierCodeListProvider string

// TransportDocumentDeliveryTypeAtDestination Indicates the type of service offered at `Destination`. The options are:
//
// - `CY` (Container yard (incl. rail ramp))
// - `SD` (Store Door)
// - `CFS` (Container Freight Station)
type TransportDocumentDeliveryTypeAtDestination string

// TransportDocumentFreightPaymentTermCode An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
//
// - `PRE` (Prepaid)
// - `COL` (Collect)
type TransportDocumentFreightPaymentTermCode string

// TransportDocumentReceiptTypeAtOrigin Indicates the type of service offered at `Origin`. The options are:
// - `CY` (Container yard (incl. rail ramp))
// - `SD` (Store Door)
// - `CFS` (Container Freight Station)
type TransportDocumentReceiptTypeAtOrigin string

// TransportDocumentTransportDocumentTypeCode Specifies the type of the transport document
// - `BOL` (Bill of Lading)
// - `SWB` (Sea Waybill)
type TransportDocumentTransportDocumentTypeCode string

// TransportDocumentData `Transport Document` specific properties for the `Notification`
type TransportDocumentData struct {
	// Feedbacks Feedback that can be provided includes, but is not limited to:
	// - unsupported properties
	// - changed values
	// - removed properties
	// - general information
	Feedbacks *[]Feedback `json:"feedbacks,omitempty"`

	// ShippingInstructionsReference The identifier for a `Shipping Instructions` provided by the carrier for system purposes.
	ShippingInstructionsReference *string `json:"shippingInstructionsReference,omitempty"`

	// TransportDocument This property contains the `transportDocument` in case the subscriber is subscribing to the `Full State Transfer` of the `Transport Document`.
	//
	// In case the subscriber does not subscribe to the `Full State Transfer` of the `Transport Document` then the content in this property can be ignored.
	//
	// **Condition:** Once the `Transport Document` has been Issued (`transportDocumentStatus='ISSUED'`) - the order of **ALL** lists/arrays in this property **MUST** be aligned with the order of the
	//
	//     GET /v3/transport-documents/{transportDocumentReference}
	//
	// payload implemented by the provider of the **Shipping Instructions and Transport Document** API.
	TransportDocument *TransportDocumentFullNotification `json:"transportDocument,omitempty"`

	// TransportDocumentReference A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.
	TransportDocumentReference string `json:"transportDocumentReference"`

	// TransportDocumentStatus The status of the `Transport Document`. Possible values are:
	//
	// - `DRAFT` (Transport Document is Drafted)
	// - `APPROVED` (Transport Document has been Approved by consumer)
	// - `ISSUED` (Transport Document has been Issued by provider)
	// - `PENDING_SURRENDER_FOR_AMENDMENT` (Transport Document is Pending for Surrender for an Amendment)
	// - `SURRENDER_FOR_AMENDMENT` (Transport Document Surrendered for an Amendment)
	// - `VOID` (the Transport Document has been Voided)
	// - `PENDING_SURRENDER_FOR_DELIVERY` (Transport Document pending surrender for Delivery)
	// - `SURRENDER_FOR_DELIVERY` (Transport Document surrendered for Delivery)
	TransportDocumentStatus string `json:"transportDocumentStatus"`
}

// TransportDocumentFullNotification The document that governs the terms of carriage between shipper and carrier for maritime transportation. Two distinct types of transport documents exist:
// - Bill of Lading
// - Sea Waybill.
type TransportDocumentFullNotification = TransportDocument

// TransportDocumentNotification `CloudEvent` specific properties for the `Notification`.
type TransportDocumentNotification struct {
	// Data `Transport Document` specific properties for the `Notification`
	Data TransportDocumentData `json:"data"`

	// Datacontenttype Content type of `data` value. This attribute enables `data` to carry any type of content, whereby format and encoding might differ from that of the chosen event format. For example, an event rendered using the [JSON envelope](formats/json-format.md#3-envelope) format might carry an XML payload in `data`, and the consumer is informed by this attribute being set to "application/xml". The rules for how `data` content is rendered for different `datacontenttype` values are defined in the event format specifications; for example, the JSON event format defines the relationship in [section 3.1](formats/json-format.md#31-handling-of-data).
	//
	// For some binary mode protocol bindings, this field is directly mapped to the respective protocol's content-type metadata property. Normative rules for the binary mode and the content-type metadata mapping can be found in the respective protocol.
	//
	// In some event formats the `datacontenttype` attribute MAY be omitted. For example, if a JSON format event has no`datacontenttype` attribute, then it is implied that the `data` is a JSON value conforming to the "application/json" media type. In other words: a JSON-format event with no `datacontenttype` is exactly equivalent to one with `datacontenttype="application/json"`.
	//
	// When translating an event message with no `datacontenttype` attribute to a different format or protocol binding, the target `datacontenttype` SHOULD be set explicitly to the implied `datacontenttype` of the source.
	Datacontenttype TransportDocumentNotificationDatacontenttype `json:"datacontenttype"`

	// Id Identifies the event. Producers MUST ensure that `source` + `id` is unique for each distinct event. If a duplicate event is re-sent (e.g. due to a network error) it MAY have the same `id`. Consumers MAY assume that Events with identical `source` and `id` are duplicates.
	Id string `json:"id"`

	// Source Identifies the context in which an event happened. Often this will include information such as the type of the event source, the organization publishing the event or the process that produced the event. The exact syntax and semantics behind the data encoded in the URI is defined by the event producer.
	//
	// Producers MUST ensure that `source` + `id` is unique for each distinct event.
	//
	// An application MAY assign a unique `source` to each distinct producer, which makes it easy to produce unique IDs since no other producer will have the same source. The application MAY use UUIDs, URNs, DNS authorities or an application-specific scheme to create unique `source` identifiers.
	//
	// A source MAY include more than one producer. In that case the producers MUST collaborate to ensure that `source` + `id` is unique for each distinct event.
	Source string `json:"source"`

	// Specversion The version of the CloudEvents specification which the event uses. This enables the interpretation of the context. Compliant event producers MUST use a value of `1.0` when referring to this version of the specification.
	//
	// Currently, this attribute will only have the 'major' and 'minor' version numbers included in it. This allows for 'patch' changes to the specification to be made without changing this property's value in the serialization. Note: for 'release candidate' releases a suffix might be used for testing purposes.
	Specversion TransportDocumentNotificationSpecversion `json:"specversion"`

	// SubscriptionReference The reference of the subscription that has triggered this event
	SubscriptionReference string `json:"subscriptionReference"`

	// Time Timestamp of when the occurrence happened. If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer, however all producers for the same `source` MUST be consistent in this respect. In other words, either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used.
	Time time.Time `json:"time"`

	// Type This attribute contains a value describing the type of event related to the originating occurrence. Often this attribute is used for routing, observability, policy enforcement, etc. The format of this is producer defined and might include information such as the version of the type - see [Versioning of CloudEvents in the Primer](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/primer.md#versioning-of-cloudevents) for more information.
	Type TransportDocumentNotificationType `json:"type"`
}

// TransportDocumentNotificationDatacontenttype Content type of `data` value. This attribute enables `data` to carry any type of content, whereby format and encoding might differ from that of the chosen event format. For example, an event rendered using the [JSON envelope](formats/json-format.md#3-envelope) format might carry an XML payload in `data`, and the consumer is informed by this attribute being set to "application/xml". The rules for how `data` content is rendered for different `datacontenttype` values are defined in the event format specifications; for example, the JSON event format defines the relationship in [section 3.1](formats/json-format.md#31-handling-of-data).
//
// For some binary mode protocol bindings, this field is directly mapped to the respective protocol's content-type metadata property. Normative rules for the binary mode and the content-type metadata mapping can be found in the respective protocol.
//
// In some event formats the `datacontenttype` attribute MAY be omitted. For example, if a JSON format event has no`datacontenttype` attribute, then it is implied that the `data` is a JSON value conforming to the "application/json" media type. In other words: a JSON-format event with no `datacontenttype` is exactly equivalent to one with `datacontenttype="application/json"`.
//
// When translating an event message with no `datacontenttype` attribute to a different format or protocol binding, the target `datacontenttype` SHOULD be set explicitly to the implied `datacontenttype` of the source.
type TransportDocumentNotificationDatacontenttype string

// TransportDocumentNotificationSpecversion The version of the CloudEvents specification which the event uses. This enables the interpretation of the context. Compliant event producers MUST use a value of `1.0` when referring to this version of the specification.
//
// Currently, this attribute will only have the 'major' and 'minor' version numbers included in it. This allows for 'patch' changes to the specification to be made without changing this property's value in the serialization. Note: for 'release candidate' releases a suffix might be used for testing purposes.
type TransportDocumentNotificationSpecversion string

// TransportDocumentNotificationType This attribute contains a value describing the type of event related to the originating occurrence. Often this attribute is used for routing, observability, policy enforcement, etc. The format of this is producer defined and might include information such as the version of the type - see [Versioning of CloudEvents in the Primer](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/primer.md#versioning-of-cloudevents) for more information.
type TransportDocumentNotificationType string

// Transports defines model for Transports.
type Transports struct {
	// OnCarriageBy Mode of transportation for on-carriage when transport from the port of discharge is organized by the carrier. If this attributes is populated, then a Place of Delivery must also be defined. The currently supported values include:
	// - `VESSEL` (Vessel)
	// - `RAIL` (Rail)
	// - `TRUCK` (Truck)
	// - `BARGE` (Barge)
	// - `MULTIMODAL` (if multiple modes are used)
	OnCarriageBy *string `json:"onCarriageBy,omitempty"`

	// OnwardInlandRouting An object to capture `Onward Inland Routing` location specified as the end location of the inland movement that takes place after the container(s) being delivered to the port of discharge/place of delivery for account and risk of merchant (merchant haulage).
	//
	// The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` or an `Address`.
	//
	// **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.
	OnwardInlandRouting *OnwardInlandRouting `json:"onwardInlandRouting,omitempty"`

	// PlaceOfDelivery An object to capture `Place of Delivery` location specified as: the location where the cargo is handed over to the consignee, or his agent, by the shipping line and where responsibility of the shipping line ceases.
	//
	// **Condition:** Only when onward transport is done by the carrier
	//
	// The location can be specified in **any** of the following ways: `UN Location Code`, `Facility`, `Address` or a `Geo Coordinate`.
	//
	// **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.
	PlaceOfDelivery *PlaceOfDelivery `json:"placeOfDelivery,omitempty"`

	// PlaceOfReceipt An object to capture `Place of Receipt` location specified as: the location where the cargo is handed over by the shipper, or his agent, to the shipping line. This indicates the point at which the shipping line takes on responsibility for carriage of the container.
	//
	// **Condition:** Only when pre-carriage is done by the carrier.
	//
	// The location can be specified in **any** of the following ways: `UN Location Code`, `Facility`, `Address` or a `Geo Coordinate`.
	//
	// **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.
	PlaceOfReceipt *PlaceOfReceipt `json:"placeOfReceipt,omitempty"`

	// PlannedArrivalDate The planned date of arrival.
	PlannedArrivalDate openapi_types.Date `json:"plannedArrivalDate"`

	// PlannedDepartureDate The planned date of departure.
	PlannedDepartureDate openapi_types.Date `json:"plannedDepartureDate"`

	// PortOfDischarge An object to capture `Port of Discharge` location specified as: the location where the cargo is discharged from the last sea-going vessel.
	//
	// The location can be specified in **any** of the following ways: `UN Location Code` or `City and Country`.
	//
	// **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `UN Location Code` and as a `City and Country`) that both ways point to the same location.
	PortOfDischarge PortOfDischarge `json:"portOfDischarge"`

	// PortOfLoading An object to capture `Port of Loading` location specified as: the location where the cargo is loaded onto a first sea-going vessel for water transportation.
	//
	// The location can be specified in **any** of the following ways: `UN Location Code` or `City and Country`.
	//
	// **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `UN Location Code` and as a `City and Country`) that both ways point to the same location.
	PortOfLoading PortOfLoading `json:"portOfLoading"`

	// PreCarriageBy Mode of transportation for pre-carriage when transport to the port of loading is organized by the carrier. If this attributes is populated, then a Place of Receipt must also be defined. The currently supported values include:
	// - `VESSEL` (Vessel)
	// - `RAIL` (Rail)
	// - `TRUCK` (Truck)
	// - `BARGE` (Barge)
	// - `MULTIMODAL` (if multiple modes are used)
	PreCarriageBy *string `json:"preCarriageBy,omitempty"`

	// VesselVoyages Allow the possibility to include multiple vessels/voyages in the `Transport Document` (e.g. the first sea going vessel and the mother vessel). At least one is mandatory to provide.
	VesselVoyages []VesselVoyage `json:"vesselVoyages"`
}

// UTEquipment To be used for SoC (Shipper owned Containers). If `isShipperOwned` is true then the equipment used needs to be specified
type UTEquipment struct {
	// Equipment Used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' DRY Freight Container, but several different versions exist.
	Equipment RequiredEquipment `json:"equipment"`

	// IsShipperOwned Indicates whether the container is shipper owned (SOC).
	IsShipperOwned bool `json:"isShipperOwned"`
}

// UTEquipmentReference To be used when referring to carrier owned containers (`isShipperOwned` is false). In this case it is only necessary to provide `equipmentReference`
type UTEquipmentReference struct {
	// EquipmentReference The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
	// According to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).
	//
	// If a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.
	EquipmentReference string `json:"equipmentReference"`

	// IsShipperOwned Indicates whether the container is shipper owned (SOC).
	IsShipperOwned bool `json:"isShipperOwned"`
}

// UpdateShippingInstructions The `Shipping Instructions` to update.
type UpdateShippingInstructions struct {
	// AdvanceManifestFilings A list of `Advance Manifest Filings` specified by the Shipper to indicate whom is to do the Filing
	AdvanceManifestFilings *[]AdvanceManifestFiling `json:"advanceManifestFilings,omitempty"`

	// ConsignmentItems A list of `ConsignmentItems`
	ConsignmentItems []ConsignmentItemShipper `json:"consignmentItems"`

	// CustomsReferences A list of `Customs references`
	CustomsReferences *[]CustomsReference `json:"customsReferences,omitempty"`

	// DestinationChargesPaymentTerm An indicator of whether destination charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
	DestinationChargesPaymentTerm *DestinationChargesPaymentTerm `json:"destinationChargesPaymentTerm,omitempty"`

	// DisplayedNameForPlaceOfDelivery The name to be used in order to specify how the `Place of Delivery` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedNameForPlaceOfDelivery *[]string `json:"displayedNameForPlaceOfDelivery,omitempty"`

	// DisplayedNameForPlaceOfReceipt The name to be used in order to specify how the `Place of Receipt` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedNameForPlaceOfReceipt *[]string `json:"displayedNameForPlaceOfReceipt,omitempty"`

	// DisplayedNameForPortOfDischarge The name to be used in order to specify how the `Port of Discharge` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedNameForPortOfDischarge *[]string `json:"displayedNameForPortOfDischarge,omitempty"`

	// DisplayedNameForPortOfLoad The name to be used in order to specify how the `Port of Load` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	DisplayedNameForPortOfLoad *[]string `json:"displayedNameForPortOfLoad,omitempty"`

	// DocumentParties All `Parties` with associated roles.
	//
	// **Condition:** `Buyer` and `Seller` are mandatory if `isCargoDeliveredInICS2Zone=true` **and** `advancedManifestFilingPerformedBy=CARRIER` and `isHouseBillOfLadingsIssued=false`
	DocumentParties DocumentPartiesShippingInstructions `json:"documentParties"`

	// ExportLicense `Export License` requirements
	//
	// **Condition:** Subject to local customs requirements and commodity.
	ExportLicense *ExportLicenseShipper `json:"exportLicense,omitempty"`

	// FreightPaymentTermCode An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
	//
	// - `PRE` (Prepaid)
	// - `COL` (Collect)
	FreightPaymentTermCode UpdateShippingInstructionsFreightPaymentTermCode `json:"freightPaymentTermCode"`

	// HouseBillOfLadings A list of `House Bill of Ladings` specified by the Shipper.
	HouseBillOfLadings *[]HouseBillOfLading `json:"houseBillOfLadings,omitempty"`

	// ImportLicense `Import License` requirements
	//
	// **Condition:** Subject to local customs requirements and commodity.
	ImportLicense *ImportLicenseShipper `json:"importLicense,omitempty"`

	// InvoicePayableAt Location where payment of ocean freight and charges for the main transport will take place by the customer.
	//
	// The location must be provided as a `UN Location Code`
	InvoicePayableAt *InvoicePayableAtShippingInstructions `json:"invoicePayableAt,omitempty"`

	// IsCargoDeliveredInICS2Zone Indicates whether cargo is delivered to EU, Norway, Switzerland or Northern Ireland.
	IsCargoDeliveredInICS2Zone bool `json:"isCargoDeliveredInICS2Zone"`

	// IsCarriersAgentAtDestinationRequired Indicates whether the Carrier's agent at destination name, address and contact details should be included in the `Transport Document`.
	IsCarriersAgentAtDestinationRequired *bool `json:"isCarriersAgentAtDestinationRequired,omitempty"`

	// IsElectronic An indicator whether the transport document is electronically transferred.
	IsElectronic bool `json:"isElectronic"`

	// IsHouseBillOfLadingsIssued Indicates whether one or more `House Bill of Lading(s)` have been issued.
	//
	// **Condition:** Mandatory if `manifestTypeCode` is `ENS`
	IsHouseBillOfLadingsIssued *bool `json:"isHouseBillOfLadingsIssued,omitempty"`

	// IsShippedOnBoardType Specifies whether the Transport Document is a received for shipment, or shipped on board.
	IsShippedOnBoardType bool `json:"isShippedOnBoardType"`

	// IsToOrder Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).
	//
	// `isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).
	IsToOrder bool `json:"isToOrder"`

	// NumberOfCopiesWithCharges The requested number of copies of the `Transport Document` to be issued by the carrier including charges.
	//
	// **Conditions:** The following table defines the conditions for the `numberOfCopiesWithCharges` property:
	// | Transport Document Type Code | Is Electronic | Meaning |
	// |-------|:-------:|-------|
	// |`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier with charges|
	// |`BOL`|`true`|Not applicable, there are no copies|
	// |`SWB`|`false`|Indicates that charges should be included in the `SWB` (pdf or other formats)|
	// |`SWB`|`true`|Indicates that charges should be included in the electronic `SWB`|
	NumberOfCopiesWithCharges *int32 `json:"numberOfCopiesWithCharges,omitempty"`

	// NumberOfCopiesWithoutCharges The requested number of copies of the `Transport Document` to be issued by the carrier **NOT** including charges.
	//
	// **Conditions:** The following table defines the conditions for the `numberOfCopiesWithoutCharges` property:
	// | Transport Document Type Code | Is Electronic | Meaning |
	// |-------|:-------:|-------|
	// |`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier without charges|
	// |`BOL`|`true`|Not applicable, there are no copies|
	// |`SWB`|`false`|Indicates that charges should NOT be included in the `SWB` (pdf or other formats)|
	// |`SWB`|`true`|Indicates that charges NOT should be included in the electronic `SWB`|
	NumberOfCopiesWithoutCharges *int32 `json:"numberOfCopiesWithoutCharges,omitempty"`

	// NumberOfOriginalsWithCharges Number of originals of the Bill of Lading that has been requested by the customer with charges.
	//
	// **Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)
	NumberOfOriginalsWithCharges *int32 `json:"numberOfOriginalsWithCharges,omitempty"`

	// NumberOfOriginalsWithoutCharges Number of originals of the Bill of Lading that has been requested by the customer without charges.
	//
	// **Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)
	NumberOfOriginalsWithoutCharges *int32 `json:"numberOfOriginalsWithoutCharges,omitempty"`

	// OriginChargesPaymentTerm An indicator of whether origin charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
	OriginChargesPaymentTerm *OriginChargesPaymentTerm `json:"originChargesPaymentTerm,omitempty"`

	// PartyContactDetails The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.)
	PartyContactDetails []PartyContactDetail `json:"partyContactDetails"`

	// PlaceOfIssue An object to capture where the original Transport Document (`Bill of Lading`) will be issued.
	//
	// **Condition:** The location can be specified as one of `UN Location Code` or `CountryCode`, but not both.
	PlaceOfIssue *PlaceOfIssue `json:"placeOfIssue,omitempty"`

	// References A list of `References`
	References *[]Reference `json:"references,omitempty"`

	// RequestedCarrierCertificates Certificate(s) requested by the Shipper for the Carrier to include as part of the shipment documentation pack
	RequestedCarrierCertificates *[]string `json:"requestedCarrierCertificates,omitempty"`

	// RequestedCarrierClauses Clauses requested by the Shipper for the Carrier to include in the `Transport Document` `Carrier clauses`
	RequestedCarrierClauses *[]string `json:"requestedCarrierClauses,omitempty"`

	// ShippingInstructionsReference The identifier for a `Shipping Instructions` provided by the carrier for system purposes.
	ShippingInstructionsReference string `json:"shippingInstructionsReference"`

	// TransportDocumentTypeCode Specifies the type of the transport document
	// - `BOL` (Bill of Lading)
	// - `SWB` (Sea Waybill)
	TransportDocumentTypeCode UpdateShippingInstructionsTransportDocumentTypeCode `json:"transportDocumentTypeCode"`

	// UtilizedTransportEquipments A list of `Utilized Transport Equipments` describing the equipment being used.
	UtilizedTransportEquipments []UtilizedTransportEquipmentShipper `json:"utilizedTransportEquipments"`
}

// UpdateShippingInstructionsFreightPaymentTermCode An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
//
// - `PRE` (Prepaid)
// - `COL` (Collect)
type UpdateShippingInstructionsFreightPaymentTermCode string

// UpdateShippingInstructionsTransportDocumentTypeCode Specifies the type of the transport document
// - `BOL` (Bill of Lading)
// - `SWB` (Sea Waybill)
type UpdateShippingInstructionsTransportDocumentTypeCode string

// UpdatedShippingInstructionsFullNotification The `Shipping Instructions` as provided by the Shipper.
type UpdatedShippingInstructionsFullNotification = ShippingInstructions

// UtilizedTransportEquipment Specifies the container (`equipment`), the total `weight`, total `volume`, possible `ActiveReeferSettings`, `seals` and `references`
type UtilizedTransportEquipment struct {
	// ActiveReeferSettings The specifications for a Reefer equipment.
	//
	// **Condition:** Only applicable when `isNonOperatingReefer` is set to `false`
	ActiveReeferSettings *ActiveReeferSettings `json:"activeReeferSettings,omitempty"`

	// CustomsReferences A list of `Customs references`
	CustomsReferences *[]CustomsReference `json:"customsReferences,omitempty"`

	// Equipment Used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' DRY Freight Container, but several different versions exist.
	Equipment Equipment `json:"equipment"`

	// IsNonOperatingReefer If the equipment is a Reefer Container then setting this attribute will indicate that the container should be treated as a `DRY` container.
	//
	// **Condition:** Only applicable if `ISOEquipmentCode` shows a Reefer type.
	IsNonOperatingReefer *bool `json:"isNonOperatingReefer,omitempty"`

	// IsShipperOwned Indicates whether the container is shipper owned (SOC).
	IsShipperOwned bool `json:"isShipperOwned"`

	// References A list of `References`
	References *[]Reference `json:"references,omitempty"`

	// Seals A list of `Seals`
	Seals []Seal `json:"seals"`

	// ShippingMarks A list of the `ShippingMarks` applicable to this `UtilizedTransportEquipment`
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	ShippingMarks *[]string `json:"shippingMarks,omitempty"`
}

// UtilizedTransportEquipmentHBL Specifies the container (`Equipment`), `Seals` and `References`
type UtilizedTransportEquipmentHBL struct {
	// ISOEquipmentCode Unique code for the different equipment size and type used to transport commodities. The code can refer to one of ISO size type (e.g. 22G1) or ISO type group (e.g. 22GP) following the [ISO 6346](https://www.iso.org/standard/83558.html) standard.
	ISOEquipmentCode string `json:"ISOEquipmentCode"`

	// EmptyIndicatorCode Indication if the container is `EMPTY` or `LADEN`.
	//
	// - `EMPTY` (Empty)
	// - `LADEN` (Laden)
	EmptyIndicatorCode UtilizedTransportEquipmentHBLEmptyIndicatorCode `json:"emptyIndicatorCode"`

	// EquipmentReference The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
	// According to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).
	//
	// If a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.
	EquipmentReference string `json:"equipmentReference"`

	// IsShipperOwned Indicates whether the container is shipper owned (SOC).
	IsShipperOwned bool `json:"isShipperOwned"`

	// Seals A list of `Seals`
	Seals *[]Seal `json:"seals,omitempty"`
}

// UtilizedTransportEquipmentHBLEmptyIndicatorCode Indication if the container is `EMPTY` or `LADEN`.
//
// - `EMPTY` (Empty)
// - `LADEN` (Laden)
type UtilizedTransportEquipmentHBLEmptyIndicatorCode string

// UtilizedTransportEquipmentShipper Specifies the container (`Equipment`), `Seals` and `References`
type UtilizedTransportEquipmentShipper struct {
	// CustomsReferences A list of `Customs references`
	CustomsReferences *[]CustomsReference `json:"customsReferences,omitempty"`

	// EmptyIndicatorCode Indication if the container is `EMPTY` or `LADEN`.
	//
	// - `EMPTY` (Empty)
	// - `LADEN` (Laden)
	EmptyIndicatorCode *UtilizedTransportEquipmentShipperEmptyIndicatorCode `json:"emptyIndicatorCode,omitempty"`

	// References A list of `References`
	References *[]Reference `json:"references,omitempty"`

	// Seals A list of `Seals`
	Seals []Seal `json:"seals"`

	// ShippingMarks A list of the `ShippingMarks` applicable to this `UtilizedTransportEquipment`
	//
	// **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
	ShippingMarks *[]string `json:"shippingMarks,omitempty"`
	union         json.RawMessage
}

// UtilizedTransportEquipmentShipperEmptyIndicatorCode Indication if the container is `EMPTY` or `LADEN`.
//
// - `EMPTY` (Empty)
// - `LADEN` (Laden)
type UtilizedTransportEquipmentShipperEmptyIndicatorCode string

// VesselVoyage Vessel and export voyage
type VesselVoyage struct {
	// CarrierExportVoyageNumber The identifier of an export voyage. The carrier-specific identifier of the export Voyage.
	CarrierExportVoyageNumber string `json:"carrierExportVoyageNumber"`

	// UniversalExportVoyageReference A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`
	// - `2 digits` for the year
	// - `2 alphanumeric characters` for the sequence number of the voyage
	// - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).
	UniversalExportVoyageReference *string `json:"universalExportVoyageReference,omitempty"`

	// VesselName The name of the first sea going Vessel on board which the cargo is loaded or intended to be loaded
	VesselName string `json:"vesselName"`
}

// CreateShippingInstructionsParams defines parameters for CreateShippingInstructions.
type CreateShippingInstructionsParams struct {
	// APIVersion An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.
	APIVersion *string `json:"API-Version,omitempty"`
}

// ShippingInstructionsNotificationsParams defines parameters for ShippingInstructionsNotifications.
type ShippingInstructionsNotificationsParams struct {
	// APIVersion An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.
	APIVersion *string `json:"API-Version,omitempty"`
}

// GetShippingInstructionsParams defines parameters for GetShippingInstructions.
type GetShippingInstructionsParams struct {
	// UpdatedContent If set to `true`, the payload returned is the content of the `Updated Shipping Instructions`.
	//
	// Default value is `false` in which case the content of the "original" `Shipping Instructions` is returned.
	//
	// **Condition:** Can only be used if an update has been made by the consumer (via **UseCase 3: Submit updated Shipping Instructions**) and **until** a new updated is requested by the provider. If no updates have been made a `404` (Not Found) response will be returned
	UpdatedContent *bool `form:"updatedContent,omitempty" json:"updatedContent,omitempty"`

	// APIVersion An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.
	APIVersion *string `json:"API-Version,omitempty"`
}

// PatchShippingInstructionsParams defines parameters for PatchShippingInstructions.
type PatchShippingInstructionsParams struct {
	// APIVersion An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.
	APIVersion *string `json:"API-Version,omitempty"`
}

// UpdateShippingInstructionsParams defines parameters for UpdateShippingInstructions.
type UpdateShippingInstructionsParams struct {
	// APIVersion An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.
	APIVersion *string `json:"API-Version,omitempty"`
}

// TransportDocumentNotificationsParams defines parameters for TransportDocumentNotifications.
type TransportDocumentNotificationsParams struct {
	// APIVersion An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.
	APIVersion *string `json:"API-Version,omitempty"`
}

// GetTransportDocumentParams defines parameters for GetTransportDocument.
type GetTransportDocumentParams struct {
	// APIVersion An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.
	APIVersion *string `json:"API-Version,omitempty"`
}

// ApproveTransportDocumentParams defines parameters for ApproveTransportDocument.
type ApproveTransportDocumentParams struct {
	// APIVersion An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.
	APIVersion *string `json:"API-Version,omitempty"`
}

// CreateShippingInstructionsJSONRequestBody defines body for CreateShippingInstructions for application/json ContentType.
type CreateShippingInstructionsJSONRequestBody = CreateShippingInstructions

// ShippingInstructionsNotificationsJSONRequestBody defines body for ShippingInstructionsNotifications for application/json ContentType.
type ShippingInstructionsNotificationsJSONRequestBody = ShippingInstructionsNotification

// PatchShippingInstructionsJSONRequestBody defines body for PatchShippingInstructions for application/json ContentType.
type PatchShippingInstructionsJSONRequestBody = CancelShippingInstructionsUpdate

// UpdateShippingInstructionsJSONRequestBody defines body for UpdateShippingInstructions for application/json ContentType.
type UpdateShippingInstructionsJSONRequestBody = UpdateShippingInstructions

// TransportDocumentNotificationsJSONRequestBody defines body for TransportDocumentNotifications for application/json ContentType.
type TransportDocumentNotificationsJSONRequestBody = TransportDocumentNotification

// ApproveTransportDocumentJSONRequestBody defines body for ApproveTransportDocument for application/json ContentType.
type ApproveTransportDocumentJSONRequestBody = ApproveTransportDocument

// AsDangerousGoods0 returns the union data inside the DangerousGoods as a DangerousGoods0
func (t DangerousGoods) AsDangerousGoods0() (DangerousGoods0, error) {
	var body DangerousGoods0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDangerousGoods0 overwrites any union data inside the DangerousGoods as the provided DangerousGoods0
func (t *DangerousGoods) FromDangerousGoods0(v DangerousGoods0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDangerousGoods0 performs a merge with any union data inside the DangerousGoods, using the provided DangerousGoods0
func (t *DangerousGoods) MergeDangerousGoods0(v DangerousGoods0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDangerousGoods1 returns the union data inside the DangerousGoods as a DangerousGoods1
func (t DangerousGoods) AsDangerousGoods1() (DangerousGoods1, error) {
	var body DangerousGoods1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDangerousGoods1 overwrites any union data inside the DangerousGoods as the provided DangerousGoods1
func (t *DangerousGoods) FromDangerousGoods1(v DangerousGoods1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDangerousGoods1 performs a merge with any union data inside the DangerousGoods, using the provided DangerousGoods1
func (t *DangerousGoods) MergeDangerousGoods1(v DangerousGoods1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DangerousGoods) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.EMSNumber != nil {
		object["EMSNumber"], err = json.Marshal(t.EMSNumber)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'EMSNumber': %w", err)
		}
	}

	if t.CodedVariantList != nil {
		object["codedVariantList"], err = json.Marshal(t.CodedVariantList)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'codedVariantList': %w", err)
		}
	}

	if t.CompetentAuthorityApproval != nil {
		object["competentAuthorityApproval"], err = json.Marshal(t.CompetentAuthorityApproval)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'competentAuthorityApproval': %w", err)
		}
	}

	if t.EmergencyContactDetails != nil {
		object["emergencyContactDetails"], err = json.Marshal(t.EmergencyContactDetails)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'emergencyContactDetails': %w", err)
		}
	}

	if t.EndOfHoldingTime != nil {
		object["endOfHoldingTime"], err = json.Marshal(t.EndOfHoldingTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'endOfHoldingTime': %w", err)
		}
	}

	if t.FumigationDateTime != nil {
		object["fumigationDateTime"], err = json.Marshal(t.FumigationDateTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fumigationDateTime': %w", err)
		}
	}

	if t.GrossWeight != nil {
		object["grossWeight"], err = json.Marshal(t.GrossWeight)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'grossWeight': %w", err)
		}
	}

	object["imoClass"], err = json.Marshal(t.ImoClass)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'imoClass': %w", err)
	}

	if t.InhalationZone != nil {
		object["inhalationZone"], err = json.Marshal(t.InhalationZone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'inhalationZone': %w", err)
		}
	}

	if t.InnerPackagings != nil {
		object["innerPackagings"], err = json.Marshal(t.InnerPackagings)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'innerPackagings': %w", err)
		}
	}

	if t.IsCompetentAuthorityApprovalRequired != nil {
		object["isCompetentAuthorityApprovalRequired"], err = json.Marshal(t.IsCompetentAuthorityApprovalRequired)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'isCompetentAuthorityApprovalRequired': %w", err)
		}
	}

	if t.IsEmptyUncleanedResidue != nil {
		object["isEmptyUncleanedResidue"], err = json.Marshal(t.IsEmptyUncleanedResidue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'isEmptyUncleanedResidue': %w", err)
		}
	}

	if t.IsExceptedQuantity != nil {
		object["isExceptedQuantity"], err = json.Marshal(t.IsExceptedQuantity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'isExceptedQuantity': %w", err)
		}
	}

	if t.IsHot != nil {
		object["isHot"], err = json.Marshal(t.IsHot)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'isHot': %w", err)
		}
	}

	if t.IsLimitedQuantity != nil {
		object["isLimitedQuantity"], err = json.Marshal(t.IsLimitedQuantity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'isLimitedQuantity': %w", err)
		}
	}

	if t.IsMarinePollutant != nil {
		object["isMarinePollutant"], err = json.Marshal(t.IsMarinePollutant)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'isMarinePollutant': %w", err)
		}
	}

	if t.IsReportableQuantity != nil {
		object["isReportableQuantity"], err = json.Marshal(t.IsReportableQuantity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'isReportableQuantity': %w", err)
		}
	}

	if t.IsSalvagePackings != nil {
		object["isSalvagePackings"], err = json.Marshal(t.IsSalvagePackings)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'isSalvagePackings': %w", err)
		}
	}

	if t.IsWaste != nil {
		object["isWaste"], err = json.Marshal(t.IsWaste)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'isWaste': %w", err)
		}
	}

	if t.Limits != nil {
		object["limits"], err = json.Marshal(t.Limits)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'limits': %w", err)
		}
	}

	if t.NetExplosiveContent != nil {
		object["netExplosiveContent"], err = json.Marshal(t.NetExplosiveContent)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'netExplosiveContent': %w", err)
		}
	}

	if t.NetVolume != nil {
		object["netVolume"], err = json.Marshal(t.NetVolume)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'netVolume': %w", err)
		}
	}

	if t.NetWeight != nil {
		object["netWeight"], err = json.Marshal(t.NetWeight)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'netWeight': %w", err)
		}
	}

	if t.PackingGroup != nil {
		object["packingGroup"], err = json.Marshal(t.PackingGroup)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'packingGroup': %w", err)
		}
	}

	object["properShippingName"], err = json.Marshal(t.ProperShippingName)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'properShippingName': %w", err)
	}

	if t.SegregationGroups != nil {
		object["segregationGroups"], err = json.Marshal(t.SegregationGroups)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'segregationGroups': %w", err)
		}
	}

	if t.SubsidiaryRisk1 != nil {
		object["subsidiaryRisk1"], err = json.Marshal(t.SubsidiaryRisk1)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subsidiaryRisk1': %w", err)
		}
	}

	if t.SubsidiaryRisk2 != nil {
		object["subsidiaryRisk2"], err = json.Marshal(t.SubsidiaryRisk2)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subsidiaryRisk2': %w", err)
		}
	}

	if t.TechnicalName != nil {
		object["technicalName"], err = json.Marshal(t.TechnicalName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'technicalName': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *DangerousGoods) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["EMSNumber"]; found {
		err = json.Unmarshal(raw, &t.EMSNumber)
		if err != nil {
			return fmt.Errorf("error reading 'EMSNumber': %w", err)
		}
	}

	if raw, found := object["codedVariantList"]; found {
		err = json.Unmarshal(raw, &t.CodedVariantList)
		if err != nil {
			return fmt.Errorf("error reading 'codedVariantList': %w", err)
		}
	}

	if raw, found := object["competentAuthorityApproval"]; found {
		err = json.Unmarshal(raw, &t.CompetentAuthorityApproval)
		if err != nil {
			return fmt.Errorf("error reading 'competentAuthorityApproval': %w", err)
		}
	}

	if raw, found := object["emergencyContactDetails"]; found {
		err = json.Unmarshal(raw, &t.EmergencyContactDetails)
		if err != nil {
			return fmt.Errorf("error reading 'emergencyContactDetails': %w", err)
		}
	}

	if raw, found := object["endOfHoldingTime"]; found {
		err = json.Unmarshal(raw, &t.EndOfHoldingTime)
		if err != nil {
			return fmt.Errorf("error reading 'endOfHoldingTime': %w", err)
		}
	}

	if raw, found := object["fumigationDateTime"]; found {
		err = json.Unmarshal(raw, &t.FumigationDateTime)
		if err != nil {
			return fmt.Errorf("error reading 'fumigationDateTime': %w", err)
		}
	}

	if raw, found := object["grossWeight"]; found {
		err = json.Unmarshal(raw, &t.GrossWeight)
		if err != nil {
			return fmt.Errorf("error reading 'grossWeight': %w", err)
		}
	}

	if raw, found := object["imoClass"]; found {
		err = json.Unmarshal(raw, &t.ImoClass)
		if err != nil {
			return fmt.Errorf("error reading 'imoClass': %w", err)
		}
	}

	if raw, found := object["inhalationZone"]; found {
		err = json.Unmarshal(raw, &t.InhalationZone)
		if err != nil {
			return fmt.Errorf("error reading 'inhalationZone': %w", err)
		}
	}

	if raw, found := object["innerPackagings"]; found {
		err = json.Unmarshal(raw, &t.InnerPackagings)
		if err != nil {
			return fmt.Errorf("error reading 'innerPackagings': %w", err)
		}
	}

	if raw, found := object["isCompetentAuthorityApprovalRequired"]; found {
		err = json.Unmarshal(raw, &t.IsCompetentAuthorityApprovalRequired)
		if err != nil {
			return fmt.Errorf("error reading 'isCompetentAuthorityApprovalRequired': %w", err)
		}
	}

	if raw, found := object["isEmptyUncleanedResidue"]; found {
		err = json.Unmarshal(raw, &t.IsEmptyUncleanedResidue)
		if err != nil {
			return fmt.Errorf("error reading 'isEmptyUncleanedResidue': %w", err)
		}
	}

	if raw, found := object["isExceptedQuantity"]; found {
		err = json.Unmarshal(raw, &t.IsExceptedQuantity)
		if err != nil {
			return fmt.Errorf("error reading 'isExceptedQuantity': %w", err)
		}
	}

	if raw, found := object["isHot"]; found {
		err = json.Unmarshal(raw, &t.IsHot)
		if err != nil {
			return fmt.Errorf("error reading 'isHot': %w", err)
		}
	}

	if raw, found := object["isLimitedQuantity"]; found {
		err = json.Unmarshal(raw, &t.IsLimitedQuantity)
		if err != nil {
			return fmt.Errorf("error reading 'isLimitedQuantity': %w", err)
		}
	}

	if raw, found := object["isMarinePollutant"]; found {
		err = json.Unmarshal(raw, &t.IsMarinePollutant)
		if err != nil {
			return fmt.Errorf("error reading 'isMarinePollutant': %w", err)
		}
	}

	if raw, found := object["isReportableQuantity"]; found {
		err = json.Unmarshal(raw, &t.IsReportableQuantity)
		if err != nil {
			return fmt.Errorf("error reading 'isReportableQuantity': %w", err)
		}
	}

	if raw, found := object["isSalvagePackings"]; found {
		err = json.Unmarshal(raw, &t.IsSalvagePackings)
		if err != nil {
			return fmt.Errorf("error reading 'isSalvagePackings': %w", err)
		}
	}

	if raw, found := object["isWaste"]; found {
		err = json.Unmarshal(raw, &t.IsWaste)
		if err != nil {
			return fmt.Errorf("error reading 'isWaste': %w", err)
		}
	}

	if raw, found := object["limits"]; found {
		err = json.Unmarshal(raw, &t.Limits)
		if err != nil {
			return fmt.Errorf("error reading 'limits': %w", err)
		}
	}

	if raw, found := object["netExplosiveContent"]; found {
		err = json.Unmarshal(raw, &t.NetExplosiveContent)
		if err != nil {
			return fmt.Errorf("error reading 'netExplosiveContent': %w", err)
		}
	}

	if raw, found := object["netVolume"]; found {
		err = json.Unmarshal(raw, &t.NetVolume)
		if err != nil {
			return fmt.Errorf("error reading 'netVolume': %w", err)
		}
	}

	if raw, found := object["netWeight"]; found {
		err = json.Unmarshal(raw, &t.NetWeight)
		if err != nil {
			return fmt.Errorf("error reading 'netWeight': %w", err)
		}
	}

	if raw, found := object["packingGroup"]; found {
		err = json.Unmarshal(raw, &t.PackingGroup)
		if err != nil {
			return fmt.Errorf("error reading 'packingGroup': %w", err)
		}
	}

	if raw, found := object["properShippingName"]; found {
		err = json.Unmarshal(raw, &t.ProperShippingName)
		if err != nil {
			return fmt.Errorf("error reading 'properShippingName': %w", err)
		}
	}

	if raw, found := object["segregationGroups"]; found {
		err = json.Unmarshal(raw, &t.SegregationGroups)
		if err != nil {
			return fmt.Errorf("error reading 'segregationGroups': %w", err)
		}
	}

	if raw, found := object["subsidiaryRisk1"]; found {
		err = json.Unmarshal(raw, &t.SubsidiaryRisk1)
		if err != nil {
			return fmt.Errorf("error reading 'subsidiaryRisk1': %w", err)
		}
	}

	if raw, found := object["subsidiaryRisk2"]; found {
		err = json.Unmarshal(raw, &t.SubsidiaryRisk2)
		if err != nil {
			return fmt.Errorf("error reading 'subsidiaryRisk2': %w", err)
		}
	}

	if raw, found := object["technicalName"]; found {
		err = json.Unmarshal(raw, &t.TechnicalName)
		if err != nil {
			return fmt.Errorf("error reading 'technicalName': %w", err)
		}
	}

	return err
}

// AsInvoicePayableAt0 returns the union data inside the InvoicePayableAt as a InvoicePayableAt0
func (t InvoicePayableAt) AsInvoicePayableAt0() (InvoicePayableAt0, error) {
	var body InvoicePayableAt0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvoicePayableAt0 overwrites any union data inside the InvoicePayableAt as the provided InvoicePayableAt0
func (t *InvoicePayableAt) FromInvoicePayableAt0(v InvoicePayableAt0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvoicePayableAt0 performs a merge with any union data inside the InvoicePayableAt, using the provided InvoicePayableAt0
func (t *InvoicePayableAt) MergeInvoicePayableAt0(v InvoicePayableAt0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvoicePayableAt1 returns the union data inside the InvoicePayableAt as a InvoicePayableAt1
func (t InvoicePayableAt) AsInvoicePayableAt1() (InvoicePayableAt1, error) {
	var body InvoicePayableAt1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvoicePayableAt1 overwrites any union data inside the InvoicePayableAt as the provided InvoicePayableAt1
func (t *InvoicePayableAt) FromInvoicePayableAt1(v InvoicePayableAt1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvoicePayableAt1 performs a merge with any union data inside the InvoicePayableAt, using the provided InvoicePayableAt1
func (t *InvoicePayableAt) MergeInvoicePayableAt1(v InvoicePayableAt1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InvoicePayableAt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InvoicePayableAt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPartyContactDetail0 returns the union data inside the PartyContactDetail as a PartyContactDetail0
func (t PartyContactDetail) AsPartyContactDetail0() (PartyContactDetail0, error) {
	var body PartyContactDetail0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPartyContactDetail0 overwrites any union data inside the PartyContactDetail as the provided PartyContactDetail0
func (t *PartyContactDetail) FromPartyContactDetail0(v PartyContactDetail0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePartyContactDetail0 performs a merge with any union data inside the PartyContactDetail, using the provided PartyContactDetail0
func (t *PartyContactDetail) MergePartyContactDetail0(v PartyContactDetail0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPartyContactDetail1 returns the union data inside the PartyContactDetail as a PartyContactDetail1
func (t PartyContactDetail) AsPartyContactDetail1() (PartyContactDetail1, error) {
	var body PartyContactDetail1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPartyContactDetail1 overwrites any union data inside the PartyContactDetail as the provided PartyContactDetail1
func (t *PartyContactDetail) FromPartyContactDetail1(v PartyContactDetail1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePartyContactDetail1 performs a merge with any union data inside the PartyContactDetail, using the provided PartyContactDetail1
func (t *PartyContactDetail) MergePartyContactDetail1(v PartyContactDetail1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PartyContactDetail) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["name"], err = json.Marshal(t.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *PartyContactDetail) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	return err
}

// AsPartyContactDetailHBL0 returns the union data inside the PartyContactDetailHBL as a PartyContactDetailHBL0
func (t PartyContactDetailHBL) AsPartyContactDetailHBL0() (PartyContactDetailHBL0, error) {
	var body PartyContactDetailHBL0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPartyContactDetailHBL0 overwrites any union data inside the PartyContactDetailHBL as the provided PartyContactDetailHBL0
func (t *PartyContactDetailHBL) FromPartyContactDetailHBL0(v PartyContactDetailHBL0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePartyContactDetailHBL0 performs a merge with any union data inside the PartyContactDetailHBL, using the provided PartyContactDetailHBL0
func (t *PartyContactDetailHBL) MergePartyContactDetailHBL0(v PartyContactDetailHBL0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPartyContactDetailHBL1 returns the union data inside the PartyContactDetailHBL as a PartyContactDetailHBL1
func (t PartyContactDetailHBL) AsPartyContactDetailHBL1() (PartyContactDetailHBL1, error) {
	var body PartyContactDetailHBL1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPartyContactDetailHBL1 overwrites any union data inside the PartyContactDetailHBL as the provided PartyContactDetailHBL1
func (t *PartyContactDetailHBL) FromPartyContactDetailHBL1(v PartyContactDetailHBL1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePartyContactDetailHBL1 performs a merge with any union data inside the PartyContactDetailHBL, using the provided PartyContactDetailHBL1
func (t *PartyContactDetailHBL) MergePartyContactDetailHBL1(v PartyContactDetailHBL1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PartyContactDetailHBL) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["name"], err = json.Marshal(t.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *PartyContactDetailHBL) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	return err
}

// AsPartyContactDetailWithPattern0 returns the union data inside the PartyContactDetailWithPattern as a PartyContactDetailWithPattern0
func (t PartyContactDetailWithPattern) AsPartyContactDetailWithPattern0() (PartyContactDetailWithPattern0, error) {
	var body PartyContactDetailWithPattern0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPartyContactDetailWithPattern0 overwrites any union data inside the PartyContactDetailWithPattern as the provided PartyContactDetailWithPattern0
func (t *PartyContactDetailWithPattern) FromPartyContactDetailWithPattern0(v PartyContactDetailWithPattern0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePartyContactDetailWithPattern0 performs a merge with any union data inside the PartyContactDetailWithPattern, using the provided PartyContactDetailWithPattern0
func (t *PartyContactDetailWithPattern) MergePartyContactDetailWithPattern0(v PartyContactDetailWithPattern0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPartyContactDetailWithPattern1 returns the union data inside the PartyContactDetailWithPattern as a PartyContactDetailWithPattern1
func (t PartyContactDetailWithPattern) AsPartyContactDetailWithPattern1() (PartyContactDetailWithPattern1, error) {
	var body PartyContactDetailWithPattern1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPartyContactDetailWithPattern1 overwrites any union data inside the PartyContactDetailWithPattern as the provided PartyContactDetailWithPattern1
func (t *PartyContactDetailWithPattern) FromPartyContactDetailWithPattern1(v PartyContactDetailWithPattern1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePartyContactDetailWithPattern1 performs a merge with any union data inside the PartyContactDetailWithPattern, using the provided PartyContactDetailWithPattern1
func (t *PartyContactDetailWithPattern) MergePartyContactDetailWithPattern1(v PartyContactDetailWithPattern1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PartyContactDetailWithPattern) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["name"], err = json.Marshal(t.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *PartyContactDetailWithPattern) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	return err
}

// AsPlaceOfIssue0 returns the union data inside the PlaceOfIssue as a PlaceOfIssue0
func (t PlaceOfIssue) AsPlaceOfIssue0() (PlaceOfIssue0, error) {
	var body PlaceOfIssue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlaceOfIssue0 overwrites any union data inside the PlaceOfIssue as the provided PlaceOfIssue0
func (t *PlaceOfIssue) FromPlaceOfIssue0(v PlaceOfIssue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlaceOfIssue0 performs a merge with any union data inside the PlaceOfIssue, using the provided PlaceOfIssue0
func (t *PlaceOfIssue) MergePlaceOfIssue0(v PlaceOfIssue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlaceOfIssue1 returns the union data inside the PlaceOfIssue as a PlaceOfIssue1
func (t PlaceOfIssue) AsPlaceOfIssue1() (PlaceOfIssue1, error) {
	var body PlaceOfIssue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlaceOfIssue1 overwrites any union data inside the PlaceOfIssue as the provided PlaceOfIssue1
func (t *PlaceOfIssue) FromPlaceOfIssue1(v PlaceOfIssue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlaceOfIssue1 performs a merge with any union data inside the PlaceOfIssue, using the provided PlaceOfIssue1
func (t *PlaceOfIssue) MergePlaceOfIssue1(v PlaceOfIssue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PlaceOfIssue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.LocationName != nil {
		object["locationName"], err = json.Marshal(t.LocationName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'locationName': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *PlaceOfIssue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["locationName"]; found {
		err = json.Unmarshal(raw, &t.LocationName)
		if err != nil {
			return fmt.Errorf("error reading 'locationName': %w", err)
		}
	}

	return err
}

// AsUTEquipment returns the union data inside the UtilizedTransportEquipmentShipper as a UTEquipment
func (t UtilizedTransportEquipmentShipper) AsUTEquipment() (UTEquipment, error) {
	var body UTEquipment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUTEquipment overwrites any union data inside the UtilizedTransportEquipmentShipper as the provided UTEquipment
func (t *UtilizedTransportEquipmentShipper) FromUTEquipment(v UTEquipment) error {
	v.IsShipperOwned = true
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUTEquipment performs a merge with any union data inside the UtilizedTransportEquipmentShipper, using the provided UTEquipment
func (t *UtilizedTransportEquipmentShipper) MergeUTEquipment(v UTEquipment) error {
	v.IsShipperOwned = true
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUTEquipmentReference returns the union data inside the UtilizedTransportEquipmentShipper as a UTEquipmentReference
func (t UtilizedTransportEquipmentShipper) AsUTEquipmentReference() (UTEquipmentReference, error) {
	var body UTEquipmentReference
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUTEquipmentReference overwrites any union data inside the UtilizedTransportEquipmentShipper as the provided UTEquipmentReference
func (t *UtilizedTransportEquipmentShipper) FromUTEquipmentReference(v UTEquipmentReference) error {
	v.IsShipperOwned = false
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUTEquipmentReference performs a merge with any union data inside the UtilizedTransportEquipmentShipper, using the provided UTEquipmentReference
func (t *UtilizedTransportEquipmentShipper) MergeUTEquipmentReference(v UTEquipmentReference) error {
	v.IsShipperOwned = false
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UtilizedTransportEquipmentShipper) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"isShipperOwned"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t UtilizedTransportEquipmentShipper) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "false":
		return t.AsUTEquipmentReference()
	case "true":
		return t.AsUTEquipment()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t UtilizedTransportEquipmentShipper) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.CustomsReferences != nil {
		object["customsReferences"], err = json.Marshal(t.CustomsReferences)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'customsReferences': %w", err)
		}
	}

	if t.EmptyIndicatorCode != nil {
		object["emptyIndicatorCode"], err = json.Marshal(t.EmptyIndicatorCode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'emptyIndicatorCode': %w", err)
		}
	}

	if t.References != nil {
		object["references"], err = json.Marshal(t.References)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'references': %w", err)
		}
	}

	object["seals"], err = json.Marshal(t.Seals)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'seals': %w", err)
	}

	if t.ShippingMarks != nil {
		object["shippingMarks"], err = json.Marshal(t.ShippingMarks)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'shippingMarks': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *UtilizedTransportEquipmentShipper) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["customsReferences"]; found {
		err = json.Unmarshal(raw, &t.CustomsReferences)
		if err != nil {
			return fmt.Errorf("error reading 'customsReferences': %w", err)
		}
	}

	if raw, found := object["emptyIndicatorCode"]; found {
		err = json.Unmarshal(raw, &t.EmptyIndicatorCode)
		if err != nil {
			return fmt.Errorf("error reading 'emptyIndicatorCode': %w", err)
		}
	}

	if raw, found := object["references"]; found {
		err = json.Unmarshal(raw, &t.References)
		if err != nil {
			return fmt.Errorf("error reading 'references': %w", err)
		}
	}

	if raw, found := object["seals"]; found {
		err = json.Unmarshal(raw, &t.Seals)
		if err != nil {
			return fmt.Errorf("error reading 'seals': %w", err)
		}
	}

	if raw, found := object["shippingMarks"]; found {
		err = json.Unmarshal(raw, &t.ShippingMarks)
		if err != nil {
			return fmt.Errorf("error reading 'shippingMarks': %w", err)
		}
	}

	return err
}
