// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/bu_server/trade_document/file_based_ebl.go

// Package mock_trade_document is a generated GoMock package.
package mock_trade_document

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/openebl/openebl/pkg/bu_server/model"
	trade_document "github.com/openebl/openebl/pkg/bu_server/trade_document"
)

// MockFileBaseEBLController is a mock of FileBaseEBLController interface.
type MockFileBaseEBLController struct {
	ctrl     *gomock.Controller
	recorder *MockFileBaseEBLControllerMockRecorder
}

// MockFileBaseEBLControllerMockRecorder is the mock recorder for MockFileBaseEBLController.
type MockFileBaseEBLControllerMockRecorder struct {
	mock *MockFileBaseEBLController
}

// NewMockFileBaseEBLController creates a new mock instance.
func NewMockFileBaseEBLController(ctrl *gomock.Controller) *MockFileBaseEBLController {
	mock := &MockFileBaseEBLController{ctrl: ctrl}
	mock.recorder = &MockFileBaseEBLControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileBaseEBLController) EXPECT() *MockFileBaseEBLControllerMockRecorder {
	return m.recorder
}

// Accomplish mocks base method.
func (m *MockFileBaseEBLController) Accomplish(ctx context.Context, ts int64, request trade_document.AccomplishEBLRequest) (trade_document.FileBasedBillOfLadingRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accomplish", ctx, ts, request)
	ret0, _ := ret[0].(trade_document.FileBasedBillOfLadingRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accomplish indicates an expected call of Accomplish.
func (mr *MockFileBaseEBLControllerMockRecorder) Accomplish(ctx, ts, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accomplish", reflect.TypeOf((*MockFileBaseEBLController)(nil).Accomplish), ctx, ts, request)
}

// Amend mocks base method.
func (m *MockFileBaseEBLController) Amend(ctx context.Context, ts int64, request trade_document.AmendFileBasedEBLRequest) (trade_document.FileBasedBillOfLadingRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Amend", ctx, ts, request)
	ret0, _ := ret[0].(trade_document.FileBasedBillOfLadingRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Amend indicates an expected call of Amend.
func (mr *MockFileBaseEBLControllerMockRecorder) Amend(ctx, ts, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Amend", reflect.TypeOf((*MockFileBaseEBLController)(nil).Amend), ctx, ts, request)
}

// AmendmentRequest mocks base method.
func (m *MockFileBaseEBLController) AmendmentRequest(ctx context.Context, ts int64, request trade_document.AmendmentRequestEBLRequest) (trade_document.FileBasedBillOfLadingRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmendmentRequest", ctx, ts, request)
	ret0, _ := ret[0].(trade_document.FileBasedBillOfLadingRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmendmentRequest indicates an expected call of AmendmentRequest.
func (mr *MockFileBaseEBLControllerMockRecorder) AmendmentRequest(ctx, ts, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmendmentRequest", reflect.TypeOf((*MockFileBaseEBLController)(nil).AmendmentRequest), ctx, ts, request)
}

// Create mocks base method.
func (m *MockFileBaseEBLController) Create(ctx context.Context, ts int64, request trade_document.IssueFileBasedEBLRequest) (trade_document.FileBasedBillOfLadingRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ts, request)
	ret0, _ := ret[0].(trade_document.FileBasedBillOfLadingRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFileBaseEBLControllerMockRecorder) Create(ctx, ts, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileBaseEBLController)(nil).Create), ctx, ts, request)
}

// Delete mocks base method.
func (m *MockFileBaseEBLController) Delete(ctx context.Context, ts int64, request trade_document.DeleteEBLRequest) (trade_document.FileBasedBillOfLadingRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, ts, request)
	ret0, _ := ret[0].(trade_document.FileBasedBillOfLadingRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockFileBaseEBLControllerMockRecorder) Delete(ctx, ts, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFileBaseEBLController)(nil).Delete), ctx, ts, request)
}

// Get mocks base method.
func (m *MockFileBaseEBLController) Get(ctx context.Context, request trade_document.GetFileBasedEBLRequest) (trade_document.FileBasedBillOfLadingRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, request)
	ret0, _ := ret[0].(trade_document.FileBasedBillOfLadingRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFileBaseEBLControllerMockRecorder) Get(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFileBaseEBLController)(nil).Get), ctx, request)
}

// GetDocument mocks base method.
func (m *MockFileBaseEBLController) GetDocument(ctx context.Context, request trade_document.GetFileBasedEBLRequest) (*model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocument", ctx, request)
	ret0, _ := ret[0].(*model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocument indicates an expected call of GetDocument.
func (mr *MockFileBaseEBLControllerMockRecorder) GetDocument(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocument", reflect.TypeOf((*MockFileBaseEBLController)(nil).GetDocument), ctx, request)
}

// List mocks base method.
func (m *MockFileBaseEBLController) List(ctx context.Context, request trade_document.ListFileBasedEBLRequest) (trade_document.ListFileBasedEBLRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, request)
	ret0, _ := ret[0].(trade_document.ListFileBasedEBLRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockFileBaseEBLControllerMockRecorder) List(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFileBaseEBLController)(nil).List), ctx, request)
}

// PrintToPaper mocks base method.
func (m *MockFileBaseEBLController) PrintToPaper(ctx context.Context, ts int64, request trade_document.PrintFileBasedEBLToPaperRequest) (trade_document.FileBasedBillOfLadingRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintToPaper", ctx, ts, request)
	ret0, _ := ret[0].(trade_document.FileBasedBillOfLadingRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrintToPaper indicates an expected call of PrintToPaper.
func (mr *MockFileBaseEBLControllerMockRecorder) PrintToPaper(ctx, ts, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintToPaper", reflect.TypeOf((*MockFileBaseEBLController)(nil).PrintToPaper), ctx, ts, request)
}

// Return mocks base method.
func (m *MockFileBaseEBLController) Return(ctx context.Context, ts int64, request trade_document.ReturnFileBasedEBLRequest) (trade_document.FileBasedBillOfLadingRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Return", ctx, ts, request)
	ret0, _ := ret[0].(trade_document.FileBasedBillOfLadingRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Return indicates an expected call of Return.
func (mr *MockFileBaseEBLControllerMockRecorder) Return(ctx, ts, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Return", reflect.TypeOf((*MockFileBaseEBLController)(nil).Return), ctx, ts, request)
}

// Surrender mocks base method.
func (m *MockFileBaseEBLController) Surrender(ctx context.Context, ts int64, request trade_document.SurrenderEBLRequest) (trade_document.FileBasedBillOfLadingRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Surrender", ctx, ts, request)
	ret0, _ := ret[0].(trade_document.FileBasedBillOfLadingRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Surrender indicates an expected call of Surrender.
func (mr *MockFileBaseEBLControllerMockRecorder) Surrender(ctx, ts, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Surrender", reflect.TypeOf((*MockFileBaseEBLController)(nil).Surrender), ctx, ts, request)
}

// Transfer mocks base method.
func (m *MockFileBaseEBLController) Transfer(ctx context.Context, ts int64, request trade_document.TransferEBLRequest) (trade_document.FileBasedBillOfLadingRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, ts, request)
	ret0, _ := ret[0].(trade_document.FileBasedBillOfLadingRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockFileBaseEBLControllerMockRecorder) Transfer(ctx, ts, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockFileBaseEBLController)(nil).Transfer), ctx, ts, request)
}

// UpdateDraft mocks base method.
func (m *MockFileBaseEBLController) UpdateDraft(ctx context.Context, ts int64, request trade_document.UpdateFileBasedEBLDraftRequest) (trade_document.FileBasedBillOfLadingRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDraft", ctx, ts, request)
	ret0, _ := ret[0].(trade_document.FileBasedBillOfLadingRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDraft indicates an expected call of UpdateDraft.
func (mr *MockFileBaseEBLControllerMockRecorder) UpdateDraft(ctx, ts, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDraft", reflect.TypeOf((*MockFileBaseEBLController)(nil).UpdateDraft), ctx, ts, request)
}
