// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/bu_server/storage/interface.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/openebl/openebl/pkg/bu_server/model"
	storage "github.com/openebl/openebl/pkg/bu_server/storage"
	relay "github.com/openebl/openebl/pkg/relay"
)

// MockTx is a mock of Tx interface.
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
}

// MockTxMockRecorder is the mock recorder for MockTx.
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance.
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTx) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxMockRecorder) Commit(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTx)(nil).Commit), ctx)
}

// Exec mocks base method.
func (m *MockTx) Exec(ctx context.Context, sql string, arguments ...any) (storage.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range arguments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(storage.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockTxMockRecorder) Exec(ctx, sql interface{}, arguments ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, arguments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockTx)(nil).Exec), varargs...)
}

// Query mocks base method.
func (m *MockTx) Query(ctx context.Context, sql string, args ...any) (storage.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(storage.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockTxMockRecorder) Query(ctx, sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockTx)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockTx) QueryRow(ctx context.Context, sql string, args ...any) storage.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(storage.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockTxMockRecorder) QueryRow(ctx, sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockTx)(nil).QueryRow), varargs...)
}

// Rollback mocks base method.
func (m *MockTx) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTxMockRecorder) Rollback(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTx)(nil).Rollback), ctx)
}

// MockRows is a mock of Rows interface.
type MockRows struct {
	ctrl     *gomock.Controller
	recorder *MockRowsMockRecorder
}

// MockRowsMockRecorder is the mock recorder for MockRows.
type MockRowsMockRecorder struct {
	mock *MockRows
}

// NewMockRows creates a new mock instance.
func NewMockRows(ctrl *gomock.Controller) *MockRows {
	mock := &MockRows{ctrl: ctrl}
	mock.recorder = &MockRowsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRows) EXPECT() *MockRowsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRows) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRowsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRows)(nil).Close))
}

// Err mocks base method.
func (m *MockRows) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockRowsMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockRows)(nil).Err))
}

// Next mocks base method.
func (m *MockRows) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockRowsMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRows)(nil).Next))
}

// Scan mocks base method.
func (m *MockRows) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRowsMockRecorder) Scan(dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRows)(nil).Scan), dest...)
}

// MockRow is a mock of Row interface.
type MockRow struct {
	ctrl     *gomock.Controller
	recorder *MockRowMockRecorder
}

// MockRowMockRecorder is the mock recorder for MockRow.
type MockRowMockRecorder struct {
	mock *MockRow
}

// NewMockRow creates a new mock instance.
func NewMockRow(ctrl *gomock.Controller) *MockRow {
	mock := &MockRow{ctrl: ctrl}
	mock.recorder = &MockRowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRow) EXPECT() *MockRowMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockRow) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRowMockRecorder) Scan(dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRow)(nil).Scan), dest...)
}

// MockResult is a mock of Result interface.
type MockResult struct {
	ctrl     *gomock.Controller
	recorder *MockResultMockRecorder
}

// MockResultMockRecorder is the mock recorder for MockResult.
type MockResultMockRecorder struct {
	mock *MockResult
}

// NewMockResult creates a new mock instance.
func NewMockResult(ctrl *gomock.Controller) *MockResult {
	mock := &MockResult{ctrl: ctrl}
	mock.recorder = &MockResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResult) EXPECT() *MockResultMockRecorder {
	return m.recorder
}

// RowsAffected mocks base method.
func (m *MockResult) RowsAffected() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RowsAffected")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RowsAffected indicates an expected call of RowsAffected.
func (mr *MockResultMockRecorder) RowsAffected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RowsAffected", reflect.TypeOf((*MockResult)(nil).RowsAffected))
}

// MockTransactionInterface is a mock of TransactionInterface interface.
type MockTransactionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionInterfaceMockRecorder
}

// MockTransactionInterfaceMockRecorder is the mock recorder for MockTransactionInterface.
type MockTransactionInterfaceMockRecorder struct {
	mock *MockTransactionInterface
}

// NewMockTransactionInterface creates a new mock instance.
func NewMockTransactionInterface(ctrl *gomock.Controller) *MockTransactionInterface {
	mock := &MockTransactionInterface{ctrl: ctrl}
	mock.recorder = &MockTransactionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionInterface) EXPECT() *MockTransactionInterfaceMockRecorder {
	return m.recorder
}

// CreateTx mocks base method.
func (m *MockTransactionInterface) CreateTx(ctx context.Context, options ...storage.CreateTxOption) (storage.Tx, context.Context, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTx", varargs...)
	ret0, _ := ret[0].(storage.Tx)
	ret1, _ := ret[1].(context.Context)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockTransactionInterfaceMockRecorder) CreateTx(ctx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockTransactionInterface)(nil).CreateTx), varargs...)
}

// MockBusinessUnitStorage is a mock of BusinessUnitStorage interface.
type MockBusinessUnitStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBusinessUnitStorageMockRecorder
}

// MockBusinessUnitStorageMockRecorder is the mock recorder for MockBusinessUnitStorage.
type MockBusinessUnitStorageMockRecorder struct {
	mock *MockBusinessUnitStorage
}

// NewMockBusinessUnitStorage creates a new mock instance.
func NewMockBusinessUnitStorage(ctrl *gomock.Controller) *MockBusinessUnitStorage {
	mock := &MockBusinessUnitStorage{ctrl: ctrl}
	mock.recorder = &MockBusinessUnitStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusinessUnitStorage) EXPECT() *MockBusinessUnitStorageMockRecorder {
	return m.recorder
}

// AddTradeDocumentOutbox mocks base method.
func (m *MockBusinessUnitStorage) AddTradeDocumentOutbox(ctx context.Context, tx storage.Tx, ts int64, key string, kind int, payload []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTradeDocumentOutbox", ctx, tx, ts, key, kind, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTradeDocumentOutbox indicates an expected call of AddTradeDocumentOutbox.
func (mr *MockBusinessUnitStorageMockRecorder) AddTradeDocumentOutbox(ctx, tx, ts, key, kind, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTradeDocumentOutbox", reflect.TypeOf((*MockBusinessUnitStorage)(nil).AddTradeDocumentOutbox), ctx, tx, ts, key, kind, payload)
}

// CreateTx mocks base method.
func (m *MockBusinessUnitStorage) CreateTx(ctx context.Context, options ...storage.CreateTxOption) (storage.Tx, context.Context, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTx", varargs...)
	ret0, _ := ret[0].(storage.Tx)
	ret1, _ := ret[1].(context.Context)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockBusinessUnitStorageMockRecorder) CreateTx(ctx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockBusinessUnitStorage)(nil).CreateTx), varargs...)
}

// ListAuthentication mocks base method.
func (m *MockBusinessUnitStorage) ListAuthentication(ctx context.Context, tx storage.Tx, req storage.ListAuthenticationRequest) (storage.ListAuthenticationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuthentication", ctx, tx, req)
	ret0, _ := ret[0].(storage.ListAuthenticationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthentication indicates an expected call of ListAuthentication.
func (mr *MockBusinessUnitStorageMockRecorder) ListAuthentication(ctx, tx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthentication", reflect.TypeOf((*MockBusinessUnitStorage)(nil).ListAuthentication), ctx, tx, req)
}

// ListBusinessUnits mocks base method.
func (m *MockBusinessUnitStorage) ListBusinessUnits(ctx context.Context, tx storage.Tx, req storage.ListBusinessUnitsRequest) (storage.ListBusinessUnitsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBusinessUnits", ctx, tx, req)
	ret0, _ := ret[0].(storage.ListBusinessUnitsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBusinessUnits indicates an expected call of ListBusinessUnits.
func (mr *MockBusinessUnitStorageMockRecorder) ListBusinessUnits(ctx, tx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBusinessUnits", reflect.TypeOf((*MockBusinessUnitStorage)(nil).ListBusinessUnits), ctx, tx, req)
}

// StoreAuthentication mocks base method.
func (m *MockBusinessUnitStorage) StoreAuthentication(ctx context.Context, tx storage.Tx, auth model.BusinessUnitAuthentication) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAuthentication", ctx, tx, auth)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreAuthentication indicates an expected call of StoreAuthentication.
func (mr *MockBusinessUnitStorageMockRecorder) StoreAuthentication(ctx, tx, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAuthentication", reflect.TypeOf((*MockBusinessUnitStorage)(nil).StoreAuthentication), ctx, tx, auth)
}

// StoreBusinessUnit mocks base method.
func (m *MockBusinessUnitStorage) StoreBusinessUnit(ctx context.Context, tx storage.Tx, bu model.BusinessUnit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBusinessUnit", ctx, tx, bu)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreBusinessUnit indicates an expected call of StoreBusinessUnit.
func (mr *MockBusinessUnitStorageMockRecorder) StoreBusinessUnit(ctx, tx, bu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBusinessUnit", reflect.TypeOf((*MockBusinessUnitStorage)(nil).StoreBusinessUnit), ctx, tx, bu)
}

// MockTradeDocumentStorage is a mock of TradeDocumentStorage interface.
type MockTradeDocumentStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTradeDocumentStorageMockRecorder
}

// MockTradeDocumentStorageMockRecorder is the mock recorder for MockTradeDocumentStorage.
type MockTradeDocumentStorageMockRecorder struct {
	mock *MockTradeDocumentStorage
}

// NewMockTradeDocumentStorage creates a new mock instance.
func NewMockTradeDocumentStorage(ctrl *gomock.Controller) *MockTradeDocumentStorage {
	mock := &MockTradeDocumentStorage{ctrl: ctrl}
	mock.recorder = &MockTradeDocumentStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradeDocumentStorage) EXPECT() *MockTradeDocumentStorageMockRecorder {
	return m.recorder
}

// AddTradeDocument mocks base method.
func (m *MockTradeDocumentStorage) AddTradeDocument(ctx context.Context, tx storage.Tx, tradeDoc storage.TradeDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTradeDocument", ctx, tx, tradeDoc)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTradeDocument indicates an expected call of AddTradeDocument.
func (mr *MockTradeDocumentStorageMockRecorder) AddTradeDocument(ctx, tx, tradeDoc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTradeDocument", reflect.TypeOf((*MockTradeDocumentStorage)(nil).AddTradeDocument), ctx, tx, tradeDoc)
}

// AddTradeDocumentOutbox mocks base method.
func (m *MockTradeDocumentStorage) AddTradeDocumentOutbox(ctx context.Context, tx storage.Tx, ts int64, key string, kind int, payload []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTradeDocumentOutbox", ctx, tx, ts, key, kind, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTradeDocumentOutbox indicates an expected call of AddTradeDocumentOutbox.
func (mr *MockTradeDocumentStorageMockRecorder) AddTradeDocumentOutbox(ctx, tx, ts, key, kind, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTradeDocumentOutbox", reflect.TypeOf((*MockTradeDocumentStorage)(nil).AddTradeDocumentOutbox), ctx, tx, ts, key, kind, payload)
}

// CreateTx mocks base method.
func (m *MockTradeDocumentStorage) CreateTx(ctx context.Context, options ...storage.CreateTxOption) (storage.Tx, context.Context, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTx", varargs...)
	ret0, _ := ret[0].(storage.Tx)
	ret1, _ := ret[1].(context.Context)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockTradeDocumentStorageMockRecorder) CreateTx(ctx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockTradeDocumentStorage)(nil).CreateTx), varargs...)
}

// ListTradeDocument mocks base method.
func (m *MockTradeDocumentStorage) ListTradeDocument(ctx context.Context, tx storage.Tx, req storage.ListTradeDocumentRequest) (storage.ListTradeDocumentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTradeDocument", ctx, tx, req)
	ret0, _ := ret[0].(storage.ListTradeDocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTradeDocument indicates an expected call of ListTradeDocument.
func (mr *MockTradeDocumentStorageMockRecorder) ListTradeDocument(ctx, tx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTradeDocument", reflect.TypeOf((*MockTradeDocumentStorage)(nil).ListTradeDocument), ctx, tx, req)
}

// MockWebhookStorage is a mock of WebhookStorage interface.
type MockWebhookStorage struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookStorageMockRecorder
}

// MockWebhookStorageMockRecorder is the mock recorder for MockWebhookStorage.
type MockWebhookStorageMockRecorder struct {
	mock *MockWebhookStorage
}

// NewMockWebhookStorage creates a new mock instance.
func NewMockWebhookStorage(ctrl *gomock.Controller) *MockWebhookStorage {
	mock := &MockWebhookStorage{ctrl: ctrl}
	mock.recorder = &MockWebhookStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookStorage) EXPECT() *MockWebhookStorageMockRecorder {
	return m.recorder
}

// AddWebhook mocks base method.
func (m *MockWebhookStorage) AddWebhook(ctx context.Context, tx storage.Tx, webhook model.Webhook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWebhook", ctx, tx, webhook)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWebhook indicates an expected call of AddWebhook.
func (mr *MockWebhookStorageMockRecorder) AddWebhook(ctx, tx, webhook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWebhook", reflect.TypeOf((*MockWebhookStorage)(nil).AddWebhook), ctx, tx, webhook)
}

// AddWebhookEvent mocks base method.
func (m *MockWebhookStorage) AddWebhookEvent(ctx context.Context, tx storage.Tx, ts int64, key string, event *model.WebhookEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWebhookEvent", ctx, tx, ts, key, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWebhookEvent indicates an expected call of AddWebhookEvent.
func (mr *MockWebhookStorageMockRecorder) AddWebhookEvent(ctx, tx, ts, key, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWebhookEvent", reflect.TypeOf((*MockWebhookStorage)(nil).AddWebhookEvent), ctx, tx, ts, key, event)
}

// CreateTx mocks base method.
func (m *MockWebhookStorage) CreateTx(ctx context.Context, options ...storage.CreateTxOption) (storage.Tx, context.Context, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTx", varargs...)
	ret0, _ := ret[0].(storage.Tx)
	ret1, _ := ret[1].(context.Context)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockWebhookStorageMockRecorder) CreateTx(ctx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockWebhookStorage)(nil).CreateTx), varargs...)
}

// DeleteWebhookEvent mocks base method.
func (m *MockWebhookStorage) DeleteWebhookEvent(ctx context.Context, tx storage.Tx, recIDs ...int64) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, tx}
	for _, a := range recIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWebhookEvent", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWebhookEvent indicates an expected call of DeleteWebhookEvent.
func (mr *MockWebhookStorageMockRecorder) DeleteWebhookEvent(ctx, tx interface{}, recIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, tx}, recIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhookEvent", reflect.TypeOf((*MockWebhookStorage)(nil).DeleteWebhookEvent), varargs...)
}

// GetWebhookEvent mocks base method.
func (m *MockWebhookStorage) GetWebhookEvent(ctx context.Context, tx storage.Tx, batchSize int) ([]storage.OutboxMsg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookEvent", ctx, tx, batchSize)
	ret0, _ := ret[0].([]storage.OutboxMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookEvent indicates an expected call of GetWebhookEvent.
func (mr *MockWebhookStorageMockRecorder) GetWebhookEvent(ctx, tx, batchSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookEvent", reflect.TypeOf((*MockWebhookStorage)(nil).GetWebhookEvent), ctx, tx, batchSize)
}

// ListWebhook mocks base method.
func (m *MockWebhookStorage) ListWebhook(ctx context.Context, tx storage.Tx, req storage.ListWebhookRequest) (storage.ListWebhookResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebhook", ctx, tx, req)
	ret0, _ := ret[0].(storage.ListWebhookResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWebhook indicates an expected call of ListWebhook.
func (mr *MockWebhookStorageMockRecorder) ListWebhook(ctx, tx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebhook", reflect.TypeOf((*MockWebhookStorage)(nil).ListWebhook), ctx, tx, req)
}

// MockCertStorage is a mock of CertStorage interface.
type MockCertStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCertStorageMockRecorder
}

// MockCertStorageMockRecorder is the mock recorder for MockCertStorage.
type MockCertStorageMockRecorder struct {
	mock *MockCertStorage
}

// NewMockCertStorage creates a new mock instance.
func NewMockCertStorage(ctrl *gomock.Controller) *MockCertStorage {
	mock := &MockCertStorage{ctrl: ctrl}
	mock.recorder = &MockCertStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertStorage) EXPECT() *MockCertStorageMockRecorder {
	return m.recorder
}

// AddCRL mocks base method.
func (m *MockCertStorage) AddCRL(ctx context.Context, tx storage.Tx, ts int64, issuerKeyID, certSerialNumber string, revokedAt int64, crl []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCRL", ctx, tx, ts, issuerKeyID, certSerialNumber, revokedAt, crl)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCRL indicates an expected call of AddCRL.
func (mr *MockCertStorageMockRecorder) AddCRL(ctx, tx, ts, issuerKeyID, certSerialNumber, revokedAt, crl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCRL", reflect.TypeOf((*MockCertStorage)(nil).AddCRL), ctx, tx, ts, issuerKeyID, certSerialNumber, revokedAt, crl)
}

// AddRootCert mocks base method.
func (m *MockCertStorage) AddRootCert(ctx context.Context, tx storage.Tx, ts int64, fingerPrint string, cert []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRootCert", ctx, tx, ts, fingerPrint, cert)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRootCert indicates an expected call of AddRootCert.
func (mr *MockCertStorageMockRecorder) AddRootCert(ctx, tx, ts, fingerPrint, cert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRootCert", reflect.TypeOf((*MockCertStorage)(nil).AddRootCert), ctx, tx, ts, fingerPrint, cert)
}

// CreateTx mocks base method.
func (m *MockCertStorage) CreateTx(ctx context.Context, options ...storage.CreateTxOption) (storage.Tx, context.Context, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTx", varargs...)
	ret0, _ := ret[0].(storage.Tx)
	ret1, _ := ret[1].(context.Context)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockCertStorageMockRecorder) CreateTx(ctx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockCertStorage)(nil).CreateTx), varargs...)
}

// GetActiveRootCert mocks base method.
func (m *MockCertStorage) GetActiveRootCert(ctx context.Context, tx storage.Tx) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveRootCert", ctx, tx)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveRootCert indicates an expected call of GetActiveRootCert.
func (mr *MockCertStorageMockRecorder) GetActiveRootCert(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveRootCert", reflect.TypeOf((*MockCertStorage)(nil).GetActiveRootCert), ctx, tx)
}

// GetCRL mocks base method.
func (m *MockCertStorage) GetCRL(ctx context.Context, tx storage.Tx, req storage.GetCRLRequest) (storage.GetCRLResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCRL", ctx, tx, req)
	ret0, _ := ret[0].(storage.GetCRLResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCRL indicates an expected call of GetCRL.
func (mr *MockCertStorageMockRecorder) GetCRL(ctx, tx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCRL", reflect.TypeOf((*MockCertStorage)(nil).GetCRL), ctx, tx, req)
}

// RevokeRootCert mocks base method.
func (m *MockCertStorage) RevokeRootCert(ctx context.Context, tx storage.Tx, ts int64, fingerPrinter string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeRootCert", ctx, tx, ts, fingerPrinter)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeRootCert indicates an expected call of RevokeRootCert.
func (mr *MockCertStorageMockRecorder) RevokeRootCert(ctx, tx, ts, fingerPrinter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRootCert", reflect.TypeOf((*MockCertStorage)(nil).RevokeRootCert), ctx, tx, ts, fingerPrinter)
}

// MockRelayStorage is a mock of RelayStorage interface.
type MockRelayStorage struct {
	ctrl     *gomock.Controller
	recorder *MockRelayStorageMockRecorder
}

// MockRelayStorageMockRecorder is the mock recorder for MockRelayStorage.
type MockRelayStorageMockRecorder struct {
	mock *MockRelayStorage
}

// NewMockRelayStorage creates a new mock instance.
func NewMockRelayStorage(ctrl *gomock.Controller) *MockRelayStorage {
	mock := &MockRelayStorage{ctrl: ctrl}
	mock.recorder = &MockRelayStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayStorage) EXPECT() *MockRelayStorageMockRecorder {
	return m.recorder
}

// CreateTx mocks base method.
func (m *MockRelayStorage) CreateTx(ctx context.Context, options ...storage.CreateTxOption) (storage.Tx, context.Context, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTx", varargs...)
	ret0, _ := ret[0].(storage.Tx)
	ret1, _ := ret[1].(context.Context)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockRelayStorageMockRecorder) CreateTx(ctx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockRelayStorage)(nil).CreateTx), varargs...)
}

// GetRelayServerOffset mocks base method.
func (m *MockRelayStorage) GetRelayServerOffset(ctx context.Context, tx storage.Tx, serverID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelayServerOffset", ctx, tx, serverID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelayServerOffset indicates an expected call of GetRelayServerOffset.
func (mr *MockRelayStorageMockRecorder) GetRelayServerOffset(ctx, tx, serverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelayServerOffset", reflect.TypeOf((*MockRelayStorage)(nil).GetRelayServerOffset), ctx, tx, serverID)
}

// StoreEvent mocks base method.
func (m *MockRelayStorage) StoreEvent(ctx context.Context, tx storage.Tx, ts int64, eventID string, event relay.Event, serverID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreEvent", ctx, tx, ts, eventID, event, serverID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreEvent indicates an expected call of StoreEvent.
func (mr *MockRelayStorageMockRecorder) StoreEvent(ctx, tx, ts, eventID, event, serverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEvent", reflect.TypeOf((*MockRelayStorage)(nil).StoreEvent), ctx, tx, ts, eventID, event, serverID)
}

// UpdateRelayServerOffset mocks base method.
func (m *MockRelayStorage) UpdateRelayServerOffset(ctx context.Context, tx storage.Tx, serverID string, offset int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRelayServerOffset", ctx, tx, serverID, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRelayServerOffset indicates an expected call of UpdateRelayServerOffset.
func (mr *MockRelayStorageMockRecorder) UpdateRelayServerOffset(ctx, tx, serverID, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRelayServerOffset", reflect.TypeOf((*MockRelayStorage)(nil).UpdateRelayServerOffset), ctx, tx, serverID, offset)
}

// MockTradeDocumentInboxStorage is a mock of TradeDocumentInboxStorage interface.
type MockTradeDocumentInboxStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTradeDocumentInboxStorageMockRecorder
}

// MockTradeDocumentInboxStorageMockRecorder is the mock recorder for MockTradeDocumentInboxStorage.
type MockTradeDocumentInboxStorageMockRecorder struct {
	mock *MockTradeDocumentInboxStorage
}

// NewMockTradeDocumentInboxStorage creates a new mock instance.
func NewMockTradeDocumentInboxStorage(ctrl *gomock.Controller) *MockTradeDocumentInboxStorage {
	mock := &MockTradeDocumentInboxStorage{ctrl: ctrl}
	mock.recorder = &MockTradeDocumentInboxStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradeDocumentInboxStorage) EXPECT() *MockTradeDocumentInboxStorageMockRecorder {
	return m.recorder
}

// AddTradeDocument mocks base method.
func (m *MockTradeDocumentInboxStorage) AddTradeDocument(ctx context.Context, tx storage.Tx, tradeDoc storage.TradeDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTradeDocument", ctx, tx, tradeDoc)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTradeDocument indicates an expected call of AddTradeDocument.
func (mr *MockTradeDocumentInboxStorageMockRecorder) AddTradeDocument(ctx, tx, tradeDoc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTradeDocument", reflect.TypeOf((*MockTradeDocumentInboxStorage)(nil).AddTradeDocument), ctx, tx, tradeDoc)
}

// CreateTx mocks base method.
func (m *MockTradeDocumentInboxStorage) CreateTx(ctx context.Context, options ...storage.CreateTxOption) (storage.Tx, context.Context, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTx", varargs...)
	ret0, _ := ret[0].(storage.Tx)
	ret1, _ := ret[1].(context.Context)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockTradeDocumentInboxStorageMockRecorder) CreateTx(ctx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockTradeDocumentInboxStorage)(nil).CreateTx), varargs...)
}

// GetRelayServerOffset mocks base method.
func (m *MockTradeDocumentInboxStorage) GetRelayServerOffset(ctx context.Context, tx storage.Tx, serverID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelayServerOffset", ctx, tx, serverID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelayServerOffset indicates an expected call of GetRelayServerOffset.
func (mr *MockTradeDocumentInboxStorageMockRecorder) GetRelayServerOffset(ctx, tx, serverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelayServerOffset", reflect.TypeOf((*MockTradeDocumentInboxStorage)(nil).GetRelayServerOffset), ctx, tx, serverID)
}

// ListAuthentication mocks base method.
func (m *MockTradeDocumentInboxStorage) ListAuthentication(ctx context.Context, tx storage.Tx, req storage.ListAuthenticationRequest) (storage.ListAuthenticationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuthentication", ctx, tx, req)
	ret0, _ := ret[0].(storage.ListAuthenticationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthentication indicates an expected call of ListAuthentication.
func (mr *MockTradeDocumentInboxStorageMockRecorder) ListAuthentication(ctx, tx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthentication", reflect.TypeOf((*MockTradeDocumentInboxStorage)(nil).ListAuthentication), ctx, tx, req)
}

// StoreEvent mocks base method.
func (m *MockTradeDocumentInboxStorage) StoreEvent(ctx context.Context, tx storage.Tx, ts int64, eventID string, event relay.Event, serverID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreEvent", ctx, tx, ts, eventID, event, serverID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreEvent indicates an expected call of StoreEvent.
func (mr *MockTradeDocumentInboxStorageMockRecorder) StoreEvent(ctx, tx, ts, eventID, event, serverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEvent", reflect.TypeOf((*MockTradeDocumentInboxStorage)(nil).StoreEvent), ctx, tx, ts, eventID, event, serverID)
}

// UpdateRelayServerOffset mocks base method.
func (m *MockTradeDocumentInboxStorage) UpdateRelayServerOffset(ctx context.Context, tx storage.Tx, serverID string, offset int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRelayServerOffset", ctx, tx, serverID, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRelayServerOffset indicates an expected call of UpdateRelayServerOffset.
func (mr *MockTradeDocumentInboxStorageMockRecorder) UpdateRelayServerOffset(ctx, tx, serverID, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRelayServerOffset", reflect.TypeOf((*MockTradeDocumentInboxStorage)(nil).UpdateRelayServerOffset), ctx, tx, serverID, offset)
}

// MockTradeDocumentOutboxStorage is a mock of TradeDocumentOutboxStorage interface.
type MockTradeDocumentOutboxStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTradeDocumentOutboxStorageMockRecorder
}

// MockTradeDocumentOutboxStorageMockRecorder is the mock recorder for MockTradeDocumentOutboxStorage.
type MockTradeDocumentOutboxStorageMockRecorder struct {
	mock *MockTradeDocumentOutboxStorage
}

// NewMockTradeDocumentOutboxStorage creates a new mock instance.
func NewMockTradeDocumentOutboxStorage(ctrl *gomock.Controller) *MockTradeDocumentOutboxStorage {
	mock := &MockTradeDocumentOutboxStorage{ctrl: ctrl}
	mock.recorder = &MockTradeDocumentOutboxStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradeDocumentOutboxStorage) EXPECT() *MockTradeDocumentOutboxStorageMockRecorder {
	return m.recorder
}

// AddTradeDocumentOutbox mocks base method.
func (m *MockTradeDocumentOutboxStorage) AddTradeDocumentOutbox(ctx context.Context, tx storage.Tx, ts int64, key string, kind int, payload []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTradeDocumentOutbox", ctx, tx, ts, key, kind, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTradeDocumentOutbox indicates an expected call of AddTradeDocumentOutbox.
func (mr *MockTradeDocumentOutboxStorageMockRecorder) AddTradeDocumentOutbox(ctx, tx, ts, key, kind, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTradeDocumentOutbox", reflect.TypeOf((*MockTradeDocumentOutboxStorage)(nil).AddTradeDocumentOutbox), ctx, tx, ts, key, kind, payload)
}

// CreateTx mocks base method.
func (m *MockTradeDocumentOutboxStorage) CreateTx(ctx context.Context, options ...storage.CreateTxOption) (storage.Tx, context.Context, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTx", varargs...)
	ret0, _ := ret[0].(storage.Tx)
	ret1, _ := ret[1].(context.Context)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockTradeDocumentOutboxStorageMockRecorder) CreateTx(ctx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockTradeDocumentOutboxStorage)(nil).CreateTx), varargs...)
}

// DeleteTradeDocumentOutbox mocks base method.
func (m *MockTradeDocumentOutboxStorage) DeleteTradeDocumentOutbox(ctx context.Context, tx storage.Tx, recIDs ...int64) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, tx}
	for _, a := range recIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTradeDocumentOutbox", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTradeDocumentOutbox indicates an expected call of DeleteTradeDocumentOutbox.
func (mr *MockTradeDocumentOutboxStorageMockRecorder) DeleteTradeDocumentOutbox(ctx, tx interface{}, recIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, tx}, recIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTradeDocumentOutbox", reflect.TypeOf((*MockTradeDocumentOutboxStorage)(nil).DeleteTradeDocumentOutbox), varargs...)
}

// GetTradeDocumentOutbox mocks base method.
func (m *MockTradeDocumentOutboxStorage) GetTradeDocumentOutbox(ctx context.Context, tx storage.Tx, batchSize int) ([]storage.OutboxMsg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradeDocumentOutbox", ctx, tx, batchSize)
	ret0, _ := ret[0].([]storage.OutboxMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradeDocumentOutbox indicates an expected call of GetTradeDocumentOutbox.
func (mr *MockTradeDocumentOutboxStorageMockRecorder) GetTradeDocumentOutbox(ctx, tx, batchSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradeDocumentOutbox", reflect.TypeOf((*MockTradeDocumentOutboxStorage)(nil).GetTradeDocumentOutbox), ctx, tx, batchSize)
}
