// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/bu_server/business_unit/bu_controller.go

// Package mock_business_unit is a generated GoMock package.
package mock_business_unit

import (
	context "context"
	crypto "crypto"
	x509 "crypto/x509"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	business_unit "github.com/openebl/openebl/pkg/bu_server/business_unit"
	model "github.com/openebl/openebl/pkg/bu_server/model"
	storage "github.com/openebl/openebl/pkg/bu_server/storage"
	envelope "github.com/openebl/openebl/pkg/envelope"
)

// MockBusinessUnitManager is a mock of BusinessUnitManager interface.
type MockBusinessUnitManager struct {
	ctrl     *gomock.Controller
	recorder *MockBusinessUnitManagerMockRecorder
}

// MockBusinessUnitManagerMockRecorder is the mock recorder for MockBusinessUnitManager.
type MockBusinessUnitManagerMockRecorder struct {
	mock *MockBusinessUnitManager
}

// NewMockBusinessUnitManager creates a new mock instance.
func NewMockBusinessUnitManager(ctrl *gomock.Controller) *MockBusinessUnitManager {
	mock := &MockBusinessUnitManager{ctrl: ctrl}
	mock.recorder = &MockBusinessUnitManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusinessUnitManager) EXPECT() *MockBusinessUnitManagerMockRecorder {
	return m.recorder
}

// ActivateAuthentication mocks base method.
func (m *MockBusinessUnitManager) ActivateAuthentication(ctx context.Context, ts int64, certRaw []byte) (model.BusinessUnitAuthentication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateAuthentication", ctx, ts, certRaw)
	ret0, _ := ret[0].(model.BusinessUnitAuthentication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateAuthentication indicates an expected call of ActivateAuthentication.
func (mr *MockBusinessUnitManagerMockRecorder) ActivateAuthentication(ctx, ts, certRaw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateAuthentication", reflect.TypeOf((*MockBusinessUnitManager)(nil).ActivateAuthentication), ctx, ts, certRaw)
}

// AddAuthentication mocks base method.
func (m *MockBusinessUnitManager) AddAuthentication(ctx context.Context, ts int64, req business_unit.AddAuthenticationRequest) (model.BusinessUnitAuthentication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAuthentication", ctx, ts, req)
	ret0, _ := ret[0].(model.BusinessUnitAuthentication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAuthentication indicates an expected call of AddAuthentication.
func (mr *MockBusinessUnitManagerMockRecorder) AddAuthentication(ctx, ts, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthentication", reflect.TypeOf((*MockBusinessUnitManager)(nil).AddAuthentication), ctx, ts, req)
}

// CreateBusinessUnit mocks base method.
func (m *MockBusinessUnitManager) CreateBusinessUnit(ctx context.Context, ts int64, req business_unit.CreateBusinessUnitRequest) (model.BusinessUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBusinessUnit", ctx, ts, req)
	ret0, _ := ret[0].(model.BusinessUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBusinessUnit indicates an expected call of CreateBusinessUnit.
func (mr *MockBusinessUnitManagerMockRecorder) CreateBusinessUnit(ctx, ts, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBusinessUnit", reflect.TypeOf((*MockBusinessUnitManager)(nil).CreateBusinessUnit), ctx, ts, req)
}

// GetJWEEncryptors mocks base method.
func (m *MockBusinessUnitManager) GetJWEEncryptors(ctx context.Context, req business_unit.GetJWEEncryptorsRequest) ([]business_unit.JWEEncryptor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJWEEncryptors", ctx, req)
	ret0, _ := ret[0].([]business_unit.JWEEncryptor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJWEEncryptors indicates an expected call of GetJWEEncryptors.
func (mr *MockBusinessUnitManagerMockRecorder) GetJWEEncryptors(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJWEEncryptors", reflect.TypeOf((*MockBusinessUnitManager)(nil).GetJWEEncryptors), ctx, req)
}

// GetJWSSigner mocks base method.
func (m *MockBusinessUnitManager) GetJWSSigner(ctx context.Context, req business_unit.GetJWSSignerRequest) (business_unit.JWSSigner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJWSSigner", ctx, req)
	ret0, _ := ret[0].(business_unit.JWSSigner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJWSSigner indicates an expected call of GetJWSSigner.
func (mr *MockBusinessUnitManagerMockRecorder) GetJWSSigner(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJWSSigner", reflect.TypeOf((*MockBusinessUnitManager)(nil).GetJWSSigner), ctx, req)
}

// ListAuthentication mocks base method.
func (m *MockBusinessUnitManager) ListAuthentication(ctx context.Context, req storage.ListAuthenticationRequest) (storage.ListAuthenticationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuthentication", ctx, req)
	ret0, _ := ret[0].(storage.ListAuthenticationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthentication indicates an expected call of ListAuthentication.
func (mr *MockBusinessUnitManagerMockRecorder) ListAuthentication(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthentication", reflect.TypeOf((*MockBusinessUnitManager)(nil).ListAuthentication), ctx, req)
}

// ListBusinessUnits mocks base method.
func (m *MockBusinessUnitManager) ListBusinessUnits(ctx context.Context, req storage.ListBusinessUnitsRequest) (storage.ListBusinessUnitsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBusinessUnits", ctx, req)
	ret0, _ := ret[0].(storage.ListBusinessUnitsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBusinessUnits indicates an expected call of ListBusinessUnits.
func (mr *MockBusinessUnitManagerMockRecorder) ListBusinessUnits(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBusinessUnits", reflect.TypeOf((*MockBusinessUnitManager)(nil).ListBusinessUnits), ctx, req)
}

// RevokeAuthentication mocks base method.
func (m *MockBusinessUnitManager) RevokeAuthentication(ctx context.Context, ts int64, req business_unit.RevokeAuthenticationRequest) (model.BusinessUnitAuthentication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAuthentication", ctx, ts, req)
	ret0, _ := ret[0].(model.BusinessUnitAuthentication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAuthentication indicates an expected call of RevokeAuthentication.
func (mr *MockBusinessUnitManagerMockRecorder) RevokeAuthentication(ctx, ts, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAuthentication", reflect.TypeOf((*MockBusinessUnitManager)(nil).RevokeAuthentication), ctx, ts, req)
}

// SetStatus mocks base method.
func (m *MockBusinessUnitManager) SetStatus(ctx context.Context, ts int64, req business_unit.SetBusinessUnitStatusRequest) (model.BusinessUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", ctx, ts, req)
	ret0, _ := ret[0].(model.BusinessUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockBusinessUnitManagerMockRecorder) SetStatus(ctx, ts, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockBusinessUnitManager)(nil).SetStatus), ctx, ts, req)
}

// UpdateAuthenticationByExternalEvent mocks base method.
func (m *MockBusinessUnitManager) UpdateAuthenticationByExternalEvent(ctx context.Context, ts int64, signedEvt envelope.JWS) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthenticationByExternalEvent", ctx, ts, signedEvt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthenticationByExternalEvent indicates an expected call of UpdateAuthenticationByExternalEvent.
func (mr *MockBusinessUnitManagerMockRecorder) UpdateAuthenticationByExternalEvent(ctx, ts, signedEvt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthenticationByExternalEvent", reflect.TypeOf((*MockBusinessUnitManager)(nil).UpdateAuthenticationByExternalEvent), ctx, ts, signedEvt)
}

// UpdateBusinessUnit mocks base method.
func (m *MockBusinessUnitManager) UpdateBusinessUnit(ctx context.Context, ts int64, req business_unit.UpdateBusinessUnitRequest) (model.BusinessUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBusinessUnit", ctx, ts, req)
	ret0, _ := ret[0].(model.BusinessUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBusinessUnit indicates an expected call of UpdateBusinessUnit.
func (mr *MockBusinessUnitManagerMockRecorder) UpdateBusinessUnit(ctx, ts, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBusinessUnit", reflect.TypeOf((*MockBusinessUnitManager)(nil).UpdateBusinessUnit), ctx, ts, req)
}

// UpdateBusinessUnitByExternalEvent mocks base method.
func (m *MockBusinessUnitManager) UpdateBusinessUnitByExternalEvent(ctx context.Context, ts int64, signedEvt envelope.JWS) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBusinessUnitByExternalEvent", ctx, ts, signedEvt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBusinessUnitByExternalEvent indicates an expected call of UpdateBusinessUnitByExternalEvent.
func (mr *MockBusinessUnitManagerMockRecorder) UpdateBusinessUnitByExternalEvent(ctx, ts, signedEvt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBusinessUnitByExternalEvent", reflect.TypeOf((*MockBusinessUnitManager)(nil).UpdateBusinessUnitByExternalEvent), ctx, ts, signedEvt)
}

// MockJWSSigner is a mock of JWSSigner interface.
type MockJWSSigner struct {
	ctrl     *gomock.Controller
	recorder *MockJWSSignerMockRecorder
}

// MockJWSSignerMockRecorder is the mock recorder for MockJWSSigner.
type MockJWSSignerMockRecorder struct {
	mock *MockJWSSigner
}

// NewMockJWSSigner creates a new mock instance.
func NewMockJWSSigner(ctrl *gomock.Controller) *MockJWSSigner {
	mock := &MockJWSSigner{ctrl: ctrl}
	mock.recorder = &MockJWSSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWSSigner) EXPECT() *MockJWSSignerMockRecorder {
	return m.recorder
}

// AvailableJWSSignAlgorithms mocks base method.
func (m *MockJWSSigner) AvailableJWSSignAlgorithms() []envelope.SignatureAlgorithm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableJWSSignAlgorithms")
	ret0, _ := ret[0].([]envelope.SignatureAlgorithm)
	return ret0
}

// AvailableJWSSignAlgorithms indicates an expected call of AvailableJWSSignAlgorithms.
func (mr *MockJWSSignerMockRecorder) AvailableJWSSignAlgorithms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableJWSSignAlgorithms", reflect.TypeOf((*MockJWSSigner)(nil).AvailableJWSSignAlgorithms))
}

// Cert mocks base method.
func (m *MockJWSSigner) Cert() []*x509.Certificate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cert")
	ret0, _ := ret[0].([]*x509.Certificate)
	return ret0
}

// Cert indicates an expected call of Cert.
func (mr *MockJWSSignerMockRecorder) Cert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cert", reflect.TypeOf((*MockJWSSigner)(nil).Cert))
}

// Public mocks base method.
func (m *MockJWSSigner) Public() crypto.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Public")
	ret0, _ := ret[0].(crypto.PublicKey)
	return ret0
}

// Public indicates an expected call of Public.
func (mr *MockJWSSignerMockRecorder) Public() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Public", reflect.TypeOf((*MockJWSSigner)(nil).Public))
}

// Sign mocks base method.
func (m *MockJWSSigner) Sign(rand io.Reader, digest []byte, opts crypto.SignerOpts) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", rand, digest, opts)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockJWSSignerMockRecorder) Sign(rand, digest, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockJWSSigner)(nil).Sign), rand, digest, opts)
}

// MockJWEEncryptor is a mock of JWEEncryptor interface.
type MockJWEEncryptor struct {
	ctrl     *gomock.Controller
	recorder *MockJWEEncryptorMockRecorder
}

// MockJWEEncryptorMockRecorder is the mock recorder for MockJWEEncryptor.
type MockJWEEncryptorMockRecorder struct {
	mock *MockJWEEncryptor
}

// NewMockJWEEncryptor creates a new mock instance.
func NewMockJWEEncryptor(ctrl *gomock.Controller) *MockJWEEncryptor {
	mock := &MockJWEEncryptor{ctrl: ctrl}
	mock.recorder = &MockJWEEncryptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWEEncryptor) EXPECT() *MockJWEEncryptorMockRecorder {
	return m.recorder
}

// AvailableJWEEncryptAlgorithms mocks base method.
func (m *MockJWEEncryptor) AvailableJWEEncryptAlgorithms() []envelope.KeyEncryptionAlgorithm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableJWEEncryptAlgorithms")
	ret0, _ := ret[0].([]envelope.KeyEncryptionAlgorithm)
	return ret0
}

// AvailableJWEEncryptAlgorithms indicates an expected call of AvailableJWEEncryptAlgorithms.
func (mr *MockJWEEncryptorMockRecorder) AvailableJWEEncryptAlgorithms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableJWEEncryptAlgorithms", reflect.TypeOf((*MockJWEEncryptor)(nil).AvailableJWEEncryptAlgorithms))
}

// Public mocks base method.
func (m *MockJWEEncryptor) Public() crypto.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Public")
	ret0, _ := ret[0].(crypto.PublicKey)
	return ret0
}

// Public indicates an expected call of Public.
func (mr *MockJWEEncryptorMockRecorder) Public() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Public", reflect.TypeOf((*MockJWEEncryptor)(nil).Public))
}
