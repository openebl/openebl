// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/bu_server/webhook/webhook_controller.go

// Package mock_webhook is a generated GoMock package.
package mock_webhook

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/openebl/openebl/pkg/bu_server/model"
	storage "github.com/openebl/openebl/pkg/bu_server/storage"
	webhook "github.com/openebl/openebl/pkg/bu_server/webhook"
)

// MockWebhookController is a mock of WebhookController interface.
type MockWebhookController struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookControllerMockRecorder
}

// MockWebhookControllerMockRecorder is the mock recorder for MockWebhookController.
type MockWebhookControllerMockRecorder struct {
	mock *MockWebhookController
}

// NewMockWebhookController creates a new mock instance.
func NewMockWebhookController(ctrl *gomock.Controller) *MockWebhookController {
	mock := &MockWebhookController{ctrl: ctrl}
	mock.recorder = &MockWebhookControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookController) EXPECT() *MockWebhookControllerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWebhookController) Create(ctx context.Context, ts int64, req webhook.CreateWebhookRequest) (model.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ts, req)
	ret0, _ := ret[0].(model.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWebhookControllerMockRecorder) Create(ctx, ts, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWebhookController)(nil).Create), ctx, ts, req)
}

// Delete mocks base method.
func (m *MockWebhookController) Delete(ctx context.Context, ts int64, req webhook.DeleteWebhookRequest) (model.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, ts, req)
	ret0, _ := ret[0].(model.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockWebhookControllerMockRecorder) Delete(ctx, ts, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWebhookController)(nil).Delete), ctx, ts, req)
}

// Get mocks base method.
func (m *MockWebhookController) Get(ctx context.Context, applicationID, id string) (model.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, applicationID, id)
	ret0, _ := ret[0].(model.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWebhookControllerMockRecorder) Get(ctx, applicationID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWebhookController)(nil).Get), ctx, applicationID, id)
}

// List mocks base method.
func (m *MockWebhookController) List(ctx context.Context, req webhook.ListWebhookRequest) (webhook.ListWebhookResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, req)
	ret0, _ := ret[0].(webhook.ListWebhookResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockWebhookControllerMockRecorder) List(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWebhookController)(nil).List), ctx, req)
}

// SendWebhookEvent mocks base method.
func (m *MockWebhookController) SendWebhookEvent(ctx context.Context, tx storage.Tx, ts int64, applicationID, id string, eventType model.WebhookEventType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWebhookEvent", ctx, tx, ts, applicationID, id, eventType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendWebhookEvent indicates an expected call of SendWebhookEvent.
func (mr *MockWebhookControllerMockRecorder) SendWebhookEvent(ctx, tx, ts, applicationID, id, eventType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWebhookEvent", reflect.TypeOf((*MockWebhookController)(nil).SendWebhookEvent), ctx, tx, ts, applicationID, id, eventType)
}

// Update mocks base method.
func (m *MockWebhookController) Update(ctx context.Context, ts int64, req webhook.UpdateWebhookRequest) (model.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, ts, req)
	ret0, _ := ret[0].(model.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockWebhookControllerMockRecorder) Update(ctx, ts, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWebhookController)(nil).Update), ctx, ts, req)
}
